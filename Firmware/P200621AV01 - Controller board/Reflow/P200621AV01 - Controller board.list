
P200621AV01 - Controller board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  08009d88  08009d88  00019d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a0  0800a9a0  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9a0  0800a9a0  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9a0  0800a9a0  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9a0  0800a9a0  0001a9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9a4  0800a9a4  0001a9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800a9a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000230  0800abd8  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  0800abd8  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cae4  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a64  00000000  00000000  0003cd3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001016c  00000000  00000000  000407a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  00050910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a0  00000000  00000000  00051c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9d3  00000000  00000000  00052ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001964f  00000000  00000000  0006d893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000924e4  00000000  00000000  00086ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  001193c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c88  00000000  00000000  00119490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d6c 	.word	0x08009d6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	08009d6c 	.word	0x08009d6c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <Max31865_delay>:
#define MAX31865_FAULT_OVUV             0x04

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void Max31865_delay(uint32_t delay_ms) {
 8001150:	b508      	push	{r3, lr}
#if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
  #else
	HAL_Delay(delay_ms);
 8001152:	f002 f9ab 	bl	80034ac <HAL_Delay>
#endif
}
 8001156:	bd08      	pop	{r3, pc}

08001158 <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865, uint8_t addr, uint8_t *buffer,
		uint8_t n) {
 8001158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115a:	b087      	sub	sp, #28
 800115c:	4607      	mov	r7, r0
 800115e:	4616      	mov	r6, r2
 8001160:	461d      	mov	r5, r3
	uint8_t tmp = 0xFF;
 8001162:	23ff      	movs	r3, #255	; 0xff
 8001164:	f88d 3017 	strb.w	r3, [sp, #23]
	addr &= 0x7F;
 8001168:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800116c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	8881      	ldrh	r1, [r0, #4]
 8001174:	6800      	ldr	r0, [r0, #0]
 8001176:	f002 fc3e 	bl	80039f6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(max31865->spi, &addr, 1, 100);
 800117a:	2364      	movs	r3, #100	; 0x64
 800117c:	2201      	movs	r2, #1
 800117e:	f10d 010f 	add.w	r1, sp, #15
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f003 fac3 	bl	800470e <HAL_SPI_Transmit>
	while (n--) {
 8001188:	1e69      	subs	r1, r5, #1
 800118a:	b2cc      	uxtb	r4, r1
 800118c:	b15d      	cbz	r5, 80011a6 <Max31865_readRegisterN+0x4e>
		HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	4632      	mov	r2, r6
 8001196:	f10d 0117 	add.w	r1, sp, #23
 800119a:	68b8      	ldr	r0, [r7, #8]
 800119c:	f003 fb8e 	bl	80048bc <HAL_SPI_TransmitReceive>
		buffer++;
 80011a0:	3601      	adds	r6, #1
	while (n--) {
 80011a2:	4625      	mov	r5, r4
 80011a4:	e7f0      	b.n	8001188 <Max31865_readRegisterN+0x30>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	88b9      	ldrh	r1, [r7, #4]
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f002 fc23 	bl	80039f6 <HAL_GPIO_WritePin>
}
 80011b0:	b007      	add	sp, #28
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b4 <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865, uint8_t addr) {
 80011b4:	b500      	push	{lr}
 80011b6:	b083      	sub	sp, #12
	uint8_t ret = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f88d 3007 	strb.w	r3, [sp, #7]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 80011be:	2301      	movs	r3, #1
 80011c0:	f10d 0207 	add.w	r2, sp, #7
 80011c4:	f7ff ffc8 	bl	8001158 <Max31865_readRegisterN>
	return ret;
}
 80011c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80011cc:	b003      	add	sp, #12
 80011ce:	f85d fb04 	ldr.w	pc, [sp], #4

080011d2 <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865, uint8_t addr) {
 80011d2:	b500      	push	{lr}
 80011d4:	b083      	sub	sp, #12
	uint8_t buffer[2] = { 0, 0 };
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8ad 3004 	strh.w	r3, [sp, #4]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 80011dc:	2302      	movs	r3, #2
 80011de:	aa01      	add	r2, sp, #4
 80011e0:	f7ff ffba 	bl	8001158 <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 80011e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
	ret <<= 8;
	ret |= buffer[1];
 80011e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return ret;
}
 80011ec:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80011f0:	b003      	add	sp, #12
 80011f2:	f85d fb04 	ldr.w	pc, [sp], #4

080011f6 <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865, uint8_t addr, uint8_t data) {
 80011f6:	b510      	push	{r4, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	4604      	mov	r4, r0
 80011fc:	f88d 1007 	strb.w	r1, [sp, #7]
 8001200:	f88d 2006 	strb.w	r2, [sp, #6]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	8881      	ldrh	r1, [r0, #4]
 8001208:	6800      	ldr	r0, [r0, #0]
 800120a:	f002 fbf4 	bl	80039f6 <HAL_GPIO_WritePin>
	addr |= 0x80;
 800120e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001212:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001216:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(max31865->spi, &addr, 1, 100);
 800121a:	2364      	movs	r3, #100	; 0x64
 800121c:	2201      	movs	r2, #1
 800121e:	f10d 0107 	add.w	r1, sp, #7
 8001222:	68a0      	ldr	r0, [r4, #8]
 8001224:	f003 fa73 	bl	800470e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi, &data, 1, 100);
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	2201      	movs	r2, #1
 800122c:	f10d 0106 	add.w	r1, sp, #6
 8001230:	68a0      	ldr	r0, [r4, #8]
 8001232:	f003 fa6c 	bl	800470e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	88a1      	ldrh	r1, [r4, #4]
 800123a:	6820      	ldr	r0, [r4, #0]
 800123c:	f002 fbdb 	bl	80039f6 <HAL_GPIO_WritePin>
}
 8001240:	b002      	add	sp, #8
 8001242:	bd10      	pop	{r4, pc}

08001244 <Max31865_readFault>:
//#########################################################################################################################
uint8_t Max31865_readFault(Max31865_t *max31865) {
 8001244:	b508      	push	{r3, lr}
	return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 8001246:	2107      	movs	r1, #7
 8001248:	f7ff ffb4 	bl	80011b4 <Max31865_readRegister8>
}
 800124c:	bd08      	pop	{r3, pc}

0800124e <Max31865_clearFault>:
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865) {
 800124e:	b510      	push	{r4, lr}
 8001250:	4604      	mov	r4, r0
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001252:	2100      	movs	r1, #0
 8001254:	f7ff ffae 	bl	80011b4 <Max31865_readRegister8>
	t &= ~0x2C;
 8001258:	f000 02d3 	and.w	r2, r0, #211	; 0xd3
	t |= MAX31856_CONFIG_FAULTSTAT;
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800125c:	f042 0202 	orr.w	r2, r2, #2
 8001260:	2100      	movs	r1, #0
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ffc7 	bl	80011f6 <Max31865_writeRegister8>
}
 8001268:	bd10      	pop	{r4, pc}

0800126a <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable) {
 800126a:	b538      	push	{r3, r4, r5, lr}
 800126c:	4604      	mov	r4, r0
 800126e:	460d      	mov	r5, r1
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001270:	2100      	movs	r1, #0
 8001272:	f7ff ff9f 	bl	80011b4 <Max31865_readRegister8>
	if (enable)
 8001276:	b13d      	cbz	r5, 8001288 <Max31865_enableBias+0x1e>
		t |= MAX31856_CONFIG_BIAS;
 8001278:	f060 027f 	orn	r2, r0, #127	; 0x7f
 800127c:	b2d2      	uxtb	r2, r2
	else
		t &= ~MAX31856_CONFIG_BIAS;
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800127e:	2100      	movs	r1, #0
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff ffb8 	bl	80011f6 <Max31865_writeRegister8>
}
 8001286:	bd38      	pop	{r3, r4, r5, pc}
		t &= ~MAX31856_CONFIG_BIAS;
 8001288:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800128c:	e7f7      	b.n	800127e <Max31865_enableBias+0x14>

0800128e <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable) {
 800128e:	b538      	push	{r3, r4, r5, lr}
 8001290:	4604      	mov	r4, r0
 8001292:	460d      	mov	r5, r1
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001294:	2100      	movs	r1, #0
 8001296:	f7ff ff8d 	bl	80011b4 <Max31865_readRegister8>
	if (enable)
 800129a:	b13d      	cbz	r5, 80012ac <Max31865_autoConvert+0x1e>
		t |= MAX31856_CONFIG_MODEAUTO;
 800129c:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 80012a0:	b2d2      	uxtb	r2, r2
	else
		t &= ~MAX31856_CONFIG_MODEAUTO;
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80012a2:	2100      	movs	r1, #0
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff ffa6 	bl	80011f6 <Max31865_writeRegister8>
}
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
		t &= ~MAX31856_CONFIG_MODEAUTO;
 80012ac:	f000 02bf 	and.w	r2, r0, #191	; 0xbf
 80012b0:	e7f7      	b.n	80012a2 <Max31865_autoConvert+0x14>

080012b2 <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires) {
 80012b2:	b538      	push	{r3, r4, r5, lr}
 80012b4:	4604      	mov	r4, r0
 80012b6:	460d      	mov	r5, r1
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80012b8:	2100      	movs	r1, #0
 80012ba:	f7ff ff7b 	bl	80011b4 <Max31865_readRegister8>
	if (numWires == 3)
 80012be:	2d03      	cmp	r5, #3
 80012c0:	d006      	beq.n	80012d0 <Max31865_setWires+0x1e>
		t |= MAX31856_CONFIG_3WIRE;
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 80012c2:	f000 02ef 	and.w	r2, r0, #239	; 0xef
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80012c6:	2100      	movs	r1, #0
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff ff94 	bl	80011f6 <Max31865_writeRegister8>
}
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
		t |= MAX31856_CONFIG_3WIRE;
 80012d0:	f040 0210 	orr.w	r2, r0, #16
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	e7f6      	b.n	80012c6 <Max31865_setWires+0x14>

080012d8 <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz) {
 80012d8:	b538      	push	{r3, r4, r5, lr}
 80012da:	4604      	mov	r4, r0
 80012dc:	460d      	mov	r5, r1
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80012de:	2100      	movs	r1, #0
 80012e0:	f7ff ff68 	bl	80011b4 <Max31865_readRegister8>
	if (filterHz == 50)
 80012e4:	2d32      	cmp	r5, #50	; 0x32
 80012e6:	d006      	beq.n	80012f6 <Max31865_setFilter+0x1e>
		t |= MAX31856_CONFIG_FILT50HZ;
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 80012e8:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80012ec:	2100      	movs	r1, #0
 80012ee:	4620      	mov	r0, r4
 80012f0:	f7ff ff81 	bl	80011f6 <Max31865_writeRegister8>
}
 80012f4:	bd38      	pop	{r3, r4, r5, pc}
		t |= MAX31856_CONFIG_FILT50HZ;
 80012f6:	f040 0201 	orr.w	r2, r0, #1
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	e7f6      	b.n	80012ec <Max31865_setFilter+0x14>

080012fe <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD(Max31865_t *max31865) {
 80012fe:	b510      	push	{r4, lr}
 8001300:	4604      	mov	r4, r0
	Max31865_clearFault(max31865);
 8001302:	f7ff ffa4 	bl	800124e <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 8001306:	2101      	movs	r1, #1
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff ffae 	bl	800126a <Max31865_enableBias>
	Max31865_delay(10);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff ff1e 	bl	8001150 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001314:	2100      	movs	r1, #0
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff ff4c 	bl	80011b4 <Max31865_readRegister8>
	t |= MAX31856_CONFIG_1SHOT;
 800131c:	f040 0220 	orr.w	r2, r0, #32
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	2100      	movs	r1, #0
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff ff66 	bl	80011f6 <Max31865_writeRegister8>
	Max31865_delay(65);
 800132a:	2041      	movs	r0, #65	; 0x41
 800132c:	f7ff ff10 	bl	8001150 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8001330:	2101      	movs	r1, #1
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff ff4d 	bl	80011d2 <Max31865_readRegister16>
	rtd >>= 1;
	return rtd;
}
 8001338:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800133c:	bd10      	pop	{r4, pc}

0800133e <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void Max31865_init(Max31865_t *max31865, SPI_HandleTypeDef *spi,
		GPIO_TypeDef *cs_gpio, uint16_t cs_pin, uint8_t numwires,
		uint8_t filterHz) {
 800133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	4604      	mov	r4, r0
 8001344:	4688      	mov	r8, r1
 8001346:	4616      	mov	r6, r2
 8001348:	461f      	mov	r7, r3
	if (max31865->lock == 1)
 800134a:	7b03      	ldrb	r3, [r0, #12]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d024      	beq.n	800139a <Max31865_init+0x5c>
		Max31865_delay(1);
	max31865->lock = 1;
 8001350:	2501      	movs	r5, #1
 8001352:	7325      	strb	r5, [r4, #12]
	max31865->spi = spi;
 8001354:	f8c4 8008 	str.w	r8, [r4, #8]
	max31865->cs_gpio = cs_gpio;
 8001358:	6026      	str	r6, [r4, #0]
	max31865->cs_pin = cs_pin;
 800135a:	80a7      	strh	r7, [r4, #4]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 800135c:	462a      	mov	r2, r5
 800135e:	4639      	mov	r1, r7
 8001360:	4630      	mov	r0, r6
 8001362:	f002 fb48 	bl	80039f6 <HAL_GPIO_WritePin>
	Max31865_delay(100);
 8001366:	2064      	movs	r0, #100	; 0x64
 8001368:	f7ff fef2 	bl	8001150 <Max31865_delay>
	Max31865_setWires(max31865, numwires);
 800136c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff ff9e 	bl	80012b2 <Max31865_setWires>
	Max31865_enableBias(max31865, 1);
 8001376:	4629      	mov	r1, r5
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff ff76 	bl	800126a <Max31865_enableBias>
	Max31865_autoConvert(max31865, 1);
 800137e:	4629      	mov	r1, r5
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff ff84 	bl	800128e <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff ff61 	bl	800124e <Max31865_clearFault>
	Max31865_setFilter(max31865, filterHz);
 800138c:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8001390:	4620      	mov	r0, r4
 8001392:	f7ff ffa1 	bl	80012d8 <Max31865_setFilter>
}
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Max31865_delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff fed8 	bl	8001150 <Max31865_delay>
 80013a0:	e7d6      	b.n	8001350 <Max31865_init+0x12>
 80013a2:	0000      	movs	r0, r0
 80013a4:	0000      	movs	r0, r0
	...

080013a8 <Max31865_readTempC>:
//#########################################################################################################################
bool Max31865_readTempC(Max31865_t *max31865, float *readTemp) {
 80013a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013ac:	4604      	mov	r4, r0
 80013ae:	460e      	mov	r6, r1
	if (max31865->lock == 1)
 80013b0:	7b03      	ldrb	r3, [r0, #12]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	f000 80a8 	beq.w	8001508 <Max31865_readTempC+0x160>
		Max31865_delay(1);
	max31865->lock = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	7323      	strb	r3, [r4, #12]
	bool isOk = false;
	float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff ff9e 	bl	80012fe <Max31865_readRTD>
 80013c2:	f7ff fc91 	bl	8000ce8 <__aeabi_ui2f>
	Rt /= 32768;
 80013c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80013ca:	f7ff fce5 	bl	8000d98 <__aeabi_fmul>
	Rt *= _MAX31865_RREF;
 80013ce:	4962      	ldr	r1, [pc, #392]	; (8001558 <Max31865_readTempC+0x1b0>)
 80013d0:	f7ff fce2 	bl	8000d98 <__aeabi_fmul>
 80013d4:	4605      	mov	r5, r0
	Z1 = -RTD_A;
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
	Z4 = 2 * RTD_B;
	temp = Z2 + (Z3 * Rt);
 80013d6:	4961      	ldr	r1, [pc, #388]	; (800155c <Max31865_readTempC+0x1b4>)
 80013d8:	f7ff fcde 	bl	8000d98 <__aeabi_fmul>
 80013dc:	4960      	ldr	r1, [pc, #384]	; (8001560 <Max31865_readTempC+0x1b8>)
 80013de:	f7ff fbd3 	bl	8000b88 <__addsf3>
	temp = (sqrtf(temp) + Z1) / Z4;
 80013e2:	f008 fc4f 	bl	8009c84 <sqrtf>
 80013e6:	495f      	ldr	r1, [pc, #380]	; (8001564 <Max31865_readTempC+0x1bc>)
 80013e8:	f7ff fbcc 	bl	8000b84 <__aeabi_fsub>
 80013ec:	495e      	ldr	r1, [pc, #376]	; (8001568 <Max31865_readTempC+0x1c0>)
 80013ee:	f7ff fd87 	bl	8000f00 <__aeabi_fdiv>
 80013f2:	4607      	mov	r7, r0

	if (temp >= 0) {
 80013f4:	2100      	movs	r1, #0
 80013f6:	f7ff fe81 	bl	80010fc <__aeabi_fcmpge>
 80013fa:	2800      	cmp	r0, #0
 80013fc:	f040 8088 	bne.w	8001510 <Max31865_readTempC+0x168>
		if (Max31865_readFault(max31865) == 0)
			isOk = true;
		max31865->lock = 0;
		return isOk;
	}
	Rt /= _MAX31865_RNOMINAL;
 8001400:	495a      	ldr	r1, [pc, #360]	; (800156c <Max31865_readTempC+0x1c4>)
 8001402:	4628      	mov	r0, r5
 8001404:	f7ff fd7c 	bl	8000f00 <__aeabi_fdiv>
	Rt *= 100;
 8001408:	4958      	ldr	r1, [pc, #352]	; (800156c <Max31865_readTempC+0x1c4>)
 800140a:	f7ff fcc5 	bl	8000d98 <__aeabi_fmul>
 800140e:	4605      	mov	r5, r0
	float rpoly = Rt;
	temp = -242.02;
	temp += 2.2228 * rpoly;
 8001410:	f7ff f814 	bl	800043c <__aeabi_f2d>
 8001414:	a344      	add	r3, pc, #272	; (adr r3, 8001528 <Max31865_readTempC+0x180>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f867 	bl	80004ec <__aeabi_dmul>
 800141e:	a344      	add	r3, pc, #272	; (adr r3, 8001530 <Max31865_readTempC+0x188>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7fe feaa 	bl	800017c <__aeabi_dsub>
 8001428:	f7ff fb58 	bl	8000adc <__aeabi_d2f>
 800142c:	4607      	mov	r7, r0
	rpoly *= Rt;  // square
 800142e:	4629      	mov	r1, r5
 8001430:	4628      	mov	r0, r5
 8001432:	f7ff fcb1 	bl	8000d98 <__aeabi_fmul>
 8001436:	4682      	mov	sl, r0
	temp += 2.5859e-3 * rpoly;
 8001438:	f7ff f800 	bl	800043c <__aeabi_f2d>
 800143c:	a33e      	add	r3, pc, #248	; (adr r3, 8001538 <Max31865_readTempC+0x190>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f853 	bl	80004ec <__aeabi_dmul>
 8001446:	4680      	mov	r8, r0
 8001448:	4689      	mov	r9, r1
 800144a:	4638      	mov	r0, r7
 800144c:	f7fe fff6 	bl	800043c <__aeabi_f2d>
 8001450:	4642      	mov	r2, r8
 8001452:	464b      	mov	r3, r9
 8001454:	f7fe fe94 	bl	8000180 <__adddf3>
 8001458:	f7ff fb40 	bl	8000adc <__aeabi_d2f>
 800145c:	4607      	mov	r7, r0
	rpoly *= Rt;  // ^3
 800145e:	4651      	mov	r1, sl
 8001460:	4628      	mov	r0, r5
 8001462:	f7ff fc99 	bl	8000d98 <__aeabi_fmul>
 8001466:	4682      	mov	sl, r0
	temp -= 4.8260e-6 * rpoly;
 8001468:	f7fe ffe8 	bl	800043c <__aeabi_f2d>
 800146c:	a334      	add	r3, pc, #208	; (adr r3, 8001540 <Max31865_readTempC+0x198>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f83b 	bl	80004ec <__aeabi_dmul>
 8001476:	4680      	mov	r8, r0
 8001478:	4689      	mov	r9, r1
 800147a:	4638      	mov	r0, r7
 800147c:	f7fe ffde 	bl	800043c <__aeabi_f2d>
 8001480:	4642      	mov	r2, r8
 8001482:	464b      	mov	r3, r9
 8001484:	f7fe fe7a 	bl	800017c <__aeabi_dsub>
 8001488:	f7ff fb28 	bl	8000adc <__aeabi_d2f>
 800148c:	4607      	mov	r7, r0
	rpoly *= Rt;  // ^4
 800148e:	4651      	mov	r1, sl
 8001490:	4628      	mov	r0, r5
 8001492:	f7ff fc81 	bl	8000d98 <__aeabi_fmul>
 8001496:	4682      	mov	sl, r0
	temp -= 2.8183e-8 * rpoly;
 8001498:	f7fe ffd0 	bl	800043c <__aeabi_f2d>
 800149c:	a32a      	add	r3, pc, #168	; (adr r3, 8001548 <Max31865_readTempC+0x1a0>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f823 	bl	80004ec <__aeabi_dmul>
 80014a6:	4680      	mov	r8, r0
 80014a8:	4689      	mov	r9, r1
 80014aa:	4638      	mov	r0, r7
 80014ac:	f7fe ffc6 	bl	800043c <__aeabi_f2d>
 80014b0:	4642      	mov	r2, r8
 80014b2:	464b      	mov	r3, r9
 80014b4:	f7fe fe62 	bl	800017c <__aeabi_dsub>
 80014b8:	f7ff fb10 	bl	8000adc <__aeabi_d2f>
 80014bc:	4607      	mov	r7, r0
	rpoly *= Rt;  // ^5
 80014be:	4651      	mov	r1, sl
 80014c0:	4628      	mov	r0, r5
 80014c2:	f7ff fc69 	bl	8000d98 <__aeabi_fmul>
	temp += 1.5243e-10 * rpoly;
 80014c6:	f7fe ffb9 	bl	800043c <__aeabi_f2d>
 80014ca:	a321      	add	r3, pc, #132	; (adr r3, 8001550 <Max31865_readTempC+0x1a8>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f80c 	bl	80004ec <__aeabi_dmul>
 80014d4:	4680      	mov	r8, r0
 80014d6:	4689      	mov	r9, r1
 80014d8:	4638      	mov	r0, r7
 80014da:	f7fe ffaf 	bl	800043c <__aeabi_f2d>
 80014de:	4642      	mov	r2, r8
 80014e0:	464b      	mov	r3, r9
 80014e2:	f7fe fe4d 	bl	8000180 <__adddf3>
 80014e6:	f7ff faf9 	bl	8000adc <__aeabi_d2f>

	*readTemp = temp;
 80014ea:	6030      	str	r0, [r6, #0]
	isOk = !Max31865_readFault(max31865);
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff fea9 	bl	8001244 <Max31865_readFault>
 80014f2:	2800      	cmp	r0, #0
 80014f4:	bf0c      	ite	eq
 80014f6:	2001      	moveq	r0, #1
 80014f8:	2000      	movne	r0, #0
	if ( isOk == 0 )
 80014fa:	d001      	beq.n	8001500 <Max31865_readTempC+0x158>
	{
		*readTemp = 0.0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	6033      	str	r3, [r6, #0]
	}
	max31865->lock = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	7323      	strb	r3, [r4, #12]
	return isOk;
}
 8001504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Max31865_delay(1);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fe21 	bl	8001150 <Max31865_delay>
 800150e:	e753      	b.n	80013b8 <Max31865_readTempC+0x10>
		*readTemp = temp;
 8001510:	6037      	str	r7, [r6, #0]
		if (Max31865_readFault(max31865) == 0)
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff fe96 	bl	8001244 <Max31865_readFault>
 8001518:	b118      	cbz	r0, 8001522 <Max31865_readTempC+0x17a>
	bool isOk = false;
 800151a:	2000      	movs	r0, #0
		max31865->lock = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	7323      	strb	r3, [r4, #12]
		return isOk;
 8001520:	e7f0      	b.n	8001504 <Max31865_readTempC+0x15c>
			isOk = true;
 8001522:	2001      	movs	r0, #1
 8001524:	e7fa      	b.n	800151c <Max31865_readTempC+0x174>
 8001526:	bf00      	nop
 8001528:	5dcc63f1 	.word	0x5dcc63f1
 800152c:	4001c84b 	.word	0x4001c84b
 8001530:	e0000000 	.word	0xe0000000
 8001534:	406e40a3 	.word	0x406e40a3
 8001538:	7dc882bb 	.word	0x7dc882bb
 800153c:	3f652f06 	.word	0x3f652f06
 8001540:	c766c293 	.word	0xc766c293
 8001544:	3ed43de0 	.word	0x3ed43de0
 8001548:	513156ce 	.word	0x513156ce
 800154c:	3e5e42e2 	.word	0x3e5e42e2
 8001550:	61e4fa3e 	.word	0x61e4fa3e
 8001554:	3de4f327 	.word	0x3de4f327
 8001558:	43c80000 	.word	0x43c80000
 800155c:	b2c66d70 	.word	0xb2c66d70
 8001560:	37938317 	.word	0x37938317
 8001564:	3b801132 	.word	0x3b801132
 8001568:	b59b057f 	.word	0xb59b057f
 800156c:	42c80000 	.word	0x42c80000

08001570 <Max31865_Filter>:
	bool isOk = Max31865_readTempC(max31865, readTemp);
	*readTemp = (*readTemp * 9.0f / 5.0f) + 32.0f;
	return isOk;
}
//#########################################################################################################################
float Max31865_Filter(float newInput, float lastOutput, float efectiveFactor) {
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	4606      	mov	r6, r0
 8001574:	460d      	mov	r5, r1
 8001576:	4614      	mov	r4, r2
	return ((float) lastOutput * (1.0f - efectiveFactor))
 8001578:	4611      	mov	r1, r2
 800157a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800157e:	f7ff fb01 	bl	8000b84 <__aeabi_fsub>
 8001582:	4629      	mov	r1, r5
 8001584:	f7ff fc08 	bl	8000d98 <__aeabi_fmul>
 8001588:	4605      	mov	r5, r0
			+ ((float) newInput * efectiveFactor);
 800158a:	4631      	mov	r1, r6
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff fc03 	bl	8000d98 <__aeabi_fmul>
 8001592:	4601      	mov	r1, r0
 8001594:	4628      	mov	r0, r5
 8001596:	f7ff faf7 	bl	8000b88 <__addsf3>
}
 800159a:	bd70      	pop	{r4, r5, r6, pc}

0800159c <CLI_ValidateSyntax>:
 * @param buff char buffer
 * @param size size cmd string
 * @return uint8_t errorNbr
 */
static uint8_t CLI_ValidateSyntax(char *buff, uint8_t size)
{
 800159c:	b470      	push	{r4, r5, r6}
    uint8_t eolCharCnt = 0;
    //Check if correct amount of EOL chars are present in the buffer. just one of each
    for (uint8_t i = 0; i < EOL_LENGHT; i++)
 800159e:	2600      	movs	r6, #0
    uint8_t eolCharCnt = 0;
 80015a0:	4635      	mov	r5, r6
    for (uint8_t i = 0; i < EOL_LENGHT; i++)
 80015a2:	b18e      	cbz	r6, 80015c8 <CLI_ValidateSyntax+0x2c>
    //Check for space on first location, this indicates an error
    //TODO

    //check for double spaces, this indicates an error
    //TODO
    return 0; //comamand format valid
 80015a4:	2000      	movs	r0, #0
}
 80015a6:	bc70      	pop	{r4, r5, r6}
 80015a8:	4770      	bx	lr
        for (uint8_t j = 0; j < size; j++)
 80015aa:	3301      	adds	r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	428b      	cmp	r3, r1
 80015b0:	d20c      	bcs.n	80015cc <CLI_ValidateSyntax+0x30>
            if (eolSeq[i] == buff[j])
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <CLI_ValidateSyntax+0x38>)
 80015b4:	5d94      	ldrb	r4, [r2, r6]
 80015b6:	5cc2      	ldrb	r2, [r0, r3]
 80015b8:	4294      	cmp	r4, r2
 80015ba:	d1f6      	bne.n	80015aa <CLI_ValidateSyntax+0xe>
                eolCharCnt++;
 80015bc:	3501      	adds	r5, #1
 80015be:	b2ed      	uxtb	r5, r5
                if (eolCharCnt > EOL_LENGHT)
 80015c0:	2d01      	cmp	r5, #1
 80015c2:	d9f2      	bls.n	80015aa <CLI_ValidateSyntax+0xe>
                    return 1;
 80015c4:	2001      	movs	r0, #1
 80015c6:	e7ee      	b.n	80015a6 <CLI_ValidateSyntax+0xa>
        for (uint8_t j = 0; j < size; j++)
 80015c8:	4633      	mov	r3, r6
 80015ca:	e7f0      	b.n	80015ae <CLI_ValidateSyntax+0x12>
    for (uint8_t i = 0; i < EOL_LENGHT; i++)
 80015cc:	3601      	adds	r6, #1
 80015ce:	b2f6      	uxtb	r6, r6
 80015d0:	e7e7      	b.n	80015a2 <CLI_ValidateSyntax+0x6>
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000

080015d8 <CLI_AddCmd>:
{
 80015d8:	b4f0      	push	{r4, r5, r6, r7}
    cmdList[cmdCnt].name = cmdName;
 80015da:	4e08      	ldr	r6, [pc, #32]	; (80015fc <CLI_AddCmd+0x24>)
 80015dc:	7834      	ldrb	r4, [r6, #0]
 80015de:	4f08      	ldr	r7, [pc, #32]	; (8001600 <CLI_AddCmd+0x28>)
 80015e0:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 80015e4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
 80015e8:	f847 000c 	str.w	r0, [r7, ip]
    cmdList[cmdCnt].cmdDesc = cmdDesc;
 80015ec:	6069      	str	r1, [r5, #4]
    cmdList[cmdCnt].paramCnt = paramCnt;
 80015ee:	722a      	strb	r2, [r5, #8]
    cmdList[cmdCnt].callback = callback;
 80015f0:	60eb      	str	r3, [r5, #12]
    cmdCnt++;
 80015f2:	3401      	adds	r4, #1
 80015f4:	7034      	strb	r4, [r6, #0]
}
 80015f6:	bcf0      	pop	{r4, r5, r6, r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2000024c 	.word	0x2000024c
 8001600:	20000300 	.word	0x20000300

08001604 <CLI_RunCmd>:
 * @param cmdString 
 * @param size 
 * @return uint8_t 
 */
uint8_t CLI_RunCmd(char *cmdString, uint8_t size)
 {
 8001604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001608:	b0b2      	sub	sp, #200	; 0xc8
 800160a:	4607      	mov	r7, r0
 800160c:	460c      	mov	r4, r1
	char response[CMD_RESPONSE_SIZE] = { '\0' }; //stores callback response
 800160e:	2100      	movs	r1, #0
 8001610:	9100      	str	r1, [sp, #0]
 8001612:	22c4      	movs	r2, #196	; 0xc4
 8001614:	a801      	add	r0, sp, #4
 8001616:	f004 fecf 	bl	80063b8 <memset>

	// check cmd format matches: <cmdname>' '<param1>' '<param2>\n
	if (CLI_ValidateSyntax(cmdString, size) != 0) {
 800161a:	4621      	mov	r1, r4
 800161c:	4638      	mov	r0, r7
 800161e:	f7ff ffbd 	bl	800159c <CLI_ValidateSyntax>
 8001622:	bb10      	cbnz	r0, 800166a <CLI_RunCmd+0x66>
 8001624:	4681      	mov	r9, r0
		printf("NACK: Invalid cmd syntax '%s'\n", cmdString);
		return 1;
	}

	/* Create string from cmd input, needed for string functions*/
	char *eolLoc = strstr(cmdString, eolSeq);
 8001626:	4945      	ldr	r1, [pc, #276]	; (800173c <CLI_RunCmd+0x138>)
 8001628:	4638      	mov	r0, r7
 800162a:	f005 fc57 	bl	8006edc <strstr>
	if (eolLoc != NULL) {
 800162e:	b330      	cbz	r0, 800167e <CLI_RunCmd+0x7a>
		*eolLoc = '\0'; //make string from input buffer
 8001630:	2200      	movs	r2, #0
 8001632:	7002      	strb	r2, [r0, #0]
	char *endP1 = NULL;
	char *param2 = NULL;
	uint8_t paramCnt = 0;

	//count parameters, convert to string and save location
	param1 = strchr(cmdName, ' '); //If there is a space, a cmd follows after this space
 8001634:	2120      	movs	r1, #32
 8001636:	4638      	mov	r0, r7
 8001638:	f005 fc43 	bl	8006ec2 <strchr>
	if (param1 != NULL) {
 800163c:	4680      	mov	r8, r0
 800163e:	b1d8      	cbz	r0, 8001678 <CLI_RunCmd+0x74>
		paramCnt = 1;
		*param1 = '\0'; //replace space with end of string, end of the cmdName String
 8001640:	4682      	mov	sl, r0
 8001642:	2300      	movs	r3, #0
 8001644:	f80a 3b01 	strb.w	r3, [sl], #1
		param1++;       //location of the first char of param1

		//If param1, first char of par1 == '"', the parameter has spaces in it, the string ends at next '"'
		if (*param1 == '"') {
 8001648:	7843      	ldrb	r3, [r0, #1]
 800164a:	2b22      	cmp	r3, #34	; 0x22
 800164c:	d01d      	beq.n	800168a <CLI_RunCmd+0x86>
			} else {
				//Error no end " found.
			}
		}
		if (param2 == NULL)
			param2 = strchr(param1, ' ');
 800164e:	2120      	movs	r1, #32
 8001650:	4650      	mov	r0, sl
 8001652:	f005 fc36 	bl	8006ec2 <strchr>
 8001656:	4680      	mov	r8, r0

		if (param2 != NULL) {
 8001658:	f1b8 0f00 	cmp.w	r8, #0
 800165c:	d026      	beq.n	80016ac <CLI_RunCmd+0xa8>
			paramCnt = 2;
			*param2 = '\0'; //replace space with end of string, end of the cmdName
 800165e:	2300      	movs	r3, #0
 8001660:	f808 3b01 	strb.w	r3, [r8], #1
			paramCnt = 2;
 8001664:	2502      	movs	r5, #2
			param2++;       //location of the first char of param2
		}
	}

	//loop trough cmdList first check paramCnt
	for (uint8_t i = 0; i < cmdCnt; i++) {
 8001666:	464c      	mov	r4, r9
 8001668:	e03d      	b.n	80016e6 <CLI_RunCmd+0xe2>
		printf("NACK: Invalid cmd syntax '%s'\n", cmdString);
 800166a:	4639      	mov	r1, r7
 800166c:	4834      	ldr	r0, [pc, #208]	; (8001740 <CLI_RunCmd+0x13c>)
 800166e:	f005 fb0b 	bl	8006c88 <iprintf>
		return 1;
 8001672:	f04f 0901 	mov.w	r9, #1
 8001676:	e05c      	b.n	8001732 <CLI_RunCmd+0x12e>
	uint8_t paramCnt = 0;
 8001678:	464d      	mov	r5, r9
	param1 = strchr(cmdName, ' '); //If there is a space, a cmd follows after this space
 800167a:	4682      	mov	sl, r0
 800167c:	e7f3      	b.n	8001666 <CLI_RunCmd+0x62>
		printf("NACK: Invalid cmd syntax EOL not detected\n");
 800167e:	4831      	ldr	r0, [pc, #196]	; (8001744 <CLI_RunCmd+0x140>)
 8001680:	f005 fb88 	bl	8006d94 <puts>
		return 2;
 8001684:	f04f 0902 	mov.w	r9, #2
 8001688:	e053      	b.n	8001732 <CLI_RunCmd+0x12e>
			param1++;
 800168a:	f100 0a02 	add.w	sl, r0, #2
			endP1 = strchr(param1, '"'); //Find the end of param1 string
 800168e:	2122      	movs	r1, #34	; 0x22
 8001690:	4650      	mov	r0, sl
 8001692:	f005 fc16 	bl	8006ec2 <strchr>
			if (endP1 != NULL) {
 8001696:	2800      	cmp	r0, #0
 8001698:	d0d9      	beq.n	800164e <CLI_RunCmd+0x4a>
				*endP1 = '\0'; //replace the " with \0 Marking the end of the param1 string
 800169a:	2300      	movs	r3, #0
 800169c:	7003      	strb	r3, [r0, #0]
				if (*(endP1 + 1) == ' ') {
 800169e:	7843      	ldrb	r3, [r0, #1]
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d1d4      	bne.n	800164e <CLI_RunCmd+0x4a>
		if (param2 == NULL)
 80016a4:	f110 0801 	adds.w	r8, r0, #1
 80016a8:	d1d6      	bne.n	8001658 <CLI_RunCmd+0x54>
 80016aa:	e7d0      	b.n	800164e <CLI_RunCmd+0x4a>
		paramCnt = 1;
 80016ac:	2501      	movs	r5, #1
 80016ae:	e7da      	b.n	8001666 <CLI_RunCmd+0x62>
				//run callback
				if (paramCnt == 0)
					errorCode =
							((uint8_t (*)(char *response)) cmdList[i].callback)(
									response);
				else if (paramCnt == 1)
 80016b0:	2d01      	cmp	r5, #1
 80016b2:	d003      	beq.n	80016bc <CLI_RunCmd+0xb8>
					errorCode =
							((uint8_t (*)(char *response, char *p1)) cmdList[i].callback)(
									response, param1);
				else if (paramCnt == 2)
 80016b4:	2d02      	cmp	r5, #2
 80016b6:	d00a      	beq.n	80016ce <CLI_RunCmd+0xca>
				uint8_t errorCode = 0; //callback return error code
 80016b8:	4649      	mov	r1, r9
 80016ba:	e02f      	b.n	800171c <CLI_RunCmd+0x118>
							((uint8_t (*)(char *response, char *p1)) cmdList[i].callback)(
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <CLI_RunCmd+0x144>)
 80016be:	eb03 1604 	add.w	r6, r3, r4, lsl #4
 80016c2:	68f3      	ldr	r3, [r6, #12]
 80016c4:	4651      	mov	r1, sl
 80016c6:	4668      	mov	r0, sp
 80016c8:	4798      	blx	r3
 80016ca:	4601      	mov	r1, r0
 80016cc:	e026      	b.n	800171c <CLI_RunCmd+0x118>
					errorCode = ((uint8_t (*)(char *response, char *p1,
							char *p2)) cmdList[i].callback)(response, param1,
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <CLI_RunCmd+0x144>)
 80016d0:	eb03 1604 	add.w	r6, r3, r4, lsl #4
 80016d4:	68f3      	ldr	r3, [r6, #12]
					errorCode = ((uint8_t (*)(char *response, char *p1,
 80016d6:	4642      	mov	r2, r8
 80016d8:	4651      	mov	r1, sl
 80016da:	4668      	mov	r0, sp
 80016dc:	4798      	blx	r3
 80016de:	4601      	mov	r1, r0
 80016e0:	e01c      	b.n	800171c <CLI_RunCmd+0x118>
	for (uint8_t i = 0; i < cmdCnt; i++) {
 80016e2:	3401      	adds	r4, #1
 80016e4:	b2e4      	uxtb	r4, r4
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <CLI_RunCmd+0x148>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	42a3      	cmp	r3, r4
 80016ec:	d91b      	bls.n	8001726 <CLI_RunCmd+0x122>
		if (cmdList[i].paramCnt == paramCnt) {
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <CLI_RunCmd+0x144>)
 80016f0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80016f4:	7a1b      	ldrb	r3, [r3, #8]
 80016f6:	42ab      	cmp	r3, r5
 80016f8:	d1f3      	bne.n	80016e2 <CLI_RunCmd+0xde>
			if (strcmp(cmdList[i].name, cmdName) == 0) {
 80016fa:	0123      	lsls	r3, r4, #4
 80016fc:	4639      	mov	r1, r7
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <CLI_RunCmd+0x144>)
 8001700:	58d0      	ldr	r0, [r2, r3]
 8001702:	f7fe fd25 	bl	8000150 <strcmp>
 8001706:	2800      	cmp	r0, #0
 8001708:	d1eb      	bne.n	80016e2 <CLI_RunCmd+0xde>
				if (paramCnt == 0)
 800170a:	2d00      	cmp	r5, #0
 800170c:	d1d0      	bne.n	80016b0 <CLI_RunCmd+0xac>
							((uint8_t (*)(char *response)) cmdList[i].callback)(
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <CLI_RunCmd+0x144>)
 8001710:	eb03 1604 	add.w	r6, r3, r4, lsl #4
 8001714:	68f3      	ldr	r3, [r6, #12]
 8001716:	4668      	mov	r0, sp
 8001718:	4798      	blx	r3
 800171a:	4601      	mov	r1, r0
							param2);

				printf("ACK|ERR=%i|RESP=\"%s\"\n", errorCode, response);
 800171c:	466a      	mov	r2, sp
 800171e:	480c      	ldr	r0, [pc, #48]	; (8001750 <CLI_RunCmd+0x14c>)
 8001720:	f005 fab2 	bl	8006c88 <iprintf>
				return 0; //break the loop, return function
 8001724:	e005      	b.n	8001732 <CLI_RunCmd+0x12e>
			}
		}
	}
	//cmd not found
	printf("NACK| cmd '%s' unkown\n", cmdString);
 8001726:	4639      	mov	r1, r7
 8001728:	480a      	ldr	r0, [pc, #40]	; (8001754 <CLI_RunCmd+0x150>)
 800172a:	f005 faad 	bl	8006c88 <iprintf>
	return 2;
 800172e:	f04f 0902 	mov.w	r9, #2
}
 8001732:	4648      	mov	r0, r9
 8001734:	b032      	add	sp, #200	; 0xc8
 8001736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000
 8001740:	08009dac 	.word	0x08009dac
 8001744:	08009dcc 	.word	0x08009dcc
 8001748:	20000300 	.word	0x20000300
 800174c:	2000024c 	.word	0x2000024c
 8001750:	08009df8 	.word	0x08009df8
 8001754:	08009e10 	.word	0x08009e10

08001758 <CLI_Help>:
 * @brief Displays all commands and their description
 * 
 * @return uint8_t 
 */
uint8_t CLI_Help()
{
 8001758:	b530      	push	{r4, r5, lr}
 800175a:	b089      	sub	sp, #36	; 0x24
    char funcName[30] = "";
 800175c:	2400      	movs	r4, #0
 800175e:	9400      	str	r4, [sp, #0]
 8001760:	9401      	str	r4, [sp, #4]
 8001762:	9402      	str	r4, [sp, #8]
 8001764:	9403      	str	r4, [sp, #12]
 8001766:	9404      	str	r4, [sp, #16]
 8001768:	9405      	str	r4, [sp, #20]
 800176a:	9406      	str	r4, [sp, #24]
 800176c:	f8ad 401c 	strh.w	r4, [sp, #28]

    /* Print Header*/
    printf("|----------------------|-------------------------------------------------------------------------------------------------------------------------------|\n");
 8001770:	4d23      	ldr	r5, [pc, #140]	; (8001800 <CLI_Help+0xa8>)
 8001772:	4628      	mov	r0, r5
 8001774:	f005 fb0e 	bl	8006d94 <puts>
    printf("| Command              | Description                                                                                                                   |\n");
 8001778:	4822      	ldr	r0, [pc, #136]	; (8001804 <CLI_Help+0xac>)
 800177a:	f005 fb0b 	bl	8006d94 <puts>
    printf("|----------------------|-------------------------------------------------------------------------------------------------------------------------------|\n");
 800177e:	4628      	mov	r0, r5
 8001780:	f005 fb08 	bl	8006d94 <puts>
    /* Print command and there description*/
    for (uint8_t i = 0; i < cmdCnt; i++)
 8001784:	e00e      	b.n	80017a4 <CLI_Help+0x4c>
    {
        if (cmdList[i].paramCnt == 0)
            printf("| %-20s ", cmdList[i].name);
 8001786:	0123      	lsls	r3, r4, #4
 8001788:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <CLI_Help+0xb0>)
 800178a:	58d1      	ldr	r1, [r2, r3]
 800178c:	481f      	ldr	r0, [pc, #124]	; (800180c <CLI_Help+0xb4>)
 800178e:	f005 fa7b 	bl	8006c88 <iprintf>
        else if (cmdList[i].paramCnt == 2)
        {
            sprintf(funcName, "| %s $p1 $p2", cmdList[i].name);
            printf("%-20s   ", funcName);
        }
        printf("| %-125s |\n", cmdList[i].cmdDesc);
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <CLI_Help+0xb0>)
 8001794:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8001798:	6859      	ldr	r1, [r3, #4]
 800179a:	481d      	ldr	r0, [pc, #116]	; (8001810 <CLI_Help+0xb8>)
 800179c:	f005 fa74 	bl	8006c88 <iprintf>
    for (uint8_t i = 0; i < cmdCnt; i++)
 80017a0:	3401      	adds	r4, #1
 80017a2:	b2e4      	uxtb	r4, r4
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <CLI_Help+0xbc>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	42a3      	cmp	r3, r4
 80017aa:	d922      	bls.n	80017f2 <CLI_Help+0x9a>
        if (cmdList[i].paramCnt == 0)
 80017ac:	4625      	mov	r5, r4
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <CLI_Help+0xb0>)
 80017b0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80017b4:	7a1b      	ldrb	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0e5      	beq.n	8001786 <CLI_Help+0x2e>
        else if (cmdList[i].paramCnt == 1)
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d00d      	beq.n	80017da <CLI_Help+0x82>
        else if (cmdList[i].paramCnt == 2)
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d1e7      	bne.n	8001792 <CLI_Help+0x3a>
            sprintf(funcName, "| %s $p1 $p2", cmdList[i].name);
 80017c2:	0123      	lsls	r3, r4, #4
 80017c4:	4a10      	ldr	r2, [pc, #64]	; (8001808 <CLI_Help+0xb0>)
 80017c6:	58d2      	ldr	r2, [r2, r3]
 80017c8:	4913      	ldr	r1, [pc, #76]	; (8001818 <CLI_Help+0xc0>)
 80017ca:	4668      	mov	r0, sp
 80017cc:	f005 faea 	bl	8006da4 <siprintf>
            printf("%-20s   ", funcName);
 80017d0:	4669      	mov	r1, sp
 80017d2:	4812      	ldr	r0, [pc, #72]	; (800181c <CLI_Help+0xc4>)
 80017d4:	f005 fa58 	bl	8006c88 <iprintf>
 80017d8:	e7db      	b.n	8001792 <CLI_Help+0x3a>
            sprintf(funcName, "| %s $p1", cmdList[i].name);
 80017da:	0123      	lsls	r3, r4, #4
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <CLI_Help+0xb0>)
 80017de:	58d2      	ldr	r2, [r2, r3]
 80017e0:	490f      	ldr	r1, [pc, #60]	; (8001820 <CLI_Help+0xc8>)
 80017e2:	4668      	mov	r0, sp
 80017e4:	f005 fade 	bl	8006da4 <siprintf>
            printf("%-20s   ", funcName);
 80017e8:	4669      	mov	r1, sp
 80017ea:	480c      	ldr	r0, [pc, #48]	; (800181c <CLI_Help+0xc4>)
 80017ec:	f005 fa4c 	bl	8006c88 <iprintf>
 80017f0:	e7cf      	b.n	8001792 <CLI_Help+0x3a>
    }
    /* Print footer */
    printf("|----------------------|-------------------------------------------------------------------------------------------------------------------------------|\n");
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <CLI_Help+0xa8>)
 80017f4:	f005 face 	bl	8006d94 <puts>

    return 0;
}
 80017f8:	2000      	movs	r0, #0
 80017fa:	b009      	add	sp, #36	; 0x24
 80017fc:	bd30      	pop	{r4, r5, pc}
 80017fe:	bf00      	nop
 8001800:	08009e28 	.word	0x08009e28
 8001804:	08009ec4 	.word	0x08009ec4
 8001808:	20000300 	.word	0x20000300
 800180c:	08009f60 	.word	0x08009f60
 8001810:	08009f94 	.word	0x08009f94
 8001814:	2000024c 	.word	0x2000024c
 8001818:	08009f84 	.word	0x08009f84
 800181c:	08009f78 	.word	0x08009f78
 8001820:	08009f6c 	.word	0x08009f6c

08001824 <nextionWakeup>:
	return 0;
}


uint8_t nextionWakeup( )
{
 8001824:	b508      	push	{r3, lr}
	return nextion_uart_transmit((uint8_t *)"sleep=0\xFF\xFF\xFF");
 8001826:	4802      	ldr	r0, [pc, #8]	; (8001830 <nextionWakeup+0xc>)
 8001828:	f000 fe2c 	bl	8002484 <nextion_uart_transmit>
}
 800182c:	bd08      	pop	{r3, pc}
 800182e:	bf00      	nop
 8001830:	08009fa0 	.word	0x08009fa0

08001834 <cmd_getMainsFreq>:
uint8_t cmd_getMainsPeriod(char *resp) {
	sprintf(resp, "%i (Timer cnt)", (int) mainsPeriod);
	return 0;
}

uint8_t cmd_getMainsFreq(char *resp) {
 8001834:	b510      	push	{r4, lr}
 8001836:	4604      	mov	r4, r0
	sprintf(resp, "%.0f Hz", round((double) (mainsPeriod + 1.0) / 20.0)); // +1 because timer start at zero
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <cmd_getMainsFreq+0x30>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	f7fe fddc 	bl	80003f8 <__aeabi_ui2d>
 8001840:	2200      	movs	r2, #0
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <cmd_getMainsFreq+0x34>)
 8001844:	f7fe fc9c 	bl	8000180 <__adddf3>
 8001848:	2200      	movs	r2, #0
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <cmd_getMainsFreq+0x38>)
 800184c:	f7fe ff78 	bl	8000740 <__aeabi_ddiv>
 8001850:	f008 f9d0 	bl	8009bf4 <round>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <cmd_getMainsFreq+0x3c>)
 800185a:	4620      	mov	r0, r4
 800185c:	f005 faa2 	bl	8006da4 <siprintf>
	return 0;
}
 8001860:	2000      	movs	r0, #0
 8001862:	bd10      	pop	{r4, pc}
 8001864:	20000264 	.word	0x20000264
 8001868:	3ff00000 	.word	0x3ff00000
 800186c:	40340000 	.word	0x40340000
 8001870:	08009fac 	.word	0x08009fac

08001874 <cmd_MAX31865_temp>:
uint8_t cmd_MAX31865_temp(uint8_t *resp) {
 8001874:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(MUX1_EN_GPIO_Port, MUX1_EN_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <cmd_MAX31865_temp+0x50>)
 800187e:	f002 f8ba 	bl	80039f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX2_EN_GPIO_Port, MUX2_EN_Pin, GPIO_PIN_RESET);
 8001882:	4c11      	ldr	r4, [pc, #68]	; (80018c8 <cmd_MAX31865_temp+0x54>)
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800188a:	4620      	mov	r0, r4
 800188c:	f002 f8b3 	bl	80039f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX1_IN1_GPIO_Port, MUX1_IN1_Pin, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001896:	4620      	mov	r0, r4
 8001898:	f002 f8ad 	bl	80039f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX2_IN1_GPIO_Port, MUX2_IN1_Pin, GPIO_PIN_SET);
 800189c:	4d0b      	ldr	r5, [pc, #44]	; (80018cc <cmd_MAX31865_temp+0x58>)
 800189e:	2201      	movs	r2, #1
 80018a0:	4611      	mov	r1, r2
 80018a2:	4628      	mov	r0, r5
 80018a4:	f002 f8a7 	bl	80039f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX1_IN2_GPIO_Port, MUX1_IN2_Pin, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ae:	4620      	mov	r0, r4
 80018b0:	f002 f8a1 	bl	80039f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX2_IN2_GPIO_Port, MUX2_IN2_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	2102      	movs	r1, #2
 80018b8:	4628      	mov	r0, r5
 80018ba:	f002 f89c 	bl	80039f6 <HAL_GPIO_WritePin>
}
 80018be:	2000      	movs	r0, #0
 80018c0:	bd38      	pop	{r3, r4, r5, pc}
 80018c2:	bf00      	nop
 80018c4:	40010c00 	.word	0x40010c00
 80018c8:	40011000 	.word	0x40011000
 80018cc:	40011400 	.word	0x40011400

080018d0 <MX_GPIO_Init>:
{
 80018d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	2400      	movs	r4, #0
 80018d8:	9404      	str	r4, [sp, #16]
 80018da:	9405      	str	r4, [sp, #20]
 80018dc:	9406      	str	r4, [sp, #24]
 80018de:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e0:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <MX_GPIO_Init+0x128>)
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	f042 0210 	orr.w	r2, r2, #16
 80018e8:	619a      	str	r2, [r3, #24]
 80018ea:	699a      	ldr	r2, [r3, #24]
 80018ec:	f002 0210 	and.w	r2, r2, #16
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	f042 0220 	orr.w	r2, r2, #32
 80018fa:	619a      	str	r2, [r3, #24]
 80018fc:	699a      	ldr	r2, [r3, #24]
 80018fe:	f002 0220 	and.w	r2, r2, #32
 8001902:	9201      	str	r2, [sp, #4]
 8001904:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	f042 0204 	orr.w	r2, r2, #4
 800190c:	619a      	str	r2, [r3, #24]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	f002 0204 	and.w	r2, r2, #4
 8001914:	9202      	str	r2, [sp, #8]
 8001916:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	f042 0208 	orr.w	r2, r2, #8
 800191e:	619a      	str	r2, [r3, #24]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	9303      	str	r3, [sp, #12]
 8001928:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, MUX1_IN1_Pin|MUX1_IN2_Pin|MUX2_EN_Pin, GPIO_PIN_RESET);
 800192a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001a04 <MX_GPIO_Init+0x134>
 800192e:	4622      	mov	r2, r4
 8001930:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001934:	4650      	mov	r0, sl
 8001936:	f002 f85e 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, MUX2_IN1_Pin|MUX2_IN2_Pin, GPIO_PIN_RESET);
 800193a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8001a08 <MX_GPIO_Init+0x138>
 800193e:	4622      	mov	r2, r4
 8001940:	2103      	movs	r1, #3
 8001942:	4648      	mov	r0, r9
 8001944:	f002 f857 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, J3_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8001948:	4e2c      	ldr	r6, [pc, #176]	; (80019fc <MX_GPIO_Init+0x12c>)
 800194a:	4622      	mov	r2, r4
 800194c:	2112      	movs	r1, #18
 800194e:	4630      	mov	r0, r6
 8001950:	f002 f851 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, J4_Pin|J5_Pin|MUX1_EN_Pin, GPIO_PIN_RESET);
 8001954:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8001a0c <MX_GPIO_Init+0x13c>
 8001958:	4622      	mov	r2, r4
 800195a:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800195e:	4640      	mov	r0, r8
 8001960:	f002 f849 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DBG_LED1_Pin|CS2_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800196a:	4630      	mov	r0, r6
 800196c:	f002 f843 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2140      	movs	r1, #64	; 0x40
 8001974:	4640      	mov	r0, r8
 8001976:	f002 f83e 	bl	80039f6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MUX1_IN1_Pin|MUX1_IN2_Pin|MUX2_EN_Pin;
 800197a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800197e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2701      	movs	r7, #1
 8001982:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2502      	movs	r5, #2
 8001988:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	a904      	add	r1, sp, #16
 800198c:	4650      	mov	r0, sl
 800198e:	f001 fe9d 	bl	80036cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MUX2_IN1_Pin|MUX2_IN2_Pin;
 8001992:	2303      	movs	r3, #3
 8001994:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199c:	a904      	add	r1, sp, #16
 800199e:	4648      	mov	r0, r9
 80019a0:	f001 fe94 	bl	80036cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = J3_Pin|RELAY_Pin|CS2_Pin;
 80019a4:	f248 0312 	movw	r3, #32786	; 0x8012
 80019a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	a904      	add	r1, sp, #16
 80019b2:	4630      	mov	r0, r6
 80019b4:	f001 fe8a 	bl	80036cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = J4_Pin|J5_Pin|CS1_Pin|MUX1_EN_Pin;
 80019b8:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 80019bc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	a904      	add	r1, sp, #16
 80019c6:	4640      	mov	r0, r8
 80019c8:	f001 fe80 	bl	80036cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DBG_LED1_Pin;
 80019cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019d2:	2311      	movs	r3, #17
 80019d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(DBG_LED1_GPIO_Port, &GPIO_InitStruct);
 80019da:	a904      	add	r1, sp, #16
 80019dc:	4630      	mov	r0, r6
 80019de:	f001 fe75 	bl	80036cc <HAL_GPIO_Init>
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <MX_GPIO_Init+0x130>)
 80019e4:	6853      	ldr	r3, [r2, #4]
 80019e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ee:	6053      	str	r3, [r2, #4]
}
 80019f0:	b008      	add	sp, #32
 80019f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800
 8001a00:	40010000 	.word	0x40010000
 8001a04:	40011000 	.word	0x40011000
 8001a08:	40011400 	.word	0x40011400
 8001a0c:	40010c00 	.word	0x40010c00

08001a10 <MX_SPI1_Init>:
{
 8001a10:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_SPI1_Init+0x38>)
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <MX_SPI1_Init+0x3c>)
 8001a16:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a18:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a1c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a22:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a24:	2202      	movs	r2, #2
 8001a26:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a32:	2230      	movs	r2, #48	; 0x30
 8001a34:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a36:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a38:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a40:	f002 fe0a 	bl	8004658 <HAL_SPI_Init>
}
 8001a44:	bd08      	pop	{r3, pc}
 8001a46:	bf00      	nop
 8001a48:	20000600 	.word	0x20000600
 8001a4c:	40013000 	.word	0x40013000

08001a50 <MX_TIM2_Init>:
{
 8001a50:	b530      	push	{r4, r5, lr}
 8001a52:	b093      	sub	sp, #76	; 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a54:	2400      	movs	r4, #0
 8001a56:	940e      	str	r4, [sp, #56]	; 0x38
 8001a58:	940f      	str	r4, [sp, #60]	; 0x3c
 8001a5a:	9410      	str	r4, [sp, #64]	; 0x40
 8001a5c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a5e:	9409      	str	r4, [sp, #36]	; 0x24
 8001a60:	940a      	str	r4, [sp, #40]	; 0x28
 8001a62:	940b      	str	r4, [sp, #44]	; 0x2c
 8001a64:	940c      	str	r4, [sp, #48]	; 0x30
 8001a66:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	9407      	str	r4, [sp, #28]
 8001a6a:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6c:	9400      	str	r4, [sp, #0]
 8001a6e:	9401      	str	r4, [sp, #4]
 8001a70:	9402      	str	r4, [sp, #8]
 8001a72:	9403      	str	r4, [sp, #12]
 8001a74:	9404      	str	r4, [sp, #16]
 8001a76:	9405      	str	r4, [sp, #20]
 8001a78:	9406      	str	r4, [sp, #24]
  htim2.Instance = TIM2;
 8001a7a:	4d23      	ldr	r5, [pc, #140]	; (8001b08 <MX_TIM2_Init+0xb8>)
 8001a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a80:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 6400;
 8001a82:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001a86:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 90;
 8001a8a:	235a      	movs	r3, #90	; 0x5a
 8001a8c:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a92:	4628      	mov	r0, r5
 8001a94:	f003 fb46 	bl	8005124 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a9e:	a90e      	add	r1, sp, #56	; 0x38
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f003 fd72 	bl	800558a <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	f003 fb68 	bl	800517c <HAL_TIM_OC_Init>
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001aac:	2108      	movs	r1, #8
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f003 fbe8 	bl	8005284 <HAL_TIM_OnePulse_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001ab4:	2306      	movs	r3, #6
 8001ab6:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001ab8:	2370      	movs	r3, #112	; 0x70
 8001aba:	930a      	str	r3, [sp, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001abc:	940b      	str	r4, [sp, #44]	; 0x2c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001abe:	940c      	str	r4, [sp, #48]	; 0x30
  sSlaveConfig.TriggerFilter = 0;
 8001ac0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ac2:	a909      	add	r1, sp, #36	; 0x24
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	f003 fe14 	bl	80056f2 <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001aca:	2310      	movs	r3, #16
 8001acc:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad2:	a907      	add	r1, sp, #28
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f004 f893 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ada:	9400      	str	r4, [sp, #0]
  sConfigOC.Pulse = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae0:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae2:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4669      	mov	r1, sp
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f003 fc2b 	bl	8005344 <HAL_TIM_OC_ConfigChannel>
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aee:	2208      	movs	r2, #8
 8001af0:	4669      	mov	r1, sp
 8001af2:	4628      	mov	r0, r5
 8001af4:	f003 fc26 	bl	8005344 <HAL_TIM_OC_ConfigChannel>
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001af8:	220c      	movs	r2, #12
 8001afa:	4669      	mov	r1, sp
 8001afc:	4628      	mov	r0, r5
 8001afe:	f003 fc21 	bl	8005344 <HAL_TIM_OC_ConfigChannel>
}
 8001b02:	b013      	add	sp, #76	; 0x4c
 8001b04:	bd30      	pop	{r4, r5, pc}
 8001b06:	bf00      	nop
 8001b08:	20000658 	.word	0x20000658

08001b0c <MX_TIM4_Init>:
{
 8001b0c:	b530      	push	{r4, r5, lr}
 8001b0e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b10:	2400      	movs	r4, #0
 8001b12:	940a      	str	r4, [sp, #40]	; 0x28
 8001b14:	940b      	str	r4, [sp, #44]	; 0x2c
 8001b16:	940c      	str	r4, [sp, #48]	; 0x30
 8001b18:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	9408      	str	r4, [sp, #32]
 8001b1c:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1e:	9401      	str	r4, [sp, #4]
 8001b20:	9402      	str	r4, [sp, #8]
 8001b22:	9403      	str	r4, [sp, #12]
 8001b24:	9404      	str	r4, [sp, #16]
 8001b26:	9405      	str	r4, [sp, #20]
 8001b28:	9406      	str	r4, [sp, #24]
 8001b2a:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 8001b2c:	4d17      	ldr	r5, [pc, #92]	; (8001b8c <MX_TIM4_Init+0x80>)
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_TIM4_Init+0x84>)
 8001b30:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 640;
 8001b32:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b36:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 50;
 8001b3a:	2332      	movs	r3, #50	; 0x32
 8001b3c:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b42:	4628      	mov	r0, r5
 8001b44:	f003 faee 	bl	8005124 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b4e:	a90a      	add	r1, sp, #40	; 0x28
 8001b50:	4628      	mov	r0, r5
 8001b52:	f003 fd1a 	bl	800558a <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b56:	4628      	mov	r0, r5
 8001b58:	f003 fb3c 	bl	80051d4 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5c:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b60:	a908      	add	r1, sp, #32
 8001b62:	4628      	mov	r0, r5
 8001b64:	f004 f84c 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b68:	2360      	movs	r3, #96	; 0x60
 8001b6a:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 8001b6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b70:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b72:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b74:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b76:	2204      	movs	r2, #4
 8001b78:	eb0d 0102 	add.w	r1, sp, r2
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f003 fc0a 	bl	8005396 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8001b82:	4628      	mov	r0, r5
 8001b84:	f001 faa8 	bl	80030d8 <HAL_TIM_MspPostInit>
}
 8001b88:	b00f      	add	sp, #60	; 0x3c
 8001b8a:	bd30      	pop	{r4, r5, pc}
 8001b8c:	20000494 	.word	0x20000494
 8001b90:	40000800 	.word	0x40000800

08001b94 <MX_USART1_UART_Init>:
{
 8001b94:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001b96:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <MX_USART1_UART_Init+0x24>)
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_USART1_UART_Init+0x28>)
 8001b9a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001b9c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ba0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001baa:	220c      	movs	r2, #12
 8001bac:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb2:	f004 f949 	bl	8005e48 <HAL_UART_Init>
}
 8001bb6:	bd08      	pop	{r3, pc}
 8001bb8:	2000054c 	.word	0x2000054c
 8001bbc:	40013800 	.word	0x40013800

08001bc0 <MX_USART2_UART_Init>:
{
 8001bc0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001bc2:	4808      	ldr	r0, [pc, #32]	; (8001be4 <MX_USART2_UART_Init+0x24>)
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_USART2_UART_Init+0x28>)
 8001bc6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001bc8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001bcc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bda:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bde:	f004 f933 	bl	8005e48 <HAL_UART_Init>
}
 8001be2:	bd08      	pop	{r3, pc}
 8001be4:	200006a0 	.word	0x200006a0
 8001be8:	40004400 	.word	0x40004400

08001bec <MX_TIM3_Init>:
{
 8001bec:	b530      	push	{r4, r5, lr}
 8001bee:	b091      	sub	sp, #68	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf0:	2400      	movs	r4, #0
 8001bf2:	940c      	str	r4, [sp, #48]	; 0x30
 8001bf4:	940d      	str	r4, [sp, #52]	; 0x34
 8001bf6:	940e      	str	r4, [sp, #56]	; 0x38
 8001bf8:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bfa:	9407      	str	r4, [sp, #28]
 8001bfc:	9408      	str	r4, [sp, #32]
 8001bfe:	9409      	str	r4, [sp, #36]	; 0x24
 8001c00:	940a      	str	r4, [sp, #40]	; 0x28
 8001c02:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	9405      	str	r4, [sp, #20]
 8001c06:	9406      	str	r4, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c08:	9401      	str	r4, [sp, #4]
 8001c0a:	9402      	str	r4, [sp, #8]
 8001c0c:	9403      	str	r4, [sp, #12]
 8001c0e:	9404      	str	r4, [sp, #16]
  htim3.Instance = TIM3;
 8001c10:	4d19      	ldr	r5, [pc, #100]	; (8001c78 <MX_TIM3_Init+0x8c>)
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_TIM3_Init+0x90>)
 8001c14:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 640;
 8001c16:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c1a:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 8001c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c22:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f003 fa7a 	bl	8005124 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c34:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c36:	a90c      	add	r1, sp, #48	; 0x30
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f003 fca6 	bl	800558a <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f003 faf4 	bl	800522c <HAL_TIM_IC_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c44:	9407      	str	r4, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001c46:	2310      	movs	r3, #16
 8001c48:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c4a:	a907      	add	r1, sp, #28
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f003 fd50 	bl	80056f2 <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c56:	a905      	add	r1, sp, #20
 8001c58:	4628      	mov	r0, r5
 8001c5a:	f003 ffd1 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c5e:	9401      	str	r4, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 8001c60:	2303      	movs	r3, #3
 8001c62:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c64:	9403      	str	r4, [sp, #12]
  sConfigIC.ICFilter = 0;
 8001c66:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c68:	4622      	mov	r2, r4
 8001c6a:	a901      	add	r1, sp, #4
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	f003 fc27 	bl	80054c0 <HAL_TIM_IC_ConfigChannel>
}
 8001c72:	b011      	add	sp, #68	; 0x44
 8001c74:	bd30      	pop	{r4, r5, pc}
 8001c76:	bf00      	nop
 8001c78:	20000504 	.word	0x20000504
 8001c7c:	40000400 	.word	0x40000400

08001c80 <MX_TIM1_Init>:
{
 8001c80:	b530      	push	{r4, r5, lr}
 8001c82:	b097      	sub	sp, #92	; 0x5c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c84:	2400      	movs	r4, #0
 8001c86:	9411      	str	r4, [sp, #68]	; 0x44
 8001c88:	9412      	str	r4, [sp, #72]	; 0x48
 8001c8a:	9413      	str	r4, [sp, #76]	; 0x4c
 8001c8c:	9414      	str	r4, [sp, #80]	; 0x50
 8001c8e:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	940f      	str	r4, [sp, #60]	; 0x3c
 8001c92:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c94:	9408      	str	r4, [sp, #32]
 8001c96:	9409      	str	r4, [sp, #36]	; 0x24
 8001c98:	940a      	str	r4, [sp, #40]	; 0x28
 8001c9a:	940b      	str	r4, [sp, #44]	; 0x2c
 8001c9c:	940c      	str	r4, [sp, #48]	; 0x30
 8001c9e:	940d      	str	r4, [sp, #52]	; 0x34
 8001ca0:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	4668      	mov	r0, sp
 8001ca8:	f004 fb86 	bl	80063b8 <memset>
  htim1.Instance = TIM1;
 8001cac:	4d21      	ldr	r5, [pc, #132]	; (8001d34 <MX_TIM1_Init+0xb4>)
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <MX_TIM1_Init+0xb8>)
 8001cb0:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8001cb2:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 199;
 8001cb6:	23c7      	movs	r3, #199	; 0xc7
 8001cb8:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cbc:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	f003 fa2e 	bl	8005124 <HAL_TIM_Base_Init>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001cc8:	4628      	mov	r0, r5
 8001cca:	f003 fa57 	bl	800517c <HAL_TIM_OC_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	9311      	str	r3, [sp, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001cd2:	2310      	movs	r3, #16
 8001cd4:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001cd6:	a911      	add	r1, sp, #68	; 0x44
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f003 fd0a 	bl	80056f2 <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	940f      	str	r4, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ce2:	a90f      	add	r1, sp, #60	; 0x3c
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f003 ff8b 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cea:	9408      	str	r4, [sp, #32]
  sConfigOC.Pulse = 0;
 8001cec:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cee:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf0:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf2:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf4:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf6:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	a908      	add	r1, sp, #32
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f003 fb21 	bl	8005344 <HAL_TIM_OC_ConfigChannel>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d02:	2208      	movs	r2, #8
 8001d04:	a908      	add	r1, sp, #32
 8001d06:	4628      	mov	r0, r5
 8001d08:	f003 fb1c 	bl	8005344 <HAL_TIM_OC_ConfigChannel>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	a908      	add	r1, sp, #32
 8001d10:	4628      	mov	r0, r5
 8001d12:	f003 fb17 	bl	8005344 <HAL_TIM_OC_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d16:	9400      	str	r4, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d18:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d1a:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d1c:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d1e:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d24:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d26:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d28:	4669      	mov	r1, sp
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f003 ff9c 	bl	8005c68 <HAL_TIMEx_ConfigBreakDeadTime>
}
 8001d30:	b017      	add	sp, #92	; 0x5c
 8001d32:	bd30      	pop	{r4, r5, pc}
 8001d34:	200005b4 	.word	0x200005b4
 8001d38:	40012c00 	.word	0x40012c00

08001d3c <MX_RTC_Init>:
{
 8001d3c:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_RTC_Init+0x1c>)
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_RTC_Init+0x20>)
 8001d42:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4e:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d50:	f002 fb60 	bl	8004414 <HAL_RTC_Init>
}
 8001d54:	bd08      	pop	{r3, pc}
 8001d56:	bf00      	nop
 8001d58:	200005a0 	.word	0x200005a0
 8001d5c:	40002800 	.word	0x40002800

08001d60 <setPage>:
uint8_t setPage(uint8_t *resp, uint8_t *page) {
 8001d60:	b510      	push	{r4, lr}
 8001d62:	b08e      	sub	sp, #56	; 0x38
 8001d64:	460c      	mov	r4, r1
	uint8_t buffer[50] = { ' ' };
 8001d66:	2320      	movs	r3, #32
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	222e      	movs	r2, #46	; 0x2e
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	a802      	add	r0, sp, #8
 8001d70:	f004 fb22 	bl	80063b8 <memset>
	sprintf((char*) buffer, "dp=%s\xFF\xFF\xFF", page);
 8001d74:	4622      	mov	r2, r4
 8001d76:	4906      	ldr	r1, [pc, #24]	; (8001d90 <setPage+0x30>)
 8001d78:	a801      	add	r0, sp, #4
 8001d7a:	f005 f813 	bl	8006da4 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, 7, 100);
 8001d7e:	2364      	movs	r3, #100	; 0x64
 8001d80:	2207      	movs	r2, #7
 8001d82:	a901      	add	r1, sp, #4
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <setPage+0x34>)
 8001d86:	f004 f88e 	bl	8005ea6 <HAL_UART_Transmit>
}
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	b00e      	add	sp, #56	; 0x38
 8001d8e:	bd10      	pop	{r4, pc}
 8001d90:	08009fb4 	.word	0x08009fb4
 8001d94:	200006a0 	.word	0x200006a0

08001d98 <cmd_MAX31865_RegisterWrite>:
		uint8_t *regVal) {
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	4608      	mov	r0, r1
 8001da0:	4615      	mov	r5, r2
	sscanf((const char*) regAdd, "%x", &registerAddress);
 8001da2:	4e1a      	ldr	r6, [pc, #104]	; (8001e0c <cmd_MAX31865_RegisterWrite+0x74>)
 8001da4:	aa03      	add	r2, sp, #12
 8001da6:	4631      	mov	r1, r6
 8001da8:	f005 f81c 	bl	8006de4 <siscanf>
	sscanf((const char*) regVal, "%x", &registerValue);
 8001dac:	aa02      	add	r2, sp, #8
 8001dae:	4631      	mov	r1, r6
 8001db0:	4628      	mov	r0, r5
 8001db2:	f005 f817 	bl	8006de4 <siscanf>
	sprintf((char*) resp, "Register Address: 0x%02X \t Register Value: 0x%02X",
 8001db6:	9b02      	ldr	r3, [sp, #8]
 8001db8:	9a03      	ldr	r2, [sp, #12]
 8001dba:	4915      	ldr	r1, [pc, #84]	; (8001e10 <cmd_MAX31865_RegisterWrite+0x78>)
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f004 fff1 	bl	8006da4 <siprintf>
	uint8_t spiBuff[2] = { (uint8_t) registerAddress, (uint8_t) registerValue };
 8001dc2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001dc6:	f88d 3004 	strb.w	r3, [sp, #4]
 8001dca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001dce:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	480f      	ldr	r0, [pc, #60]	; (8001e14 <cmd_MAX31865_RegisterWrite+0x7c>)
 8001dd8:	f001 fe0d 	bl	80039f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <cmd_MAX31865_RegisterWrite+0x80>)
 8001de4:	f001 fe07 	bl	80039f6 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi1, spiBuff, 2, 100) != HAL_OK)
 8001de8:	2364      	movs	r3, #100	; 0x64
 8001dea:	2202      	movs	r2, #2
 8001dec:	a901      	add	r1, sp, #4
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <cmd_MAX31865_RegisterWrite+0x84>)
 8001df0:	f002 fc8d 	bl	800470e <HAL_SPI_Transmit>
 8001df4:	b118      	cbz	r0, 8001dfe <cmd_MAX31865_RegisterWrite+0x66>
		return 1;
 8001df6:	2401      	movs	r4, #1
}
 8001df8:	4620      	mov	r0, r4
 8001dfa:	b004      	add	sp, #16
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
 8001dfe:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	2140      	movs	r1, #64	; 0x40
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <cmd_MAX31865_RegisterWrite+0x7c>)
 8001e06:	f001 fdf6 	bl	80039f6 <HAL_GPIO_WritePin>
	return 0;
 8001e0a:	e7f5      	b.n	8001df8 <cmd_MAX31865_RegisterWrite+0x60>
 8001e0c:	08009fc0 	.word	0x08009fc0
 8001e10:	08009fc4 	.word	0x08009fc4
 8001e14:	40010c00 	.word	0x40010c00
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	20000600 	.word	0x20000600

08001e20 <cmd_MAX31865_RegisterRead>:
uint8_t cmd_MAX31865_RegisterRead(uint8_t *resp, uint8_t *regAdd) {
 8001e20:	b530      	push	{r4, r5, lr}
 8001e22:	b085      	sub	sp, #20
 8001e24:	4604      	mov	r4, r0
 8001e26:	4608      	mov	r0, r1
	sscanf((const char*) regAdd, "%x", &registerAddress);
 8001e28:	aa03      	add	r2, sp, #12
 8001e2a:	491b      	ldr	r1, [pc, #108]	; (8001e98 <cmd_MAX31865_RegisterRead+0x78>)
 8001e2c:	f004 ffda 	bl	8006de4 <siscanf>
	uint8_t RxData[1] = { 0 };
 8001e30:	2200      	movs	r2, #0
 8001e32:	f88d 2008 	strb.w	r2, [sp, #8]
	uint8_t TxData[1] = { (uint8_t) registerAddress };
 8001e36:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001e3a:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8001e3e:	2140      	movs	r1, #64	; 0x40
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <cmd_MAX31865_RegisterRead+0x7c>)
 8001e42:	f001 fdd8 	bl	80039f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4c:	4814      	ldr	r0, [pc, #80]	; (8001ea0 <cmd_MAX31865_RegisterRead+0x80>)
 8001e4e:	f001 fdd2 	bl	80039f6 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi1, TxData, 1, 100) != HAL_OK)
 8001e52:	2364      	movs	r3, #100	; 0x64
 8001e54:	2201      	movs	r2, #1
 8001e56:	a901      	add	r1, sp, #4
 8001e58:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <cmd_MAX31865_RegisterRead+0x84>)
 8001e5a:	f002 fc58 	bl	800470e <HAL_SPI_Transmit>
 8001e5e:	b118      	cbz	r0, 8001e68 <cmd_MAX31865_RegisterRead+0x48>
		return 1;
 8001e60:	2501      	movs	r5, #1
}
 8001e62:	4628      	mov	r0, r5
 8001e64:	b005      	add	sp, #20
 8001e66:	bd30      	pop	{r4, r5, pc}
	if (HAL_SPI_Receive(&hspi1, RxData, 1, 100) != HAL_OK)
 8001e68:	2364      	movs	r3, #100	; 0x64
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	a902      	add	r1, sp, #8
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <cmd_MAX31865_RegisterRead+0x84>)
 8001e70:	f002 fe40 	bl	8004af4 <HAL_SPI_Receive>
 8001e74:	4605      	mov	r5, r0
 8001e76:	b960      	cbnz	r0, 8001e92 <cmd_MAX31865_RegisterRead+0x72>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <cmd_MAX31865_RegisterRead+0x7c>)
 8001e7e:	f001 fdba 	bl	80039f6 <HAL_GPIO_WritePin>
	sprintf((char*) resp, "Register Address: 0x%02X \t Register value: 0x%02X",
 8001e82:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001e86:	9a03      	ldr	r2, [sp, #12]
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <cmd_MAX31865_RegisterRead+0x88>)
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f004 ff8a 	bl	8006da4 <siprintf>
	return 0;
 8001e90:	e7e7      	b.n	8001e62 <cmd_MAX31865_RegisterRead+0x42>
		return 2;
 8001e92:	2502      	movs	r5, #2
 8001e94:	e7e5      	b.n	8001e62 <cmd_MAX31865_RegisterRead+0x42>
 8001e96:	bf00      	nop
 8001e98:	08009fc0 	.word	0x08009fc0
 8001e9c:	40010c00 	.word	0x40010c00
 8001ea0:	40010800 	.word	0x40010800
 8001ea4:	20000600 	.word	0x20000600
 8001ea8:	08009ff8 	.word	0x08009ff8

08001eac <cmd_setRelay>:
uint8_t cmd_setRelay(uint8_t *resp, uint8_t *newState) {
 8001eac:	b510      	push	{r4, lr}
 8001eae:	460c      	mov	r4, r1
	if (strcmp((char*) newState, "on") == 0) {
 8001eb0:	490f      	ldr	r1, [pc, #60]	; (8001ef0 <cmd_setRelay+0x44>)
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7fe f94c 	bl	8000150 <strcmp>
 8001eb8:	b130      	cbz	r0, 8001ec8 <cmd_setRelay+0x1c>
	} else if (strcmp((char*) newState, "off") == 0) {
 8001eba:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <cmd_setRelay+0x48>)
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7fe f947 	bl	8000150 <strcmp>
 8001ec2:	b158      	cbz	r0, 8001edc <cmd_setRelay+0x30>
		return 1; //Error
 8001ec4:	2001      	movs	r0, #1
}
 8001ec6:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin( RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2110      	movs	r1, #16
 8001ecc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001ed0:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8001ed4:	f001 fd8f 	bl	80039f6 <HAL_GPIO_WritePin>
	return 0;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e7f4      	b.n	8001ec6 <cmd_setRelay+0x1a>
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2110      	movs	r1, #16
 8001ee0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001ee4:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8001ee8:	f001 fd85 	bl	80039f6 <HAL_GPIO_WritePin>
	return 0;
 8001eec:	2000      	movs	r0, #0
 8001eee:	e7ea      	b.n	8001ec6 <cmd_setRelay+0x1a>
 8001ef0:	0800a2a0 	.word	0x0800a2a0
 8001ef4:	0800a02c 	.word	0x0800a02c

08001ef8 <cmd_setMode>:

uint8_t cmd_setMode(char *resp, char *target, char *ctrlMode) {
 8001ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001efc:	4680      	mov	r8, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	4615      	mov	r5, r2
	volatile loadConf_t *targetConf;

	//Get Target config from string
	if (strcmp(target, "J3") == 0) {
 8001f02:	4919      	ldr	r1, [pc, #100]	; (8001f68 <cmd_setMode+0x70>)
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7fe f923 	bl	8000150 <strcmp>
 8001f0a:	b158      	cbz	r0, 8001f24 <cmd_setMode+0x2c>
		targetConf = &J3_Conf;
	} else if (strcmp(target, "J4") == 0) {
 8001f0c:	4917      	ldr	r1, [pc, #92]	; (8001f6c <cmd_setMode+0x74>)
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7fe f91e 	bl	8000150 <strcmp>
 8001f14:	b1c8      	cbz	r0, 8001f4a <cmd_setMode+0x52>
		targetConf = &J4_Conf;
	} else if (strcmp(target, "J5") == 0) {
 8001f16:	4916      	ldr	r1, [pc, #88]	; (8001f70 <cmd_setMode+0x78>)
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7fe f919 	bl	8000150 <strcmp>
 8001f1e:	b9f0      	cbnz	r0, 8001f5e <cmd_setMode+0x66>
		targetConf = &J5_Conf;
 8001f20:	4f14      	ldr	r7, [pc, #80]	; (8001f74 <cmd_setMode+0x7c>)
 8001f22:	e000      	b.n	8001f26 <cmd_setMode+0x2e>
		targetConf = &J3_Conf;
 8001f24:	4f14      	ldr	r7, [pc, #80]	; (8001f78 <cmd_setMode+0x80>)
	} else {
		return 1; //error invalid target
	}

	//Get new ctrl mode
	if (strcmp(ctrlMode, "phase") == 0) {
 8001f26:	4915      	ldr	r1, [pc, #84]	; (8001f7c <cmd_setMode+0x84>)
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f7fe f911 	bl	8000150 <strcmp>
 8001f2e:	b970      	cbnz	r0, 8001f4e <cmd_setMode+0x56>
		targetConf->mode = phaseAngleCtrl;
 8001f30:	2300      	movs	r3, #0
 8001f32:	707b      	strb	r3, [r7, #1]
		targetConf->mode = onoffCtrl;
	} else {
		return 1; //error ctrl mode
	}

	targetConf->isSet = false;
 8001f34:	2600      	movs	r6, #0
 8001f36:	753e      	strb	r6, [r7, #20]

	sprintf(resp, "%s set to %s mode", target, ctrlMode);
 8001f38:	462b      	mov	r3, r5
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	4910      	ldr	r1, [pc, #64]	; (8001f80 <cmd_setMode+0x88>)
 8001f3e:	4640      	mov	r0, r8
 8001f40:	f004 ff30 	bl	8006da4 <siprintf>
	return 0;
 8001f44:	4630      	mov	r0, r6
}
 8001f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		targetConf = &J4_Conf;
 8001f4a:	4f0e      	ldr	r7, [pc, #56]	; (8001f84 <cmd_setMode+0x8c>)
 8001f4c:	e7eb      	b.n	8001f26 <cmd_setMode+0x2e>
	} else if (strcmp(ctrlMode, "onoff") == 0) {
 8001f4e:	490e      	ldr	r1, [pc, #56]	; (8001f88 <cmd_setMode+0x90>)
 8001f50:	4628      	mov	r0, r5
 8001f52:	f7fe f8fd 	bl	8000150 <strcmp>
 8001f56:	b920      	cbnz	r0, 8001f62 <cmd_setMode+0x6a>
		targetConf->mode = onoffCtrl;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	707b      	strb	r3, [r7, #1]
 8001f5c:	e7ea      	b.n	8001f34 <cmd_setMode+0x3c>
		return 1; //error invalid target
 8001f5e:	2001      	movs	r0, #1
 8001f60:	e7f1      	b.n	8001f46 <cmd_setMode+0x4e>
		return 1; //error ctrl mode
 8001f62:	2001      	movs	r0, #1
 8001f64:	e7ef      	b.n	8001f46 <cmd_setMode+0x4e>
 8001f66:	bf00      	nop
 8001f68:	0800a030 	.word	0x0800a030
 8001f6c:	0800a034 	.word	0x0800a034
 8001f70:	0800a038 	.word	0x0800a038
 8001f74:	20000034 	.word	0x20000034
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	0800a03c 	.word	0x0800a03c
 8001f80:	0800a04c 	.word	0x0800a04c
 8001f84:	2000001c 	.word	0x2000001c
 8001f88:	0800a044 	.word	0x0800a044

08001f8c <cmd_led>:
	sprintf(resp, "%s set to %i%% power", target, (int)newPowerPercent);
	return 0;
}

uint8_t cmd_led(char *resp, char *p1)
{
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	460c      	mov	r4, r1
	if (strcmp("on", p1) == 0) {
 8001f90:	4810      	ldr	r0, [pc, #64]	; (8001fd4 <cmd_led+0x48>)
 8001f92:	f7fe f8dd 	bl	8000150 <strcmp>
 8001f96:	b130      	cbz	r0, 8001fa6 <cmd_led+0x1a>
		HAL_GPIO_WritePin(DBG_LED1_GPIO_Port, DBG_LED1_Pin, GPIO_PIN_RESET);
	}else if(strcmp("off", p1) == 0)
 8001f98:	4621      	mov	r1, r4
 8001f9a:	480f      	ldr	r0, [pc, #60]	; (8001fd8 <cmd_led+0x4c>)
 8001f9c:	f7fe f8d8 	bl	8000150 <strcmp>
 8001fa0:	b160      	cbz	r0, 8001fbc <cmd_led+0x30>
	{
		HAL_GPIO_WritePin(DBG_LED1_GPIO_Port, DBG_LED1_Pin, GPIO_PIN_SET);
	}else
	{
		return 1;
 8001fa2:	2001      	movs	r0, #1
	}
	return 0;
}
 8001fa4:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(DBG_LED1_GPIO_Port, DBG_LED1_Pin, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fac:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001fb0:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8001fb4:	f001 fd1f 	bl	80039f6 <HAL_GPIO_WritePin>
	return 0;
 8001fb8:	2000      	movs	r0, #0
 8001fba:	e7f3      	b.n	8001fa4 <cmd_led+0x18>
		HAL_GPIO_WritePin(DBG_LED1_GPIO_Port, DBG_LED1_Pin, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001fc6:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8001fca:	f001 fd14 	bl	80039f6 <HAL_GPIO_WritePin>
	return 0;
 8001fce:	2000      	movs	r0, #0
 8001fd0:	e7e8      	b.n	8001fa4 <cmd_led+0x18>
 8001fd2:	bf00      	nop
 8001fd4:	0800a2a0 	.word	0x0800a2a0
 8001fd8:	0800a02c 	.word	0x0800a02c

08001fdc <cmd_setPid>:

uint8_t cmd_setPid(char *resp, char *state)
{
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	460c      	mov	r4, r1
	if ( strcmp(state, "on") == 0 ){
 8001fe0:	490e      	ldr	r1, [pc, #56]	; (800201c <cmd_setPid+0x40>)
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7fe f8b4 	bl	8000150 <strcmp>
 8001fe8:	b918      	cbnz	r0, 8001ff2 <cmd_setPid+0x16>
		//enable pid controller output
		pidIsActive = true;
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <cmd_setPid+0x44>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
	}else{
		return 1;
	}

	return 0;
}
 8001ff0:	bd10      	pop	{r4, pc}
	}else if ( strcmp(state, "off") == 0 ){
 8001ff2:	490c      	ldr	r1, [pc, #48]	; (8002024 <cmd_setPid+0x48>)
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7fe f8ab 	bl	8000150 <strcmp>
 8001ffa:	b910      	cbnz	r0, 8002002 <cmd_setPid+0x26>
		pidIsActive = false;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <cmd_setPid+0x44>)
 8001ffe:	7018      	strb	r0, [r3, #0]
 8002000:	e7f6      	b.n	8001ff0 <cmd_setPid+0x14>
	}else if ( strcmp(state, "reset") == 0 ){
 8002002:	4909      	ldr	r1, [pc, #36]	; (8002028 <cmd_setPid+0x4c>)
 8002004:	4620      	mov	r0, r4
 8002006:	f7fe f8a3 	bl	8000150 <strcmp>
 800200a:	b108      	cbz	r0, 8002010 <cmd_setPid+0x34>
		return 1;
 800200c:	2001      	movs	r0, #1
 800200e:	e7ef      	b.n	8001ff0 <cmd_setPid+0x14>
		arm_pid_reset_f32(&PID);
 8002010:	4806      	ldr	r0, [pc, #24]	; (800202c <cmd_setPid+0x50>)
 8002012:	f004 f96f 	bl	80062f4 <arm_pid_reset_f32>
	return 0;
 8002016:	2000      	movs	r0, #0
 8002018:	e7ea      	b.n	8001ff0 <cmd_setPid+0x14>
 800201a:	bf00      	nop
 800201c:	0800a2a0 	.word	0x0800a2a0
 8002020:	20000268 	.word	0x20000268
 8002024:	0800a02c 	.word	0x0800a02c
 8002028:	0800a060 	.word	0x0800a060
 800202c:	200004e0 	.word	0x200004e0

08002030 <cmd_Reset>:
uint8_t cmd_Reset(char *resp) {
 8002030:	b508      	push	{r3, lr}
	HAL_NVIC_SystemReset(); //RESET system
 8002032:	f001 fab5 	bl	80035a0 <HAL_NVIC_SystemReset>
}
 8002036:	2001      	movs	r0, #1
 8002038:	bd08      	pop	{r3, pc}
 800203a:	bf00      	nop

0800203c <cmd_setPower>:
uint8_t cmd_setPower(char *resp, char *target, char *powerPercent) {
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	4606      	mov	r6, r0
 8002040:	460c      	mov	r4, r1
 8002042:	4615      	mov	r5, r2
	if (strcmp(target, "J3") == 0) {
 8002044:	4913      	ldr	r1, [pc, #76]	; (8002094 <cmd_setPower+0x58>)
 8002046:	4620      	mov	r0, r4
 8002048:	f7fe f882 	bl	8000150 <strcmp>
 800204c:	b158      	cbz	r0, 8002066 <cmd_setPower+0x2a>
	} else if (strcmp(target, "J4") == 0) {
 800204e:	4912      	ldr	r1, [pc, #72]	; (8002098 <cmd_setPower+0x5c>)
 8002050:	4620      	mov	r0, r4
 8002052:	f7fe f87d 	bl	8000150 <strcmp>
 8002056:	b140      	cbz	r0, 800206a <cmd_setPower+0x2e>
	} else if (strcmp(target, "J5") == 0) {
 8002058:	4910      	ldr	r1, [pc, #64]	; (800209c <cmd_setPower+0x60>)
 800205a:	4620      	mov	r0, r4
 800205c:	f7fe f878 	bl	8000150 <strcmp>
 8002060:	b9a8      	cbnz	r0, 800208e <cmd_setPower+0x52>
		targetConf = &J5_Conf;
 8002062:	4f0f      	ldr	r7, [pc, #60]	; (80020a0 <cmd_setPower+0x64>)
 8002064:	e002      	b.n	800206c <cmd_setPower+0x30>
		targetConf = &J3_Conf;
 8002066:	4f0f      	ldr	r7, [pc, #60]	; (80020a4 <cmd_setPower+0x68>)
 8002068:	e000      	b.n	800206c <cmd_setPower+0x30>
		targetConf = &J4_Conf;
 800206a:	4f0f      	ldr	r7, [pc, #60]	; (80020a8 <cmd_setPower+0x6c>)
	int32_t newPowerPercent = (int32_t) atoi(powerPercent);
 800206c:	4628      	mov	r0, r5
 800206e:	f004 f967 	bl	8006340 <atoi>
 8002072:	4603      	mov	r3, r0
	if (newPowerPercent > 100) {
 8002074:	2864      	cmp	r0, #100	; 0x64
 8002076:	dd00      	ble.n	800207a <cmd_setPower+0x3e>
		newPowerPercent = 100;
 8002078:	2364      	movs	r3, #100	; 0x64
	targetConf->powerPercent = newPowerPercent;
 800207a:	607b      	str	r3, [r7, #4]
	targetConf->isSet = false; //update at next ZC
 800207c:	2500      	movs	r5, #0
 800207e:	753d      	strb	r5, [r7, #20]
	sprintf(resp, "%s set to %i%% power", target, (int)newPowerPercent);
 8002080:	4622      	mov	r2, r4
 8002082:	490a      	ldr	r1, [pc, #40]	; (80020ac <cmd_setPower+0x70>)
 8002084:	4630      	mov	r0, r6
 8002086:	f004 fe8d 	bl	8006da4 <siprintf>
	return 0;
 800208a:	4628      	mov	r0, r5
}
 800208c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1; //error invalid target
 800208e:	2001      	movs	r0, #1
 8002090:	e7fc      	b.n	800208c <cmd_setPower+0x50>
 8002092:	bf00      	nop
 8002094:	0800a030 	.word	0x0800a030
 8002098:	0800a034 	.word	0x0800a034
 800209c:	0800a038 	.word	0x0800a038
 80020a0:	20000034 	.word	0x20000034
 80020a4:	20000004 	.word	0x20000004
 80020a8:	2000001c 	.word	0x2000001c
 80020ac:	0800a068 	.word	0x0800a068

080020b0 <cmd_setSetpoint>:
uint8_t cmd_setSetpoint(char *resp, char *newSetpoint)
{
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4604      	mov	r4, r0
	setpoint = atoi(newSetpoint);
 80020b4:	4608      	mov	r0, r1
 80020b6:	f004 f943 	bl	8006340 <atoi>
 80020ba:	f7fe fe19 	bl	8000cf0 <__aeabi_i2f>
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <cmd_setSetpoint+0x28>)
 80020c0:	6018      	str	r0, [r3, #0]
	sprintf(resp, "setpoint = %.2f", setpoint);
 80020c2:	f7fe f9bb 	bl	800043c <__aeabi_f2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4904      	ldr	r1, [pc, #16]	; (80020dc <cmd_setSetpoint+0x2c>)
 80020cc:	4620      	mov	r0, r4
 80020ce:	f004 fe69 	bl	8006da4 <siprintf>
	return 0;
}
 80020d2:	2000      	movs	r0, #0
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	bf00      	nop
 80020d8:	2000004c 	.word	0x2000004c
 80020dc:	0800a080 	.word	0x0800a080

080020e0 <cmd_tone>:
//	arm_pid_init_f32 (arm_pid_instance_f32 *S, int32_t resetStateFlag)
	return 0;
}

uint8_t cmd_tone(char *resp,char *freq, char *duration)
{
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4615      	mov	r5, r2
	uint16_t period = atoi(freq);
 80020e4:	4608      	mov	r0, r1
 80020e6:	f004 f92b 	bl	8006340 <atoi>
 80020ea:	b280      	uxth	r0, r0

	__HAL_TIM_SET_AUTORELOAD(&htim4, period);
 80020ec:	4c0a      	ldr	r4, [pc, #40]	; (8002118 <cmd_tone+0x38>)
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	62d8      	str	r0, [r3, #44]	; 0x2c
 80020f2:	60e0      	str	r0, [r4, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, period/2);
 80020f4:	0840      	lsrs	r0, r0, #1
 80020f6:	6398      	str	r0, [r3, #56]	; 0x38

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80020f8:	2104      	movs	r1, #4
 80020fa:	4620      	mov	r0, r4
 80020fc:	f003 fc28 	bl	8005950 <HAL_TIM_PWM_Start>

	HAL_Delay(atoi(duration));
 8002100:	4628      	mov	r0, r5
 8002102:	f004 f91d 	bl	8006340 <atoi>
 8002106:	f001 f9d1 	bl	80034ac <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 800210a:	2104      	movs	r1, #4
 800210c:	4620      	mov	r0, r4
 800210e:	f003 fc8d 	bl	8005a2c <HAL_TIM_PWM_Stop>

	return 0;
}
 8002112:	2000      	movs	r0, #0
 8002114:	bd38      	pop	{r3, r4, r5, pc}
 8002116:	bf00      	nop
 8002118:	20000494 	.word	0x20000494

0800211c <cmd_dispProgMode>:
 */

#pragma GCC push_options
#pragma GCC optimize ("Ofast")
uint8_t cmd_dispProgMode(char *resp, char *duration)
{
 800211c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	2400      	movs	r4, #0
{
 8002120:	b086      	sub	sp, #24

	HAL_UART_MspDeInit(&huart1);
 8002122:	4843      	ldr	r0, [pc, #268]	; (8002230 <cmd_dispProgMode+0x114>)
{
 8002124:	460e      	mov	r6, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800212a:	e9cd 4404 	strd	r4, r4, [sp, #16]
	HAL_UART_MspDeInit(&huart1);
 800212e:	f001 f875 	bl	800321c <HAL_UART_MspDeInit>
	HAL_UART_MspDeInit(&huart2);
 8002132:	4840      	ldr	r0, [pc, #256]	; (8002234 <cmd_dispProgMode+0x118>)
 8002134:	f001 f872 	bl	800321c <HAL_UART_MspDeInit>
	__HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX (Output)
    PA10     ------> USART1_RX (Input)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002138:	f44f 7000 	mov.w	r0, #512	; 0x200
 800213c:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213e:	2503      	movs	r5, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <cmd_dispProgMode+0x11c>)
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	f042 0204 	orr.w	r2, r2, #4
 8002148:	619a      	str	r2, [r3, #24]
 800214a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800214c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002150:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	a902      	add	r1, sp, #8
 800215c:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002162:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f001 fab2 	bl	80036cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	4833      	ldr	r0, [pc, #204]	; (800223c <cmd_dispProgMode+0x120>)
 8002170:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002172:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f001 faa8 	bl	80036cc <HAL_GPIO_Init>

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX (Output)
    PA3     ------> USART2_RX (Input)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800217c:	2204      	movs	r2, #4
 800217e:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	482e      	ldr	r0, [pc, #184]	; (800223c <cmd_dispProgMode+0x120>)
 8002182:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002184:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002188:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f001 fa9f 	bl	80036cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800218e:	2208      	movs	r2, #8
 8002190:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	a902      	add	r1, sp, #8
 8002194:	4829      	ldr	r0, [pc, #164]	; (800223c <cmd_dispProgMode+0x120>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002196:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f001 fa96 	bl	80036cc <HAL_GPIO_Init>

    uint32_t timeStamp = HAL_GetTick();
 80021a0:	f001 f97e 	bl	80034a0 <HAL_GetTick>
 80021a4:	4605      	mov	r5, r0
    uint32_t timeout = (uint32_t)atoi(duration);
 80021a6:	4630      	mov	r0, r6
 80021a8:	f004 f8ca 	bl	8006340 <atoi>
    uint32_t timeStamp = HAL_GetTick();
 80021ac:	462e      	mov	r6, r5
    uint32_t timeout = (uint32_t)atoi(duration);
 80021ae:	4605      	mov	r5, r0

    /* Bridge UARTS by mirroring the GPIO pins */
    printf("Nextion display connected to USB port for %i seconds, disconnect terminal and start upload form nextion editor\n", (int)timeout);
 80021b0:	4823      	ldr	r0, [pc, #140]	; (8002240 <cmd_dispProgMode+0x124>)
 80021b2:	4629      	mov	r1, r5
 80021b4:	f004 fd68 	bl	8006c88 <iprintf>

	while( HAL_GetTick() < timeStamp + timeout*1000 )
 80021b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	{
		HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) );
 80021bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	while( HAL_GetTick() < timeStamp + timeout*1000 )
 80021c0:	fb01 6505 	mla	r5, r1, r5, r6
		HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) );
 80021c4:	f504 3484 	add.w	r4, r4, #67584	; 0x10800
	while( HAL_GetTick() < timeStamp + timeout*1000 )
 80021c8:	e013      	b.n	80021f2 <cmd_dispProgMode+0xd6>
		HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) );
 80021ca:	2108      	movs	r1, #8
 80021cc:	4620      	mov	r0, r4
 80021ce:	f001 fc0b 	bl	80039e8 <HAL_GPIO_ReadPin>
 80021d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d6:	4602      	mov	r2, r0
 80021d8:	4620      	mov	r0, r4
 80021da:	f001 fc0c 	bl	80039f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, GPIO_PIN_2, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) );
 80021de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021e2:	4620      	mov	r0, r4
 80021e4:	f001 fc00 	bl	80039e8 <HAL_GPIO_ReadPin>
 80021e8:	2104      	movs	r1, #4
 80021ea:	4602      	mov	r2, r0
 80021ec:	4620      	mov	r0, r4
 80021ee:	f001 fc02 	bl	80039f6 <HAL_GPIO_WritePin>
	while( HAL_GetTick() < timeStamp + timeout*1000 )
 80021f2:	f001 f955 	bl	80034a0 <HAL_GetTick>
 80021f6:	42a8      	cmp	r0, r5
 80021f8:	d3e7      	bcc.n	80021ca <cmd_dispProgMode+0xae>

	/* Reinit UART for normal operation */
	HAL_UART_MspInit(&huart1);
	HAL_UART_MspInit(&huart2);

	uart1RxBuffLoc = 0;
 80021fa:	2400      	movs	r4, #0
	HAL_UART_MspInit(&huart1);
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <cmd_dispProgMode+0x114>)
 80021fe:	f000 ff93 	bl	8003128 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 8002202:	480c      	ldr	r0, [pc, #48]	; (8002234 <cmd_dispProgMode+0x118>)
 8002204:	f000 ff90 	bl	8003128 <HAL_UART_MspInit>
	uart2RxBuffLoc = 0;
 8002208:	4d0e      	ldr	r5, [pc, #56]	; (8002244 <cmd_dispProgMode+0x128>)
	uart1RxBuffLoc = 0;
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <cmd_dispProgMode+0x12c>)

	UART1_START_RX_IT();
 800220c:	2201      	movs	r2, #1
 800220e:	490f      	ldr	r1, [pc, #60]	; (800224c <cmd_dispProgMode+0x130>)
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <cmd_dispProgMode+0x114>)
	uart1RxBuffLoc = 0;
 8002212:	601c      	str	r4, [r3, #0]
	uart2RxBuffLoc = 0;
 8002214:	602c      	str	r4, [r5, #0]
	UART1_START_RX_IT();
 8002216:	f004 f850 	bl	80062ba <HAL_UART_Receive_IT>
	UART2_START_RX_IT();
 800221a:	682b      	ldr	r3, [r5, #0]
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <cmd_dispProgMode+0x134>)
 800221e:	2201      	movs	r2, #1
 8002220:	4419      	add	r1, r3
 8002222:	4804      	ldr	r0, [pc, #16]	; (8002234 <cmd_dispProgMode+0x118>)
 8002224:	f004 f849 	bl	80062ba <HAL_UART_Receive_IT>


	return 0;
}
 8002228:	4620      	mov	r0, r4
 800222a:	b006      	add	sp, #24
 800222c:	bd70      	pop	{r4, r5, r6, pc}
 800222e:	bf00      	nop
 8002230:	2000054c 	.word	0x2000054c
 8002234:	200006a0 	.word	0x200006a0
 8002238:	40021000 	.word	0x40021000
 800223c:	40010800 	.word	0x40010800
 8002240:	0800a090 	.word	0x0800a090
 8002244:	200002e8 	.word	0x200002e8
 8002248:	200002b0 	.word	0x200002b0
 800224c:	2000027c 	.word	0x2000027c
 8002250:	200002b4 	.word	0x200002b4

08002254 <SystemClock_Config>:
{
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002258:	2400      	movs	r4, #0
 800225a:	940b      	str	r4, [sp, #44]	; 0x2c
 800225c:	940c      	str	r4, [sp, #48]	; 0x30
 800225e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002260:	9405      	str	r4, [sp, #20]
 8002262:	9406      	str	r4, [sp, #24]
 8002264:	9407      	str	r4, [sp, #28]
 8002266:	9408      	str	r4, [sp, #32]
 8002268:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800226a:	9401      	str	r4, [sp, #4]
 800226c:	9402      	str	r4, [sp, #8]
 800226e:	9403      	str	r4, [sp, #12]
 8002270:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002272:	230a      	movs	r3, #10
 8002274:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002276:	2501      	movs	r5, #1
 8002278:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800227a:	2310      	movs	r3, #16
 800227c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800227e:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002280:	2602      	movs	r6, #2
 8002282:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002284:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002286:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800228a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228c:	a80a      	add	r0, sp, #40	; 0x28
 800228e:	f001 fc55 	bl	8003b3c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002292:	230f      	movs	r3, #15
 8002294:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002296:	9606      	str	r6, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002298:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800229a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800229e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022a2:	4631      	mov	r1, r6
 80022a4:	a805      	add	r0, sp, #20
 80022a6:	f001 fe87 	bl	8003fb8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022aa:	9501      	str	r5, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b0:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b2:	a801      	add	r0, sp, #4
 80022b4:	f001 ff5c 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
}
 80022b8:	b014      	add	sp, #80	; 0x50
 80022ba:	bd70      	pop	{r4, r5, r6, pc}

080022bc <__io_putchar>:
int __io_putchar(int ch) {
 80022bc:	b500      	push	{lr}
 80022be:	b083      	sub	sp, #12
 80022c0:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 80022c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c6:	2201      	movs	r2, #1
 80022c8:	a901      	add	r1, sp, #4
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <__io_putchar+0x1c>)
 80022cc:	f003 fdeb 	bl	8005ea6 <HAL_UART_Transmit>
}
 80022d0:	9801      	ldr	r0, [sp, #4]
 80022d2:	b003      	add	sp, #12
 80022d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80022d8:	2000054c 	.word	0x2000054c

080022dc <_write>:
int _write(int file, char *ptr, int len) {
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	460c      	mov	r4, r1
 80022e0:	4616      	mov	r6, r2
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80022e2:	2500      	movs	r5, #0
 80022e4:	42b5      	cmp	r5, r6
 80022e6:	da05      	bge.n	80022f4 <_write+0x18>
		__io_putchar(*ptr++);
 80022e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80022ec:	f7ff ffe6 	bl	80022bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80022f0:	3501      	adds	r5, #1
 80022f2:	e7f7      	b.n	80022e4 <_write+0x8>
}
 80022f4:	4630      	mov	r0, r6
 80022f6:	bd70      	pop	{r4, r5, r6, pc}

080022f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022f8:	b510      	push	{r4, lr}
	if( huart->Instance == USART1){
 80022fa:	6803      	ldr	r3, [r0, #0]
 80022fc:	4a38      	ldr	r2, [pc, #224]	; (80023e0 <HAL_UART_RxCpltCallback+0xe8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <HAL_UART_RxCpltCallback+0x12>
	}else if( huart->Instance == USART2){
 8002302:	4a38      	ldr	r2, [pc, #224]	; (80023e4 <HAL_UART_RxCpltCallback+0xec>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d02b      	beq.n	8002360 <HAL_UART_RxCpltCallback+0x68>
}
 8002308:	bd10      	pop	{r4, pc}
		if (cmdRdyFlg == 1) {
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_UART_RxCpltCallback+0xf0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d01e      	beq.n	8002350 <HAL_UART_RxCpltCallback+0x58>
		if (uart1RxBuff[uart1RxBuffLoc] == '\n') {
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_UART_RxCpltCallback+0xf4>)
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_UART_RxCpltCallback+0xf8>)
 8002318:	5c5b      	ldrb	r3, [r3, r1]
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d01c      	beq.n	8002358 <HAL_UART_RxCpltCallback+0x60>
			uart1RxBuffLoc++;
 800231e:	3101      	adds	r1, #1
 8002320:	4c32      	ldr	r4, [pc, #200]	; (80023ec <HAL_UART_RxCpltCallback+0xf4>)
 8002322:	6021      	str	r1, [r4, #0]
			UART1_START_RX_IT();
 8002324:	2201      	movs	r2, #1
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_UART_RxCpltCallback+0xf8>)
 8002328:	4419      	add	r1, r3
 800232a:	4832      	ldr	r0, [pc, #200]	; (80023f4 <HAL_UART_RxCpltCallback+0xfc>)
 800232c:	f003 ffc5 	bl	80062ba <HAL_UART_Receive_IT>
		if (uart1RxBuffLoc >= UART1_RX_BUFF_SIZE - 1) {
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	2b30      	cmp	r3, #48	; 0x30
 8002334:	d9e8      	bls.n	8002308 <HAL_UART_RxCpltCallback+0x10>
			uart1RxBuffLoc = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	6023      	str	r3, [r4, #0]
			printf("cmd bufffer overun!\n");
 800233a:	482f      	ldr	r0, [pc, #188]	; (80023f8 <HAL_UART_RxCpltCallback+0x100>)
 800233c:	f004 fd2a 	bl	8006d94 <puts>
			UART1_START_RX_IT();
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	2201      	movs	r2, #1
 8002344:	492a      	ldr	r1, [pc, #168]	; (80023f0 <HAL_UART_RxCpltCallback+0xf8>)
 8002346:	4419      	add	r1, r3
 8002348:	482a      	ldr	r0, [pc, #168]	; (80023f4 <HAL_UART_RxCpltCallback+0xfc>)
 800234a:	f003 ffb6 	bl	80062ba <HAL_UART_Receive_IT>
 800234e:	e7db      	b.n	8002308 <HAL_UART_RxCpltCallback+0x10>
			printf("Not so fast!, prev cmd not yet processed\n");
 8002350:	482a      	ldr	r0, [pc, #168]	; (80023fc <HAL_UART_RxCpltCallback+0x104>)
 8002352:	f004 fd1f 	bl	8006d94 <puts>
			return;
 8002356:	e7d7      	b.n	8002308 <HAL_UART_RxCpltCallback+0x10>
			cmdRdyFlg = 1;
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <HAL_UART_RxCpltCallback+0xf0>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
			return;
 800235e:	e7d3      	b.n	8002308 <HAL_UART_RxCpltCallback+0x10>
		if (dispCmdRdyFlg == 1) {
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_UART_RxCpltCallback+0x108>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d01e      	beq.n	80023a6 <HAL_UART_RxCpltCallback+0xae>
		if (uart2RxBuff[uart2RxBuffLoc] == 255) {
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_UART_RxCpltCallback+0x10c>)
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_UART_RxCpltCallback+0x110>)
 800236e:	5c5b      	ldrb	r3, [r3, r1]
 8002370:	2bff      	cmp	r3, #255	; 0xff
 8002372:	d01c      	beq.n	80023ae <HAL_UART_RxCpltCallback+0xb6>
			uart2RxBuffLoc++;
 8002374:	3101      	adds	r1, #1
 8002376:	4c23      	ldr	r4, [pc, #140]	; (8002404 <HAL_UART_RxCpltCallback+0x10c>)
 8002378:	6021      	str	r1, [r4, #0]
			UART2_START_RX_IT();
 800237a:	2201      	movs	r2, #1
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_UART_RxCpltCallback+0x110>)
 800237e:	4419      	add	r1, r3
 8002380:	4822      	ldr	r0, [pc, #136]	; (800240c <HAL_UART_RxCpltCallback+0x114>)
 8002382:	f003 ff9a 	bl	80062ba <HAL_UART_Receive_IT>
		if (uart2RxBuffLoc >= UART2_RX_BUFF_SIZE - 1) {
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	2b30      	cmp	r3, #48	; 0x30
 800238a:	d9bd      	bls.n	8002308 <HAL_UART_RxCpltCallback+0x10>
			uart2RxBuffLoc = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	6023      	str	r3, [r4, #0]
			printf("cmd bufffer overun!\n");
 8002390:	4819      	ldr	r0, [pc, #100]	; (80023f8 <HAL_UART_RxCpltCallback+0x100>)
 8002392:	f004 fcff 	bl	8006d94 <puts>
			UART2_START_RX_IT();
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	491b      	ldr	r1, [pc, #108]	; (8002408 <HAL_UART_RxCpltCallback+0x110>)
 800239c:	4419      	add	r1, r3
 800239e:	481b      	ldr	r0, [pc, #108]	; (800240c <HAL_UART_RxCpltCallback+0x114>)
 80023a0:	f003 ff8b 	bl	80062ba <HAL_UART_Receive_IT>
 80023a4:	e7b0      	b.n	8002308 <HAL_UART_RxCpltCallback+0x10>
			printf("Not so fast!, prev nextion cmd not yet processed\n");
 80023a6:	481a      	ldr	r0, [pc, #104]	; (8002410 <HAL_UART_RxCpltCallback+0x118>)
 80023a8:	f004 fcf4 	bl	8006d94 <puts>
			return;
 80023ac:	e7ac      	b.n	8002308 <HAL_UART_RxCpltCallback+0x10>
			eolCnt++;
 80023ae:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_UART_RxCpltCallback+0x11c>)
 80023b0:	7813      	ldrb	r3, [r2, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	7013      	strb	r3, [r2, #0]
			if( eolCnt >= 3)
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d906      	bls.n	80023ca <HAL_UART_RxCpltCallback+0xd2>
				dispCmdRdyFlg = 1;
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_UART_RxCpltCallback+0x108>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
				eolCnt = 0;
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_UART_RxCpltCallback+0x11c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e79e      	b.n	8002308 <HAL_UART_RxCpltCallback+0x10>
				uart2RxBuffLoc++;
 80023ca:	3101      	adds	r1, #1
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_UART_RxCpltCallback+0x10c>)
 80023ce:	6019      	str	r1, [r3, #0]
				UART2_START_RX_IT();
 80023d0:	2201      	movs	r2, #1
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_UART_RxCpltCallback+0x110>)
 80023d4:	4419      	add	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <HAL_UART_RxCpltCallback+0x114>)
 80023d8:	f003 ff6f 	bl	80062ba <HAL_UART_Receive_IT>
			return;
 80023dc:	e794      	b.n	8002308 <HAL_UART_RxCpltCallback+0x10>
 80023de:	bf00      	nop
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40004400 	.word	0x40004400
 80023e8:	2000024d 	.word	0x2000024d
 80023ec:	200002b0 	.word	0x200002b0
 80023f0:	2000027c 	.word	0x2000027c
 80023f4:	2000054c 	.word	0x2000054c
 80023f8:	0800a12c 	.word	0x0800a12c
 80023fc:	0800a100 	.word	0x0800a100
 8002400:	20000254 	.word	0x20000254
 8002404:	200002e8 	.word	0x200002e8
 8002408:	200002b4 	.word	0x200002b4
 800240c:	200006a0 	.word	0x200006a0
 8002410:	0800a140 	.word	0x0800a140
 8002414:	2000025c 	.word	0x2000025c

08002418 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002418:	b510      	push	{r4, lr}
	__HAL_UART_FLUSH_DRREGISTER(huart);
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
	uart1RxBuffLoc = 0; //reset buffer, data corrupted
 800241e:	2400      	movs	r4, #0
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_UART_ErrorCallback+0x28>)
 8002422:	601c      	str	r4, [r3, #0]
	UART1_START_RX_IT(); //An UART error has occurred, restart the interrupt based UART reception
 8002424:	2201      	movs	r2, #1
 8002426:	4907      	ldr	r1, [pc, #28]	; (8002444 <HAL_UART_ErrorCallback+0x2c>)
 8002428:	4807      	ldr	r0, [pc, #28]	; (8002448 <HAL_UART_ErrorCallback+0x30>)
 800242a:	f003 ff46 	bl	80062ba <HAL_UART_Receive_IT>
	uart2RxBuffLoc = 0; //reset buffer, data corrupted
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_UART_ErrorCallback+0x34>)
 8002430:	601c      	str	r4, [r3, #0]
	UART2_START_RX_IT(); //An UART error has occurred, restart the interrupt based UART reception
 8002432:	2201      	movs	r2, #1
 8002434:	4906      	ldr	r1, [pc, #24]	; (8002450 <HAL_UART_ErrorCallback+0x38>)
 8002436:	4807      	ldr	r0, [pc, #28]	; (8002454 <HAL_UART_ErrorCallback+0x3c>)
 8002438:	f003 ff3f 	bl	80062ba <HAL_UART_Receive_IT>
}
 800243c:	bd10      	pop	{r4, pc}
 800243e:	bf00      	nop
 8002440:	200002b0 	.word	0x200002b0
 8002444:	2000027c 	.word	0x2000027c
 8002448:	2000054c 	.word	0x2000054c
 800244c:	200002e8 	.word	0x200002e8
 8002450:	200002b4 	.word	0x200002b4
 8002454:	200006a0 	.word	0x200006a0

08002458 <map>:
	if( x < in_min)
 8002458:	4288      	cmp	r0, r1
 800245a:	db03      	blt.n	8002464 <map+0xc>
	else if( x > in_max )
 800245c:	4290      	cmp	r0, r2
 800245e:	dd03      	ble.n	8002468 <map+0x10>
		return in_max;
 8002460:	b290      	uxth	r0, r2
}
 8002462:	4770      	bx	lr
		return in_min;
 8002464:	b288      	uxth	r0, r1
 8002466:	4770      	bx	lr
uint16_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 8002468:	b410      	push	{r4}
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800246a:	1a44      	subs	r4, r0, r1
 800246c:	9801      	ldr	r0, [sp, #4]
 800246e:	1ac0      	subs	r0, r0, r3
 8002470:	fb00 f004 	mul.w	r0, r0, r4
 8002474:	1a51      	subs	r1, r2, r1
 8002476:	fb90 f1f1 	sdiv	r1, r0, r1
 800247a:	440b      	add	r3, r1
 800247c:	b298      	uxth	r0, r3
}
 800247e:	bc10      	pop	{r4}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <nextion_uart_transmit>:
uint8_t nextion_uart_transmit(uint8_t *buffer) {
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
	if( HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 100) != HAL_OK)
 8002488:	f7fd fe6c 	bl	8000164 <strlen>
 800248c:	2364      	movs	r3, #100	; 0x64
 800248e:	b282      	uxth	r2, r0
 8002490:	4621      	mov	r1, r4
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <nextion_uart_transmit+0x1c>)
 8002494:	f003 fd07 	bl	8005ea6 <HAL_UART_Transmit>
 8002498:	b900      	cbnz	r0, 800249c <nextion_uart_transmit+0x18>
}
 800249a:	bd10      	pop	{r4, pc}
		return 1;
 800249c:	2001      	movs	r0, #1
 800249e:	e7fc      	b.n	800249a <nextion_uart_transmit+0x16>
 80024a0:	200006a0 	.word	0x200006a0

080024a4 <rtc_read_backup_reg>:
	NVIC_SystemReset();

	return 0;
}

uint32_t rtc_read_backup_reg(uint32_t BackupRegister) {
 80024a4:	b500      	push	{lr}
 80024a6:	b087      	sub	sp, #28
 80024a8:	4601      	mov	r1, r0
    RTC_HandleTypeDef RtcHandle;
    RtcHandle.Instance = RTC;
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <rtc_read_backup_reg+0x18>)
 80024ac:	9301      	str	r3, [sp, #4]
    return HAL_RTCEx_BKUPRead(&RtcHandle, BackupRegister);
 80024ae:	a801      	add	r0, sp, #4
 80024b0:	f002 f816 	bl	80044e0 <HAL_RTCEx_BKUPRead>
}
 80024b4:	b007      	add	sp, #28
 80024b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ba:	bf00      	nop
 80024bc:	40002800 	.word	0x40002800

080024c0 <rtc_write_backup_reg>:

void rtc_write_backup_reg(uint32_t BackupRegister, uint32_t data) {
 80024c0:	b530      	push	{r4, r5, lr}
 80024c2:	b087      	sub	sp, #28
 80024c4:	4604      	mov	r4, r0
 80024c6:	460d      	mov	r5, r1
    RTC_HandleTypeDef RtcHandle;
    RtcHandle.Instance = RTC;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <rtc_write_backup_reg+0x24>)
 80024ca:	9301      	str	r3, [sp, #4]
    HAL_PWR_EnableBkUpAccess();
 80024cc:	f001 fa9a 	bl	8003a04 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(&RtcHandle, BackupRegister, data);
 80024d0:	462a      	mov	r2, r5
 80024d2:	4621      	mov	r1, r4
 80024d4:	a801      	add	r0, sp, #4
 80024d6:	f001 fffb 	bl	80044d0 <HAL_RTCEx_BKUPWrite>
    HAL_PWR_DisableBkUpAccess();
 80024da:	f001 fa99 	bl	8003a10 <HAL_PWR_DisableBkUpAccess>
}
 80024de:	b007      	add	sp, #28
 80024e0:	bd30      	pop	{r4, r5, pc}
 80024e2:	bf00      	nop
 80024e4:	40002800 	.word	0x40002800

080024e8 <cmd_dfu>:
{
 80024e8:	b508      	push	{r3, lr}
	printf("Disconnect COM port from terminal and open flash utility, power cycle when complete\n\n");
 80024ea:	480a      	ldr	r0, [pc, #40]	; (8002514 <cmd_dfu+0x2c>)
 80024ec:	f004 fc52 	bl	8006d94 <puts>
	rtc_write_backup_reg(DFU_FLG_BKU_REG,  DFU_FLG);
 80024f0:	2179      	movs	r1, #121	; 0x79
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff ffe4 	bl	80024c0 <rtc_write_backup_reg>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024f8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024fc:	4906      	ldr	r1, [pc, #24]	; (8002518 <cmd_dfu+0x30>)
 80024fe:	68ca      	ldr	r2, [r1, #12]
 8002500:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <cmd_dfu+0x34>)
 8002506:	4313      	orrs	r3, r2
 8002508:	60cb      	str	r3, [r1, #12]
 800250a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800250e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002510:	e7fd      	b.n	800250e <cmd_dfu+0x26>
 8002512:	bf00      	nop
 8002514:	0800a174 	.word	0x0800a174
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	05fa0004 	.word	0x05fa0004

08002520 <updateLoad>:
 * This function is called at the ZC event to prevent invalid output when changing the power setting
 */
uint8_t updateLoad(volatile loadConf_t *targetConf)
{
	uint16_t newOcVal = 0;
	if( targetConf->isSet == true )
 8002520:	7d03      	ldrb	r3, [r0, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 8085 	bne.w	8002632 <updateLoad+0x112>
{
 8002528:	b510      	push	{r4, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	4604      	mov	r4, r0
	{
		//Current configuration active, no changes needed
		return 0;
	}else{
		//Set new power setting
		if( targetConf->powerPercent == 0 )
 800252e:	6843      	ldr	r3, [r0, #4]
 8002530:	b1e3      	cbz	r3, 800256c <updateLoad+0x4c>
			HAL_TIM_OC_Stop_IT(&htim1, targetConf->timerChannel); //Stop on-off control
			HAL_TIM_OC_Stop_IT(&htim2, targetConf->timerChannel); //Stop phase angle control

			//Force output LOW
			HAL_GPIO_WritePin(targetConf->GPIO_Port, targetConf->GPIO_Pin, GPIO_PIN_RESET);
		}else if( targetConf->powerPercent == 100 ){
 8002532:	6843      	ldr	r3, [r0, #4]
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d02c      	beq.n	8002592 <updateLoad+0x72>
			HAL_TIM_OC_Stop_IT(&htim1, targetConf->timerChannel); //Stop on-off control
			HAL_TIM_OC_Stop_IT(&htim2, targetConf->timerChannel); //Stop phase angle control

			//Forge output HIGH
			HAL_GPIO_WritePin(targetConf->GPIO_Port, targetConf->GPIO_Pin, GPIO_PIN_SET);
		}else if (targetConf->mode == phaseAngleCtrl) {
 8002538:	7843      	ldrb	r3, [r0, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d14a      	bne.n	80025d4 <updateLoad+0xb4>

			newOcVal = map(targetConf->powerPercent, 1, 99, htim2.Init.Period, 1); //Calc OC val based on power setpoint
 800253e:	6840      	ldr	r0, [r0, #4]
 8002540:	2101      	movs	r1, #1
 8002542:	9100      	str	r1, [sp, #0]
 8002544:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <updateLoad+0x118>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2263      	movs	r2, #99	; 0x63
 800254a:	f7ff ff85 	bl	8002458 <map>
			__HAL_TIM_SET_COMPARE(&htim2, targetConf->timerChannel, newOcVal );
 800254e:	6923      	ldr	r3, [r4, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d12d      	bne.n	80025b0 <updateLoad+0x90>
 8002554:	4b38      	ldr	r3, [pc, #224]	; (8002638 <updateLoad+0x118>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6358      	str	r0, [r3, #52]	; 0x34

			HAL_TIM_OC_Stop_IT(&htim1, targetConf->timerChannel); //Turn off output on-off ctrl, just in case
 800255a:	6921      	ldr	r1, [r4, #16]
 800255c:	4837      	ldr	r0, [pc, #220]	; (800263c <updateLoad+0x11c>)
 800255e:	f003 f993 	bl	8005888 <HAL_TIM_OC_Stop_IT>
			HAL_TIM_OC_Start_IT(&htim2, targetConf->timerChannel); //Turn on output phase control
 8002562:	6921      	ldr	r1, [r4, #16]
 8002564:	4834      	ldr	r0, [pc, #208]	; (8002638 <updateLoad+0x118>)
 8002566:	f003 f8ff 	bl	8005768 <HAL_TIM_OC_Start_IT>
 800256a:	e00d      	b.n	8002588 <updateLoad+0x68>
			HAL_TIM_OC_Stop_IT(&htim1, targetConf->timerChannel); //Stop on-off control
 800256c:	6901      	ldr	r1, [r0, #16]
 800256e:	4833      	ldr	r0, [pc, #204]	; (800263c <updateLoad+0x11c>)
 8002570:	f003 f98a 	bl	8005888 <HAL_TIM_OC_Stop_IT>
			HAL_TIM_OC_Stop_IT(&htim2, targetConf->timerChannel); //Stop phase angle control
 8002574:	6921      	ldr	r1, [r4, #16]
 8002576:	4830      	ldr	r0, [pc, #192]	; (8002638 <updateLoad+0x118>)
 8002578:	f003 f986 	bl	8005888 <HAL_TIM_OC_Stop_IT>
			HAL_GPIO_WritePin(targetConf->GPIO_Port, targetConf->GPIO_Pin, GPIO_PIN_RESET);
 800257c:	68a0      	ldr	r0, [r4, #8]
 800257e:	89a1      	ldrh	r1, [r4, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	b289      	uxth	r1, r1
 8002584:	f001 fa37 	bl	80039f6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, targetConf->timerChannel, newOcVal );

			HAL_TIM_OC_Stop_IT(&htim2, targetConf->timerChannel); //Turn off output phase angle control, just in case
			HAL_TIM_OC_Start_IT(&htim1, targetConf->timerChannel); //Turn on output on-off ctrl
		}
		targetConf->isSet = true;
 8002588:	2301      	movs	r3, #1
 800258a:	7523      	strb	r3, [r4, #20]
	}
	return 0;
}
 800258c:	2000      	movs	r0, #0
 800258e:	b002      	add	sp, #8
 8002590:	bd10      	pop	{r4, pc}
			HAL_TIM_OC_Stop_IT(&htim1, targetConf->timerChannel); //Stop on-off control
 8002592:	6901      	ldr	r1, [r0, #16]
 8002594:	4829      	ldr	r0, [pc, #164]	; (800263c <updateLoad+0x11c>)
 8002596:	f003 f977 	bl	8005888 <HAL_TIM_OC_Stop_IT>
			HAL_TIM_OC_Stop_IT(&htim2, targetConf->timerChannel); //Stop phase angle control
 800259a:	6921      	ldr	r1, [r4, #16]
 800259c:	4826      	ldr	r0, [pc, #152]	; (8002638 <updateLoad+0x118>)
 800259e:	f003 f973 	bl	8005888 <HAL_TIM_OC_Stop_IT>
			HAL_GPIO_WritePin(targetConf->GPIO_Port, targetConf->GPIO_Pin, GPIO_PIN_SET);
 80025a2:	68a0      	ldr	r0, [r4, #8]
 80025a4:	89a1      	ldrh	r1, [r4, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	b289      	uxth	r1, r1
 80025aa:	f001 fa24 	bl	80039f6 <HAL_GPIO_WritePin>
 80025ae:	e7eb      	b.n	8002588 <updateLoad+0x68>
			__HAL_TIM_SET_COMPARE(&htim2, targetConf->timerChannel, newOcVal );
 80025b0:	6923      	ldr	r3, [r4, #16]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d006      	beq.n	80025c4 <updateLoad+0xa4>
 80025b6:	6923      	ldr	r3, [r4, #16]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d007      	beq.n	80025cc <updateLoad+0xac>
 80025bc:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <updateLoad+0x118>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6418      	str	r0, [r3, #64]	; 0x40
 80025c2:	e7ca      	b.n	800255a <updateLoad+0x3a>
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <updateLoad+0x118>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6398      	str	r0, [r3, #56]	; 0x38
 80025ca:	e7c6      	b.n	800255a <updateLoad+0x3a>
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <updateLoad+0x118>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	63d8      	str	r0, [r3, #60]	; 0x3c
 80025d2:	e7c2      	b.n	800255a <updateLoad+0x3a>
		} else if (targetConf->mode == onoffCtrl) {
 80025d4:	7843      	ldrb	r3, [r0, #1]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d1d5      	bne.n	8002588 <updateLoad+0x68>
			newOcVal = map(targetConf->powerPercent, 1, 99, (htim1.Init.Period / 2), 1) * 2; //divide and multiply by 2 to make sure it is an even number
 80025dc:	6840      	ldr	r0, [r0, #4]
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <updateLoad+0x11c>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2101      	movs	r1, #1
 80025e4:	9100      	str	r1, [sp, #0]
 80025e6:	40cb      	lsrs	r3, r1
 80025e8:	2263      	movs	r2, #99	; 0x63
 80025ea:	f7ff ff35 	bl	8002458 <map>
 80025ee:	0040      	lsls	r0, r0, #1
 80025f0:	b280      	uxth	r0, r0
			__HAL_TIM_SET_COMPARE(&htim1, targetConf->timerChannel, newOcVal );
 80025f2:	6923      	ldr	r3, [r4, #16]
 80025f4:	b95b      	cbnz	r3, 800260e <updateLoad+0xee>
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <updateLoad+0x11c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6358      	str	r0, [r3, #52]	; 0x34
			HAL_TIM_OC_Stop_IT(&htim2, targetConf->timerChannel); //Turn off output phase angle control, just in case
 80025fc:	6921      	ldr	r1, [r4, #16]
 80025fe:	480e      	ldr	r0, [pc, #56]	; (8002638 <updateLoad+0x118>)
 8002600:	f003 f942 	bl	8005888 <HAL_TIM_OC_Stop_IT>
			HAL_TIM_OC_Start_IT(&htim1, targetConf->timerChannel); //Turn on output on-off ctrl
 8002604:	6921      	ldr	r1, [r4, #16]
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <updateLoad+0x11c>)
 8002608:	f003 f8ae 	bl	8005768 <HAL_TIM_OC_Start_IT>
 800260c:	e7bc      	b.n	8002588 <updateLoad+0x68>
			__HAL_TIM_SET_COMPARE(&htim1, targetConf->timerChannel, newOcVal );
 800260e:	6923      	ldr	r3, [r4, #16]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d006      	beq.n	8002622 <updateLoad+0x102>
 8002614:	6923      	ldr	r3, [r4, #16]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d007      	beq.n	800262a <updateLoad+0x10a>
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <updateLoad+0x11c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6418      	str	r0, [r3, #64]	; 0x40
 8002620:	e7ec      	b.n	80025fc <updateLoad+0xdc>
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <updateLoad+0x11c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6398      	str	r0, [r3, #56]	; 0x38
 8002628:	e7e8      	b.n	80025fc <updateLoad+0xdc>
 800262a:	4b04      	ldr	r3, [pc, #16]	; (800263c <updateLoad+0x11c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	63d8      	str	r0, [r3, #60]	; 0x3c
 8002630:	e7e4      	b.n	80025fc <updateLoad+0xdc>
}
 8002632:	2000      	movs	r0, #0
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000658 	.word	0x20000658
 800263c:	200005b4 	.word	0x200005b4

08002640 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * TIM1 is used for onoff control mode, The timer uses the ZC events as clock source (every ZC the counter is incremented)
 * The timer period equals the amount of half sine wave present in a full onoff cycle.
 * The OC value determines the moment when the triac is turned on, setting the OC at half the onoff cycle period results in 50% power.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002640:	b508      	push	{r3, lr}
	if (htim->Instance == TIM2) {
 8002642:	6803      	ldr	r3, [r0, #0]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002648:	d003      	beq.n	8002652 <HAL_TIM_OC_DelayElapsedCallback+0x12>
			HAL_GPIO_WritePin(J3_GPIO_Port, J3_Pin, GPIO_PIN_SET);
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
			HAL_GPIO_WritePin(J4_GPIO_Port, J4_Pin, GPIO_PIN_SET);
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
			HAL_GPIO_WritePin(J5_GPIO_Port, J5_Pin, GPIO_PIN_SET);
	} else if (htim->Instance == TIM1) {
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d01b      	beq.n	8002688 <HAL_TIM_OC_DelayElapsedCallback+0x48>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
			HAL_GPIO_WritePin(J4_GPIO_Port, J4_Pin, GPIO_PIN_SET);
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
			HAL_GPIO_WritePin(J5_GPIO_Port, J5_Pin, GPIO_PIN_SET);
	}
}
 8002650:	bd08      	pop	{r3, pc}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002652:	7f03      	ldrb	r3, [r0, #28]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d00a      	beq.n	800266e <HAL_TIM_OC_DelayElapsedCallback+0x2e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002658:	2b04      	cmp	r3, #4
 800265a:	d00e      	beq.n	800267a <HAL_TIM_OC_DelayElapsedCallback+0x3a>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800265c:	2b08      	cmp	r3, #8
 800265e:	d1f7      	bne.n	8002650 <HAL_TIM_OC_DelayElapsedCallback+0x10>
			HAL_GPIO_WritePin(J5_GPIO_Port, J5_Pin, GPIO_PIN_SET);
 8002660:	2201      	movs	r2, #1
 8002662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002666:	4817      	ldr	r0, [pc, #92]	; (80026c4 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002668:	f001 f9c5 	bl	80039f6 <HAL_GPIO_WritePin>
 800266c:	e7f0      	b.n	8002650 <HAL_TIM_OC_DelayElapsedCallback+0x10>
			HAL_GPIO_WritePin(J3_GPIO_Port, J3_Pin, GPIO_PIN_SET);
 800266e:	2201      	movs	r2, #1
 8002670:	2102      	movs	r1, #2
 8002672:	4815      	ldr	r0, [pc, #84]	; (80026c8 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002674:	f001 f9bf 	bl	80039f6 <HAL_GPIO_WritePin>
 8002678:	e7ea      	b.n	8002650 <HAL_TIM_OC_DelayElapsedCallback+0x10>
			HAL_GPIO_WritePin(J4_GPIO_Port, J4_Pin, GPIO_PIN_SET);
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002680:	4810      	ldr	r0, [pc, #64]	; (80026c4 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002682:	f001 f9b8 	bl	80039f6 <HAL_GPIO_WritePin>
 8002686:	e7e3      	b.n	8002650 <HAL_TIM_OC_DelayElapsedCallback+0x10>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002688:	7f03      	ldrb	r3, [r0, #28]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d00a      	beq.n	80026a4 <HAL_TIM_OC_DelayElapsedCallback+0x64>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800268e:	2b04      	cmp	r3, #4
 8002690:	d00e      	beq.n	80026b0 <HAL_TIM_OC_DelayElapsedCallback+0x70>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8002692:	2b08      	cmp	r3, #8
 8002694:	d1dc      	bne.n	8002650 <HAL_TIM_OC_DelayElapsedCallback+0x10>
			HAL_GPIO_WritePin(J5_GPIO_Port, J5_Pin, GPIO_PIN_SET);
 8002696:	2201      	movs	r2, #1
 8002698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800269c:	4809      	ldr	r0, [pc, #36]	; (80026c4 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800269e:	f001 f9aa 	bl	80039f6 <HAL_GPIO_WritePin>
}
 80026a2:	e7d5      	b.n	8002650 <HAL_TIM_OC_DelayElapsedCallback+0x10>
			HAL_GPIO_WritePin(J3_GPIO_Port, J3_Pin, GPIO_PIN_SET);
 80026a4:	2201      	movs	r2, #1
 80026a6:	2102      	movs	r1, #2
 80026a8:	4807      	ldr	r0, [pc, #28]	; (80026c8 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80026aa:	f001 f9a4 	bl	80039f6 <HAL_GPIO_WritePin>
 80026ae:	e7cf      	b.n	8002650 <HAL_TIM_OC_DelayElapsedCallback+0x10>
			HAL_GPIO_WritePin(J4_GPIO_Port, J4_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b6:	4803      	ldr	r0, [pc, #12]	; (80026c4 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80026b8:	f001 f99d 	bl	80039f6 <HAL_GPIO_WritePin>
 80026bc:	e7c8      	b.n	8002650 <HAL_TIM_OC_DelayElapsedCallback+0x10>
 80026be:	bf00      	nop
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40010c00 	.word	0x40010c00
 80026c8:	40010800 	.word	0x40010800

080026cc <HAL_TIM_PeriodElapsedCallback>:
 *  Turn off output if phase angle trigger delay has expired or the end of a onoff cycle, do not turn off output at power=100%
 *  Note the triac in phaseAngleCtrl mode is turned off before the end of the period, this does not matter because the
 *  NOTE!: Triac's keep conducting until current reaches zero, with non resistive loads the control pulse length might need to be decreased.
 */
//End of triac control pulse window, turn off triacs before next ZC event (Note triac keeps conducting untill ZC)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80026cc:	b508      	push	{r3, lr}
	if (htim->Instance == TIM2) {
 80026ce:	6803      	ldr	r3, [r0, #0]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d4:	d003      	beq.n	80026de <HAL_TIM_PeriodElapsedCallback+0x12>
			HAL_GPIO_WritePin(J3_Conf.GPIO_Port, J3_Conf.GPIO_Pin, GPIO_PIN_RESET);
		if (J4_Conf.powerPercent != 100 && J4_Conf.mode == phaseAngleCtrl )
			HAL_GPIO_WritePin(J4_Conf.GPIO_Port, J4_Conf.GPIO_Pin, GPIO_PIN_RESET);
		if (J5_Conf.powerPercent != 100 && J5_Conf.mode == phaseAngleCtrl )
			HAL_GPIO_WritePin(J5_Conf.GPIO_Port, J5_Conf.GPIO_Pin, GPIO_PIN_RESET);
	} else if (htim->Instance == TIM1) {
 80026d6:	4a32      	ldr	r2, [pc, #200]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d02e      	beq.n	800273a <HAL_TIM_PeriodElapsedCallback+0x6e>
		if (J4_Conf.powerPercent != 100 && J4_Conf.mode == onoffCtrl )
			HAL_GPIO_WritePin(J4_Conf.GPIO_Port, J4_Conf.GPIO_Pin, GPIO_PIN_RESET);
		if (J5_Conf.powerPercent != 100 && J5_Conf.mode == onoffCtrl )
			HAL_GPIO_WritePin(J5_Conf.GPIO_Port, J5_Conf.GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80026dc:	bd08      	pop	{r3, pc}
		if (J3_Conf.powerPercent != 100 && J3_Conf.mode == phaseAngleCtrl )
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d002      	beq.n	80026ec <HAL_TIM_PeriodElapsedCallback+0x20>
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	b1b3      	cbz	r3, 800271a <HAL_TIM_PeriodElapsedCallback+0x4e>
		if (J4_Conf.powerPercent != 100 && J4_Conf.mode == phaseAngleCtrl )
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	d002      	beq.n	80026fa <HAL_TIM_PeriodElapsedCallback+0x2e>
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	b1bb      	cbz	r3, 800272a <HAL_TIM_PeriodElapsedCallback+0x5e>
		if (J5_Conf.powerPercent != 100 && J5_Conf.mode == phaseAngleCtrl )
 80026fa:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d0ec      	beq.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x10>
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e8      	bne.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x10>
			HAL_GPIO_WritePin(J5_Conf.GPIO_Port, J5_Conf.GPIO_Pin, GPIO_PIN_RESET);
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800270c:	6898      	ldr	r0, [r3, #8]
 800270e:	8999      	ldrh	r1, [r3, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	b289      	uxth	r1, r1
 8002714:	f001 f96f 	bl	80039f6 <HAL_GPIO_WritePin>
 8002718:	e7e0      	b.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x10>
			HAL_GPIO_WritePin(J3_Conf.GPIO_Port, J3_Conf.GPIO_Pin, GPIO_PIN_RESET);
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800271c:	6898      	ldr	r0, [r3, #8]
 800271e:	8999      	ldrh	r1, [r3, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	b289      	uxth	r1, r1
 8002724:	f001 f967 	bl	80039f6 <HAL_GPIO_WritePin>
 8002728:	e7e0      	b.n	80026ec <HAL_TIM_PeriodElapsedCallback+0x20>
			HAL_GPIO_WritePin(J4_Conf.GPIO_Port, J4_Conf.GPIO_Pin, GPIO_PIN_RESET);
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800272c:	6898      	ldr	r0, [r3, #8]
 800272e:	8999      	ldrh	r1, [r3, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	b289      	uxth	r1, r1
 8002734:	f001 f95f 	bl	80039f6 <HAL_GPIO_WritePin>
 8002738:	e7df      	b.n	80026fa <HAL_TIM_PeriodElapsedCallback+0x2e>
		if (J3_Conf.powerPercent != 100 && J3_Conf.mode == onoffCtrl )
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d004      	beq.n	800274c <HAL_TIM_PeriodElapsedCallback+0x80>
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d019      	beq.n	8002780 <HAL_TIM_PeriodElapsedCallback+0xb4>
		if (J4_Conf.powerPercent != 100 && J4_Conf.mode == onoffCtrl )
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b64      	cmp	r3, #100	; 0x64
 8002752:	d004      	beq.n	800275e <HAL_TIM_PeriodElapsedCallback+0x92>
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d018      	beq.n	8002790 <HAL_TIM_PeriodElapsedCallback+0xc4>
		if (J5_Conf.powerPercent != 100 && J5_Conf.mode == onoffCtrl )
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d0ba      	beq.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x10>
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d1b5      	bne.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x10>
			HAL_GPIO_WritePin(J5_Conf.GPIO_Port, J5_Conf.GPIO_Pin, GPIO_PIN_RESET);
 8002770:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002772:	6898      	ldr	r0, [r3, #8]
 8002774:	8999      	ldrh	r1, [r3, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	b289      	uxth	r1, r1
 800277a:	f001 f93c 	bl	80039f6 <HAL_GPIO_WritePin>
}
 800277e:	e7ad      	b.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x10>
			HAL_GPIO_WritePin(J3_Conf.GPIO_Port, J3_Conf.GPIO_Pin, GPIO_PIN_RESET);
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002782:	6898      	ldr	r0, [r3, #8]
 8002784:	8999      	ldrh	r1, [r3, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	b289      	uxth	r1, r1
 800278a:	f001 f934 	bl	80039f6 <HAL_GPIO_WritePin>
 800278e:	e7dd      	b.n	800274c <HAL_TIM_PeriodElapsedCallback+0x80>
			HAL_GPIO_WritePin(J4_Conf.GPIO_Port, J4_Conf.GPIO_Pin, GPIO_PIN_RESET);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002792:	6898      	ldr	r0, [r3, #8]
 8002794:	8999      	ldrh	r1, [r3, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	b289      	uxth	r1, r1
 800279a:	f001 f92c 	bl	80039f6 <HAL_GPIO_WritePin>
 800279e:	e7de      	b.n	800275e <HAL_TIM_PeriodElapsedCallback+0x92>
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	20000004 	.word	0x20000004
 80027a8:	2000001c 	.word	0x2000001c
 80027ac:	20000034 	.word	0x20000034

080027b0 <HAL_TIM_IC_CaptureCallback>:
 * TIM3 is used to measure the mains frequency. And turn on load if power setting is 100%
 * The ZC event is timestamped using input capture mode of this timer and the period between
 * two event is calculated to determine the frequency.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM3) {
 80027b0:	6802      	ldr	r2, [r0, #0]
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d000      	beq.n	80027ba <HAL_TIM_IC_CaptureCallback+0xa>
 80027b8:	4770      	bx	lr
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80027ba:	b510      	push	{r4, lr}
		/* Update load configurations at ZC event*/
		updateLoad(&J3_Conf);
 80027bc:	4c20      	ldr	r4, [pc, #128]	; (8002840 <HAL_TIM_IC_CaptureCallback+0x90>)
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff feae 	bl	8002520 <updateLoad>
		updateLoad(&J4_Conf);
 80027c4:	481f      	ldr	r0, [pc, #124]	; (8002844 <HAL_TIM_IC_CaptureCallback+0x94>)
 80027c6:	f7ff feab 	bl	8002520 <updateLoad>
		updateLoad(&J5_Conf);
 80027ca:	481f      	ldr	r0, [pc, #124]	; (8002848 <HAL_TIM_IC_CaptureCallback+0x98>)
 80027cc:	f7ff fea8 	bl	8002520 <updateLoad>

		/*If power setting is 100%, turn on load at ZC event*/
		if (J3_Conf.powerPercent == 100 )
 80027d0:	6863      	ldr	r3, [r4, #4]
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d01a      	beq.n	800280c <HAL_TIM_IC_CaptureCallback+0x5c>
			HAL_GPIO_WritePin(J3_Conf.GPIO_Port, J3_Conf.GPIO_Pin, GPIO_PIN_SET);
		if (J4_Conf.powerPercent == 100 )
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_TIM_IC_CaptureCallback+0x94>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d01d      	beq.n	800281a <HAL_TIM_IC_CaptureCallback+0x6a>
			HAL_GPIO_WritePin(J4_Conf.GPIO_Port, J4_Conf.GPIO_Pin, GPIO_PIN_SET);
		if (J5_Conf.powerPercent == 100 )
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_TIM_IC_CaptureCallback+0x98>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d021      	beq.n	800282a <HAL_TIM_IC_CaptureCallback+0x7a>
			HAL_GPIO_WritePin(J5_Conf.GPIO_Port, J5_Conf.GPIO_Pin, GPIO_PIN_SET);

		/* Calculate mains frequency */
		zcIcPrev = zcIcCurr;
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	4a19      	ldr	r2, [pc, #100]	; (8002850 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80027ec:	6011      	str	r1, [r2, #0]
		zcIcCurr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 80027ee:	4919      	ldr	r1, [pc, #100]	; (8002854 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80027f0:	6809      	ldr	r1, [r1, #0]
 80027f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80027f4:	6019      	str	r1, [r3, #0]

		if (zcIcCurr >= zcIcPrev) {
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	4299      	cmp	r1, r3
 80027fc:	d305      	bcc.n	800280a <HAL_TIM_IC_CaptureCallback+0x5a>
			mainsPeriod = zcIcCurr - zcIcPrev;
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	4a14      	ldr	r2, [pc, #80]	; (8002858 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002808:	6013      	str	r3, [r2, #0]
		} else {
			//Timer overflowed in between captures,
			//Do nothing, just calculate next capture without ovf
		}
	}
}
 800280a:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(J3_Conf.GPIO_Port, J3_Conf.GPIO_Pin, GPIO_PIN_SET);
 800280c:	68a0      	ldr	r0, [r4, #8]
 800280e:	89a1      	ldrh	r1, [r4, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	b289      	uxth	r1, r1
 8002814:	f001 f8ef 	bl	80039f6 <HAL_GPIO_WritePin>
 8002818:	e7dd      	b.n	80027d6 <HAL_TIM_IC_CaptureCallback+0x26>
			HAL_GPIO_WritePin(J4_Conf.GPIO_Port, J4_Conf.GPIO_Pin, GPIO_PIN_SET);
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_TIM_IC_CaptureCallback+0x94>)
 800281c:	6898      	ldr	r0, [r3, #8]
 800281e:	8999      	ldrh	r1, [r3, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	b289      	uxth	r1, r1
 8002824:	f001 f8e7 	bl	80039f6 <HAL_GPIO_WritePin>
 8002828:	e7d9      	b.n	80027de <HAL_TIM_IC_CaptureCallback+0x2e>
			HAL_GPIO_WritePin(J5_Conf.GPIO_Port, J5_Conf.GPIO_Pin, GPIO_PIN_SET);
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_TIM_IC_CaptureCallback+0x98>)
 800282c:	6898      	ldr	r0, [r3, #8]
 800282e:	8999      	ldrh	r1, [r3, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	b289      	uxth	r1, r1
 8002834:	f001 f8df 	bl	80039f6 <HAL_GPIO_WritePin>
 8002838:	e7d5      	b.n	80027e6 <HAL_TIM_IC_CaptureCallback+0x36>
 800283a:	bf00      	nop
 800283c:	40000400 	.word	0x40000400
 8002840:	20000004 	.word	0x20000004
 8002844:	2000001c 	.word	0x2000001c
 8002848:	20000034 	.word	0x20000034
 800284c:	200002ec 	.word	0x200002ec
 8002850:	200002f0 	.word	0x200002f0
 8002854:	20000504 	.word	0x20000504
 8002858:	20000264 	.word	0x20000264

0800285c <JumpToBootloader>:

void JumpToBootloader(void) {
 800285c:	b500      	push	{lr}
 800285e:	b083      	sub	sp, #12

void (*SysMemBootJump)(void);
volatile uint32_t addr = 0x1FFFF000;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <JumpToBootloader+0x2c>)
 8002862:	9301      	str	r3, [sp, #4]
/**
* Step: Disable RCC, set it to default (after reset) settings
* Internal clock, no PLL, etc.
*/
#if defined(USE_HAL_DRIVER)
HAL_RCC_DeInit();
 8002864:	f001 f8f0 	bl	8003a48 <HAL_RCC_DeInit>
#endif /* defined(USE_STDPERIPH_DRIVER) */

/**
* Step: Disable systick timer and reset it to default values
*/
SysTick->CTRL = 0;
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <JumpToBootloader+0x30>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
SysTick->LOAD = 0;
 800286e:	605a      	str	r2, [r3, #4]
SysTick->VAL = 0;
 8002870:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8002872:	b672      	cpsid	i

/**
* Step: Set jump memory location for system memory
* Use address with 4 bytes offset which specifies jump location where program starts
*/
SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
* This step must be done last otherwise local variables in this function
* don't have proper value since stack pointer is located on different position
*
* Set direct address location which specifies stack pointer in SRAM location
*/
__set_MSP(*(uint32_t *)addr);
 8002878:	9a01      	ldr	r2, [sp, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800287c:	f382 8808 	msr	MSP, r2

SysMemBootJump();
 8002880:	4798      	blx	r3
}
 8002882:	b003      	add	sp, #12
 8002884:	f85d fb04 	ldr.w	pc, [sp], #4
 8002888:	1ffff000 	.word	0x1ffff000
 800288c:	e000e010 	.word	0xe000e010

08002890 <main>:
{
 8002890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002894:	b099      	sub	sp, #100	; 0x64
	if( rtc_read_backup_reg(DFU_FLG_BKU_REG) == DFU_FLG) JumpToBootloader();
 8002896:	2001      	movs	r0, #1
 8002898:	f7ff fe04 	bl	80024a4 <rtc_read_backup_reg>
 800289c:	2879      	cmp	r0, #121	; 0x79
 800289e:	f000 80bb 	beq.w	8002a18 <main+0x188>
  HAL_Init();
 80028a2:	f000 fddf 	bl	8003464 <HAL_Init>
  SystemClock_Config();
 80028a6:	f7ff fcd5 	bl	8002254 <SystemClock_Config>
  MX_GPIO_Init();
 80028aa:	f7ff f811 	bl	80018d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80028ae:	f7ff f8af 	bl	8001a10 <MX_SPI1_Init>
  MX_TIM2_Init();
 80028b2:	f7ff f8cd 	bl	8001a50 <MX_TIM2_Init>
  MX_TIM4_Init();
 80028b6:	f7ff f929 	bl	8001b0c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80028ba:	f7ff f96b 	bl	8001b94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80028be:	f7ff f97f 	bl	8001bc0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80028c2:	f7ff f993 	bl	8001bec <MX_TIM3_Init>
  MX_TIM1_Init();
 80028c6:	f7ff f9db 	bl	8001c80 <MX_TIM1_Init>
  MX_RTC_Init();
 80028ca:	f7ff fa37 	bl	8001d3c <MX_RTC_Init>
	printf("Hello I'm the Reflow oven Control Board\n");
 80028ce:	48a5      	ldr	r0, [pc, #660]	; (8002b64 <main+0x2d4>)
 80028d0:	f004 fa60 	bl	8006d94 <puts>
	printf("For all commands type 'help'\n");
 80028d4:	48a4      	ldr	r0, [pc, #656]	; (8002b68 <main+0x2d8>)
 80028d6:	f004 fa5d 	bl	8006d94 <puts>
	printf("Firmware compiled on %s %s\n\n", __DATE__, __TIME__);
 80028da:	4aa4      	ldr	r2, [pc, #656]	; (8002b6c <main+0x2dc>)
 80028dc:	49a4      	ldr	r1, [pc, #656]	; (8002b70 <main+0x2e0>)
 80028de:	48a5      	ldr	r0, [pc, #660]	; (8002b74 <main+0x2e4>)
 80028e0:	f004 f9d2 	bl	8006c88 <iprintf>
	trace("NOTE DEBUG MODE ACTIVE\n\n");
 80028e4:	48a4      	ldr	r0, [pc, #656]	; (8002b78 <main+0x2e8>)
 80028e6:	f004 fa55 	bl	8006d94 <puts>
	CLI_AddCmd("help", "Shows all cmd's", 0, CLI_Help);
 80028ea:	4ba4      	ldr	r3, [pc, #656]	; (8002b7c <main+0x2ec>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	49a4      	ldr	r1, [pc, #656]	; (8002b80 <main+0x2f0>)
 80028f0:	48a4      	ldr	r0, [pc, #656]	; (8002b84 <main+0x2f4>)
 80028f2:	f7fe fe71 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("reset", "Reset the device", 0, cmd_Reset);
 80028f6:	4ba4      	ldr	r3, [pc, #656]	; (8002b88 <main+0x2f8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	49a4      	ldr	r1, [pc, #656]	; (8002b8c <main+0x2fc>)
 80028fc:	48a4      	ldr	r0, [pc, #656]	; (8002b90 <main+0x300>)
 80028fe:	f7fe fe6b 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("page", "Go to page nextion", 1, setPage);
 8002902:	4ba4      	ldr	r3, [pc, #656]	; (8002b94 <main+0x304>)
 8002904:	2201      	movs	r2, #1
 8002906:	49a4      	ldr	r1, [pc, #656]	; (8002b98 <main+0x308>)
 8002908:	48a4      	ldr	r0, [pc, #656]	; (8002b9c <main+0x30c>)
 800290a:	f7fe fe65 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("spiWrite", "write reg", 2, cmd_MAX31865_RegisterWrite);
 800290e:	4ca4      	ldr	r4, [pc, #656]	; (8002ba0 <main+0x310>)
 8002910:	4ba4      	ldr	r3, [pc, #656]	; (8002ba4 <main+0x314>)
 8002912:	2202      	movs	r2, #2
 8002914:	4621      	mov	r1, r4
 8002916:	48a4      	ldr	r0, [pc, #656]	; (8002ba8 <main+0x318>)
 8002918:	f7fe fe5e 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("spiRead", "write reg", 1, cmd_MAX31865_RegisterRead);
 800291c:	4ba3      	ldr	r3, [pc, #652]	; (8002bac <main+0x31c>)
 800291e:	2201      	movs	r2, #1
 8002920:	4621      	mov	r1, r4
 8002922:	48a3      	ldr	r0, [pc, #652]	; (8002bb0 <main+0x320>)
 8002924:	f7fe fe58 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("pt100", "get temp", 0, cmd_MAX31865_temp);
 8002928:	4ba2      	ldr	r3, [pc, #648]	; (8002bb4 <main+0x324>)
 800292a:	2200      	movs	r2, #0
 800292c:	49a2      	ldr	r1, [pc, #648]	; (8002bb8 <main+0x328>)
 800292e:	48a3      	ldr	r0, [pc, #652]	; (8002bbc <main+0x32c>)
 8002930:	f7fe fe52 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("relay", "Turn power relay on/off $p1 'on', 'off'", 1, cmd_setRelay);
 8002934:	4ba2      	ldr	r3, [pc, #648]	; (8002bc0 <main+0x330>)
 8002936:	2201      	movs	r2, #1
 8002938:	49a2      	ldr	r1, [pc, #648]	; (8002bc4 <main+0x334>)
 800293a:	48a3      	ldr	r0, [pc, #652]	; (8002bc8 <main+0x338>)
 800293c:	f7fe fe4c 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("mains", "Get mains frequency", 0, cmd_getMainsFreq);
 8002940:	4ba2      	ldr	r3, [pc, #648]	; (8002bcc <main+0x33c>)
 8002942:	2200      	movs	r2, #0
 8002944:	49a2      	ldr	r1, [pc, #648]	; (8002bd0 <main+0x340>)
 8002946:	48a3      	ldr	r0, [pc, #652]	; (8002bd4 <main+0x344>)
 8002948:	f7fe fe46 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("mode","Target $p1 'J3' 'J4' J5', $p2 ctrlMode 'phase' or 'onoff'", 2, cmd_setMode);
 800294c:	4ba2      	ldr	r3, [pc, #648]	; (8002bd8 <main+0x348>)
 800294e:	2202      	movs	r2, #2
 8002950:	49a2      	ldr	r1, [pc, #648]	; (8002bdc <main+0x34c>)
 8002952:	48a3      	ldr	r0, [pc, #652]	; (8002be0 <main+0x350>)
 8002954:	f7fe fe40 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("set","Target $p1 'J3' 'J4' J5', $p2 power percentage '0'-'100'", 2, cmd_setPower);
 8002958:	4ba2      	ldr	r3, [pc, #648]	; (8002be4 <main+0x354>)
 800295a:	2202      	movs	r2, #2
 800295c:	49a2      	ldr	r1, [pc, #648]	; (8002be8 <main+0x358>)
 800295e:	48a3      	ldr	r0, [pc, #652]	; (8002bec <main+0x35c>)
 8002960:	f7fe fe3a 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("led", "%p1 'on' 'off' 'toggle'", 1, cmd_led);
 8002964:	4ba2      	ldr	r3, [pc, #648]	; (8002bf0 <main+0x360>)
 8002966:	2201      	movs	r2, #1
 8002968:	49a2      	ldr	r1, [pc, #648]	; (8002bf4 <main+0x364>)
 800296a:	48a3      	ldr	r0, [pc, #652]	; (8002bf8 <main+0x368>)
 800296c:	f7fe fe34 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("setpoint", "change target setpoint", 1, cmd_setSetpoint );
 8002970:	4ba2      	ldr	r3, [pc, #648]	; (8002bfc <main+0x36c>)
 8002972:	2201      	movs	r2, #1
 8002974:	49a2      	ldr	r1, [pc, #648]	; (8002c00 <main+0x370>)
 8002976:	48a3      	ldr	r0, [pc, #652]	; (8002c04 <main+0x374>)
 8002978:	f7fe fe2e 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("pid", "set pid state 'on' 'off' 'reset'", 1, cmd_setPid );
 800297c:	4ba2      	ldr	r3, [pc, #648]	; (8002c08 <main+0x378>)
 800297e:	2201      	movs	r2, #1
 8002980:	49a2      	ldr	r1, [pc, #648]	; (8002c0c <main+0x37c>)
 8002982:	48a3      	ldr	r0, [pc, #652]	; (8002c10 <main+0x380>)
 8002984:	f7fe fe28 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("tone", "$p1 'duration' $p2 'freq'", 2, cmd_tone );
 8002988:	4ba2      	ldr	r3, [pc, #648]	; (8002c14 <main+0x384>)
 800298a:	2202      	movs	r2, #2
 800298c:	49a2      	ldr	r1, [pc, #648]	; (8002c18 <main+0x388>)
 800298e:	48a3      	ldr	r0, [pc, #652]	; (8002c1c <main+0x38c>)
 8002990:	f7fe fe22 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("bridge", "bridge nextion uart to usb. $p1 bridge timeout in seconds, use 31250 or lower firmware upload baudrate nextion", 1, cmd_dispProgMode);
 8002994:	4ba2      	ldr	r3, [pc, #648]	; (8002c20 <main+0x390>)
 8002996:	2201      	movs	r2, #1
 8002998:	49a2      	ldr	r1, [pc, #648]	; (8002c24 <main+0x394>)
 800299a:	48a3      	ldr	r0, [pc, #652]	; (8002c28 <main+0x398>)
 800299c:	f7fe fe1c 	bl	80015d8 <CLI_AddCmd>
	CLI_AddCmd("dfu", "Enter STM32 Bootloader, Use STM32CubeProgrammer UART mode for programming", 0, cmd_dfu);
 80029a0:	4ba2      	ldr	r3, [pc, #648]	; (8002c2c <main+0x39c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	49a2      	ldr	r1, [pc, #648]	; (8002c30 <main+0x3a0>)
 80029a6:	48a3      	ldr	r0, [pc, #652]	; (8002c34 <main+0x3a4>)
 80029a8:	f7fe fe16 	bl	80015d8 <CLI_AddCmd>
	PID.Kp = PID_PARAM_KP;        /* Proporcional */
 80029ac:	48a2      	ldr	r0, [pc, #648]	; (8002c38 <main+0x3a8>)
 80029ae:	4ba3      	ldr	r3, [pc, #652]	; (8002c3c <main+0x3ac>)
 80029b0:	6183      	str	r3, [r0, #24]
	PID.Ki = PID_PARAM_KI;        /* Integral */
 80029b2:	4ba3      	ldr	r3, [pc, #652]	; (8002c40 <main+0x3b0>)
 80029b4:	61c3      	str	r3, [r0, #28]
	PID.Kd = PID_PARAM_KD;        /* Derivative */
 80029b6:	4ba3      	ldr	r3, [pc, #652]	; (8002c44 <main+0x3b4>)
 80029b8:	6203      	str	r3, [r0, #32]
	arm_pid_init_f32(&PID, 1);
 80029ba:	2101      	movs	r1, #1
 80029bc:	f003 fca0 	bl	8006300 <arm_pid_init_f32>
	Max31865_init(&pt100, &hspi1, CS2_GPIO_Port, CS2_Pin, 3, 50);
 80029c0:	2332      	movs	r3, #50	; 0x32
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	2303      	movs	r3, #3
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029cc:	4a9e      	ldr	r2, [pc, #632]	; (8002c48 <main+0x3b8>)
 80029ce:	499f      	ldr	r1, [pc, #636]	; (8002c4c <main+0x3bc>)
 80029d0:	489f      	ldr	r0, [pc, #636]	; (8002c50 <main+0x3c0>)
 80029d2:	f7fe fcb4 	bl	800133e <Max31865_init>
	HAL_TIM_Base_Start_IT(&htim2); //ZC event input trigger and Phase control timer (Timer event trigger output used to sync TIM1 and TIM3)
 80029d6:	489f      	ldr	r0, [pc, #636]	; (8002c54 <main+0x3c4>)
 80029d8:	f002 fa72 	bl	8004ec0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3); //Mains frequency measurement timebase
 80029dc:	4c9e      	ldr	r4, [pc, #632]	; (8002c58 <main+0x3c8>)
 80029de:	4620      	mov	r0, r4
 80029e0:	f002 fa40 	bl	8004e64 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); //Input capture used for sampling mains frequency
 80029e4:	2100      	movs	r1, #0
 80029e6:	4620      	mov	r0, r4
 80029e8:	f003 f862 	bl	8005ab0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1); //on-off AC control timer
 80029ec:	489b      	ldr	r0, [pc, #620]	; (8002c5c <main+0x3cc>)
 80029ee:	f002 fa67 	bl	8004ec0 <HAL_TIM_Base_Start_IT>
	nextionWakeup();
 80029f2:	f7fe ff17 	bl	8001824 <nextionWakeup>
	UART1_START_RX_IT();
 80029f6:	4b9a      	ldr	r3, [pc, #616]	; (8002c60 <main+0x3d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2201      	movs	r2, #1
 80029fc:	4999      	ldr	r1, [pc, #612]	; (8002c64 <main+0x3d4>)
 80029fe:	4419      	add	r1, r3
 8002a00:	4899      	ldr	r0, [pc, #612]	; (8002c68 <main+0x3d8>)
 8002a02:	f003 fc5a 	bl	80062ba <HAL_UART_Receive_IT>
	UART2_START_RX_IT();
 8002a06:	4b99      	ldr	r3, [pc, #612]	; (8002c6c <main+0x3dc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4998      	ldr	r1, [pc, #608]	; (8002c70 <main+0x3e0>)
 8002a0e:	4419      	add	r1, r3
 8002a10:	4898      	ldr	r0, [pc, #608]	; (8002c74 <main+0x3e4>)
 8002a12:	f003 fc52 	bl	80062ba <HAL_UART_Receive_IT>
 8002a16:	e04d      	b.n	8002ab4 <main+0x224>
	if( rtc_read_backup_reg(DFU_FLG_BKU_REG) == DFU_FLG) JumpToBootloader();
 8002a18:	f7ff ff20 	bl	800285c <JumpToBootloader>
 8002a1c:	e741      	b.n	80028a2 <main+0x12>
			pt100isOK = Max31865_readTempC(&pt100,&t); //Temp variable t used even when invalid TODO
 8002a1e:	4996      	ldr	r1, [pc, #600]	; (8002c78 <main+0x3e8>)
 8002a20:	488b      	ldr	r0, [pc, #556]	; (8002c50 <main+0x3c0>)
 8002a22:	f7fe fcc1 	bl	80013a8 <Max31865_readTempC>
 8002a26:	4b95      	ldr	r3, [pc, #596]	; (8002c7c <main+0x3ec>)
 8002a28:	7018      	strb	r0, [r3, #0]
			if( pt100isOK == true)
 8002a2a:	b170      	cbz	r0, 8002a4a <main+0x1ba>
				pt100Temp = Max31865_Filter(t,pt100Temp,0.1);   //  << For Smoothing data
 8002a2c:	4c94      	ldr	r4, [pc, #592]	; (8002c80 <main+0x3f0>)
 8002a2e:	4a95      	ldr	r2, [pc, #596]	; (8002c84 <main+0x3f4>)
 8002a30:	6821      	ldr	r1, [r4, #0]
 8002a32:	4b91      	ldr	r3, [pc, #580]	; (8002c78 <main+0x3e8>)
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	f7fe fd9b 	bl	8001570 <Max31865_Filter>
 8002a3a:	6020      	str	r0, [r4, #0]
			tempUpdateTime = currTime + tempUpdateInterval;
 8002a3c:	4b92      	ldr	r3, [pc, #584]	; (8002c88 <main+0x3f8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a44:	4a91      	ldr	r2, [pc, #580]	; (8002c8c <main+0x3fc>)
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e047      	b.n	8002ada <main+0x24a>
				printf("temp error detected\n");
 8002a4a:	4891      	ldr	r0, [pc, #580]	; (8002c90 <main+0x400>)
 8002a4c:	f004 f9a2 	bl	8006d94 <puts>
 8002a50:	e7f4      	b.n	8002a3c <main+0x1ac>
		    	printf("%.2f, %i, %.2f\r\n",setpoint, (int)pidOutput, pt100Temp );
 8002a52:	4640      	mov	r0, r8
 8002a54:	f7fd fcf2 	bl	800043c <__aeabi_f2d>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	4638      	mov	r0, r7
 8002a5e:	f7fd fced 	bl	800043c <__aeabi_f2d>
 8002a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a66:	4e8b      	ldr	r6, [pc, #556]	; (8002c94 <main+0x404>)
 8002a68:	6833      	ldr	r3, [r6, #0]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4622      	mov	r2, r4
 8002a6e:	462b      	mov	r3, r5
 8002a70:	4889      	ldr	r0, [pc, #548]	; (8002c98 <main+0x408>)
 8002a72:	f004 f909 	bl	8006c88 <iprintf>
				J3_Conf.powerPercent = pidOutput;
 8002a76:	6831      	ldr	r1, [r6, #0]
 8002a78:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <main+0x40c>)
 8002a7a:	6059      	str	r1, [r3, #4]
				J3_Conf.isSet = false; //update at next ZC
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	751a      	strb	r2, [r3, #20]
				J4_Conf.powerPercent = pidOutput;
 8002a80:	4b87      	ldr	r3, [pc, #540]	; (8002ca0 <main+0x410>)
 8002a82:	6059      	str	r1, [r3, #4]
				J4_Conf.isSet = false; //update at next ZC
 8002a84:	751a      	strb	r2, [r3, #20]
		    pidUpdateTime = currTime + pidUpdateInterval;
 8002a86:	4b80      	ldr	r3, [pc, #512]	; (8002c88 <main+0x3f8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a8e:	4a85      	ldr	r2, [pc, #532]	; (8002ca4 <main+0x414>)
 8002a90:	6013      	str	r3, [r2, #0]
		if( dispUpdateTime <= currTime )
 8002a92:	4b85      	ldr	r3, [pc, #532]	; (8002ca8 <main+0x418>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b7c      	ldr	r3, [pc, #496]	; (8002c88 <main+0x3f8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	f240 8127 	bls.w	8002cee <main+0x45e>
		if (cmdRdyFlg == 1) {
 8002aa0:	4b82      	ldr	r3, [pc, #520]	; (8002cac <main+0x41c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	f000 8149 	beq.w	8002d3c <main+0x4ac>
		if (dispCmdRdyFlg == 1) {
 8002aaa:	4b81      	ldr	r3, [pc, #516]	; (8002cb0 <main+0x420>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f000 8154 	beq.w	8002d5c <main+0x4cc>
		prevTime = currTime;
 8002ab4:	4c7f      	ldr	r4, [pc, #508]	; (8002cb4 <main+0x424>)
 8002ab6:	4d74      	ldr	r5, [pc, #464]	; (8002c88 <main+0x3f8>)
 8002ab8:	682b      	ldr	r3, [r5, #0]
 8002aba:	6023      	str	r3, [r4, #0]
		currTime = HAL_GetTick();
 8002abc:	f000 fcf0 	bl	80034a0 <HAL_GetTick>
 8002ac0:	6028      	str	r0, [r5, #0]
		if( prevTime > currTime )
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	4298      	cmp	r0, r3
 8002ac6:	d202      	bcs.n	8002ace <main+0x23e>
			prevTime = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6023      	str	r3, [r4, #0]
			currTime = 0;
 8002acc:	602b      	str	r3, [r5, #0]
		if( tempUpdateTime <= currTime )
 8002ace:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <main+0x3fc>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <main+0x3f8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d9a1      	bls.n	8002a1e <main+0x18e>
		if( pidUpdateTime <= currTime )
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <main+0x414>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <main+0x3f8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d8d5      	bhi.n	8002a92 <main+0x202>
		    if( pidIsActive ){
 8002ae6:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <main+0x428>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80ea 	beq.w	8002cc4 <main+0x434>
		    	error = setpoint - pt100Temp;
 8002af0:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <main+0x42c>)
 8002af2:	f8d3 8000 	ldr.w	r8, [r3]
 8002af6:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <main+0x3f0>)
 8002af8:	681f      	ldr	r7, [r3, #0]
 8002afa:	4639      	mov	r1, r7
 8002afc:	4640      	mov	r0, r8
 8002afe:	f7fe f841 	bl	8000b84 <__aeabi_fsub>
 8002b02:	4605      	mov	r5, r0
 8002b04:	4b6e      	ldr	r3, [pc, #440]	; (8002cc0 <main+0x430>)
 8002b06:	6018      	str	r0, [r3, #0]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002b08:	4c4b      	ldr	r4, [pc, #300]	; (8002c38 <main+0x3a8>)
 8002b0a:	6821      	ldr	r1, [r4, #0]
 8002b0c:	f7fe f944 	bl	8000d98 <__aeabi_fmul>
 8002b10:	4606      	mov	r6, r0
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002b12:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8002b16:	4649      	mov	r1, r9
 8002b18:	6860      	ldr	r0, [r4, #4]
 8002b1a:	f7fe f93d 	bl	8000d98 <__aeabi_fmul>
 8002b1e:	4601      	mov	r1, r0
    out = (S->A0 * in) +
 8002b20:	4630      	mov	r0, r6
 8002b22:	f7fe f831 	bl	8000b88 <__addsf3>
 8002b26:	4606      	mov	r6, r0
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002b28:	6921      	ldr	r1, [r4, #16]
 8002b2a:	68a0      	ldr	r0, [r4, #8]
 8002b2c:	f7fe f934 	bl	8000d98 <__aeabi_fmul>
 8002b30:	4601      	mov	r1, r0
 8002b32:	4630      	mov	r0, r6
 8002b34:	f7fe f828 	bl	8000b88 <__addsf3>
    out = (S->A0 * in) +
 8002b38:	6961      	ldr	r1, [r4, #20]
 8002b3a:	f7fe f825 	bl	8000b88 <__addsf3>

    /* Update state */
    S->state[1] = S->state[0];
 8002b3e:	f8c4 9010 	str.w	r9, [r4, #16]
    S->state[0] = in;
 8002b42:	60e5      	str	r5, [r4, #12]
    S->state[2] = out;
 8002b44:	6160      	str	r0, [r4, #20]
		    	pidOutput = (uint32_t)round(arm_pid_f32(&PID, error));
 8002b46:	f7fd fc79 	bl	800043c <__aeabi_f2d>
 8002b4a:	f007 f853 	bl	8009bf4 <round>
 8002b4e:	f7fd ffa5 	bl	8000a9c <__aeabi_d2uiz>
 8002b52:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <main+0x404>)
 8002b54:	6018      	str	r0, [r3, #0]
		    	if( pidOutput > 100) pidOutput = 100;
 8002b56:	2864      	cmp	r0, #100	; 0x64
 8002b58:	f67f af7b 	bls.w	8002a52 <main+0x1c2>
 8002b5c:	2264      	movs	r2, #100	; 0x64
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	e777      	b.n	8002a52 <main+0x1c2>
 8002b62:	bf00      	nop
 8002b64:	0800a1cc 	.word	0x0800a1cc
 8002b68:	0800a1f4 	.word	0x0800a1f4
 8002b6c:	0800a214 	.word	0x0800a214
 8002b70:	0800a220 	.word	0x0800a220
 8002b74:	0800a22c 	.word	0x0800a22c
 8002b78:	0800a24c 	.word	0x0800a24c
 8002b7c:	08001759 	.word	0x08001759
 8002b80:	0800a264 	.word	0x0800a264
 8002b84:	0800a274 	.word	0x0800a274
 8002b88:	08002031 	.word	0x08002031
 8002b8c:	0800a27c 	.word	0x0800a27c
 8002b90:	0800a060 	.word	0x0800a060
 8002b94:	08001d61 	.word	0x08001d61
 8002b98:	0800a290 	.word	0x0800a290
 8002b9c:	0800a2a4 	.word	0x0800a2a4
 8002ba0:	0800a2ac 	.word	0x0800a2ac
 8002ba4:	08001d99 	.word	0x08001d99
 8002ba8:	0800a2b8 	.word	0x0800a2b8
 8002bac:	08001e21 	.word	0x08001e21
 8002bb0:	0800a2c4 	.word	0x0800a2c4
 8002bb4:	08001875 	.word	0x08001875
 8002bb8:	0800a2cc 	.word	0x0800a2cc
 8002bbc:	0800a2d8 	.word	0x0800a2d8
 8002bc0:	08001ead 	.word	0x08001ead
 8002bc4:	0800a2e0 	.word	0x0800a2e0
 8002bc8:	0800a308 	.word	0x0800a308
 8002bcc:	08001835 	.word	0x08001835
 8002bd0:	0800a310 	.word	0x0800a310
 8002bd4:	0800a324 	.word	0x0800a324
 8002bd8:	08001ef9 	.word	0x08001ef9
 8002bdc:	0800a32c 	.word	0x0800a32c
 8002be0:	0800a368 	.word	0x0800a368
 8002be4:	0800203d 	.word	0x0800203d
 8002be8:	0800a370 	.word	0x0800a370
 8002bec:	0800a3ac 	.word	0x0800a3ac
 8002bf0:	08001f8d 	.word	0x08001f8d
 8002bf4:	0800a3b0 	.word	0x0800a3b0
 8002bf8:	0800a3c8 	.word	0x0800a3c8
 8002bfc:	080020b1 	.word	0x080020b1
 8002c00:	0800a3cc 	.word	0x0800a3cc
 8002c04:	0800a3e4 	.word	0x0800a3e4
 8002c08:	08001fdd 	.word	0x08001fdd
 8002c0c:	0800a3f0 	.word	0x0800a3f0
 8002c10:	0800a414 	.word	0x0800a414
 8002c14:	080020e1 	.word	0x080020e1
 8002c18:	0800a418 	.word	0x0800a418
 8002c1c:	0800a434 	.word	0x0800a434
 8002c20:	0800211d 	.word	0x0800211d
 8002c24:	0800a43c 	.word	0x0800a43c
 8002c28:	0800a4ac 	.word	0x0800a4ac
 8002c2c:	080024e9 	.word	0x080024e9
 8002c30:	0800a4b4 	.word	0x0800a4b4
 8002c34:	0800a500 	.word	0x0800a500
 8002c38:	200004e0 	.word	0x200004e0
 8002c3c:	3edc28f6 	.word	0x3edc28f6
 8002c40:	3a27c5ac 	.word	0x3a27c5ac
 8002c44:	419c0000 	.word	0x419c0000
 8002c48:	40010800 	.word	0x40010800
 8002c4c:	20000600 	.word	0x20000600
 8002c50:	20000590 	.word	0x20000590
 8002c54:	20000658 	.word	0x20000658
 8002c58:	20000504 	.word	0x20000504
 8002c5c:	200005b4 	.word	0x200005b4
 8002c60:	200002b0 	.word	0x200002b0
 8002c64:	2000027c 	.word	0x2000027c
 8002c68:	2000054c 	.word	0x2000054c
 8002c6c:	200002e8 	.word	0x200002e8
 8002c70:	200002b4 	.word	0x200002b4
 8002c74:	200006a0 	.word	0x200006a0
 8002c78:	20000490 	.word	0x20000490
 8002c7c:	200004dc 	.word	0x200004dc
 8002c80:	200005fc 	.word	0x200005fc
 8002c84:	3dcccccd 	.word	0x3dcccccd
 8002c88:	20000250 	.word	0x20000250
 8002c8c:	20000278 	.word	0x20000278
 8002c90:	0800a504 	.word	0x0800a504
 8002c94:	2000026c 	.word	0x2000026c
 8002c98:	0800a518 	.word	0x0800a518
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	2000001c 	.word	0x2000001c
 8002ca4:	20000270 	.word	0x20000270
 8002ca8:	20000258 	.word	0x20000258
 8002cac:	2000024d 	.word	0x2000024d
 8002cb0:	20000254 	.word	0x20000254
 8002cb4:	20000274 	.word	0x20000274
 8002cb8:	20000268 	.word	0x20000268
 8002cbc:	2000004c 	.word	0x2000004c
 8002cc0:	20000260 	.word	0x20000260
		    	printf("%.2f, %i, %.2f\r\n",setpoint, (int)pidOutput, pt100Temp );
 8002cc4:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <main+0x5cc>)
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	f7fd fbb8 	bl	800043c <__aeabi_f2d>
 8002ccc:	4604      	mov	r4, r0
 8002cce:	460d      	mov	r5, r1
 8002cd0:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <main+0x5d0>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	f7fd fbb2 	bl	800043c <__aeabi_f2d>
 8002cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <main+0x5d4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	4622      	mov	r2, r4
 8002ce4:	462b      	mov	r3, r5
 8002ce6:	4860      	ldr	r0, [pc, #384]	; (8002e68 <main+0x5d8>)
 8002ce8:	f003 ffce 	bl	8006c88 <iprintf>
 8002cec:	e6cb      	b.n	8002a86 <main+0x1f6>
			uint8_t buffer[50] = { ' ' };
 8002cee:	2320      	movs	r3, #32
 8002cf0:	9305      	str	r3, [sp, #20]
 8002cf2:	222e      	movs	r2, #46	; 0x2e
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	a806      	add	r0, sp, #24
 8002cf8:	f003 fb5e 	bl	80063b8 <memset>
			sprintf( (char*)buffer, "t1.txt=\"T: %5.2f C\"\xFF\xFF\xFF", t);
 8002cfc:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <main+0x5dc>)
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	f7fd fb9c 	bl	800043c <__aeabi_f2d>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4959      	ldr	r1, [pc, #356]	; (8002e70 <main+0x5e0>)
 8002d0a:	a805      	add	r0, sp, #20
 8002d0c:	f004 f84a 	bl	8006da4 <siprintf>
			nextion_uart_transmit( (uint8_t*)buffer );
 8002d10:	a805      	add	r0, sp, #20
 8002d12:	f7ff fbb7 	bl	8002484 <nextion_uart_transmit>
			sprintf( (char*)buffer, "t4.txt=\"S: %4.0f C\"\xFF\xFF\xFF", setpoint);
 8002d16:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <main+0x5cc>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f7fd fb8f 	bl	800043c <__aeabi_f2d>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4954      	ldr	r1, [pc, #336]	; (8002e74 <main+0x5e4>)
 8002d24:	a805      	add	r0, sp, #20
 8002d26:	f004 f83d 	bl	8006da4 <siprintf>
			nextion_uart_transmit( (uint8_t*)buffer );
 8002d2a:	a805      	add	r0, sp, #20
 8002d2c:	f7ff fbaa 	bl	8002484 <nextion_uart_transmit>
		    dispUpdateTime = currTime + dispUpdateInterval;
 8002d30:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <main+0x5e8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	33c8      	adds	r3, #200	; 0xc8
 8002d36:	4a51      	ldr	r2, [pc, #324]	; (8002e7c <main+0x5ec>)
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e6b1      	b.n	8002aa0 <main+0x210>
			CLI_RunCmd(uart1RxBuff, uart1RxBuffLoc);
 8002d3c:	4d50      	ldr	r5, [pc, #320]	; (8002e80 <main+0x5f0>)
 8002d3e:	4c51      	ldr	r4, [pc, #324]	; (8002e84 <main+0x5f4>)
 8002d40:	7829      	ldrb	r1, [r5, #0]
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7fe fc5e 	bl	8001604 <CLI_RunCmd>
			cmdRdyFlg = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4a4f      	ldr	r2, [pc, #316]	; (8002e88 <main+0x5f8>)
 8002d4c:	7013      	strb	r3, [r2, #0]
			uart1RxBuffLoc = 0;
 8002d4e:	602b      	str	r3, [r5, #0]
			UART1_START_RX_IT();
 8002d50:	2201      	movs	r2, #1
 8002d52:	4621      	mov	r1, r4
 8002d54:	484d      	ldr	r0, [pc, #308]	; (8002e8c <main+0x5fc>)
 8002d56:	f003 fab0 	bl	80062ba <HAL_UART_Receive_IT>
 8002d5a:	e6a6      	b.n	8002aaa <main+0x21a>
			if( memcmp((uint8_t[7]){0x65, 0x00, 0x05, 0x01, 0xFF, 0xFF, 0xFF },uart2RxBuff, 7 ) == 0){
 8002d5c:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <main+0x600>)
 8002d5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d62:	9012      	str	r0, [sp, #72]	; 0x48
 8002d64:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
 8002d68:	0c09      	lsrs	r1, r1, #16
 8002d6a:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
 8002d6e:	2207      	movs	r2, #7
 8002d70:	4948      	ldr	r1, [pc, #288]	; (8002e94 <main+0x604>)
 8002d72:	a812      	add	r0, sp, #72	; 0x48
 8002d74:	f003 fb12 	bl	800639c <memcmp>
 8002d78:	b980      	cbnz	r0, 8002d9c <main+0x50c>
				setpoint = setpoint + 5;
 8002d7a:	4c38      	ldr	r4, [pc, #224]	; (8002e5c <main+0x5cc>)
 8002d7c:	4946      	ldr	r1, [pc, #280]	; (8002e98 <main+0x608>)
 8002d7e:	6820      	ldr	r0, [r4, #0]
 8002d80:	f7fd ff02 	bl	8000b88 <__addsf3>
 8002d84:	6020      	str	r0, [r4, #0]
			dispCmdRdyFlg = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	4a44      	ldr	r2, [pc, #272]	; (8002e9c <main+0x60c>)
 8002d8a:	7013      	strb	r3, [r2, #0]
			uart2RxBuffLoc = 0;
 8002d8c:	4a44      	ldr	r2, [pc, #272]	; (8002ea0 <main+0x610>)
 8002d8e:	6013      	str	r3, [r2, #0]
			UART2_START_RX_IT();
 8002d90:	2201      	movs	r2, #1
 8002d92:	4940      	ldr	r1, [pc, #256]	; (8002e94 <main+0x604>)
 8002d94:	4843      	ldr	r0, [pc, #268]	; (8002ea4 <main+0x614>)
 8002d96:	f003 fa90 	bl	80062ba <HAL_UART_Receive_IT>
 8002d9a:	e68b      	b.n	8002ab4 <main+0x224>
			}else if( memcmp((uint8_t[7]){0x65, 0x00, 0x04, 0x01, 0xFF, 0xFF, 0xFF },uart2RxBuff, 7 ) == 0){
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <main+0x618>)
 8002d9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002da2:	9014      	str	r0, [sp, #80]	; 0x50
 8002da4:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
 8002da8:	0c09      	lsrs	r1, r1, #16
 8002daa:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
 8002dae:	2207      	movs	r2, #7
 8002db0:	4938      	ldr	r1, [pc, #224]	; (8002e94 <main+0x604>)
 8002db2:	a814      	add	r0, sp, #80	; 0x50
 8002db4:	f003 faf2 	bl	800639c <memcmp>
 8002db8:	b930      	cbnz	r0, 8002dc8 <main+0x538>
				setpoint = setpoint - 5;
 8002dba:	4c28      	ldr	r4, [pc, #160]	; (8002e5c <main+0x5cc>)
 8002dbc:	4936      	ldr	r1, [pc, #216]	; (8002e98 <main+0x608>)
 8002dbe:	6820      	ldr	r0, [r4, #0]
 8002dc0:	f7fd fee0 	bl	8000b84 <__aeabi_fsub>
 8002dc4:	6020      	str	r0, [r4, #0]
 8002dc6:	e7de      	b.n	8002d86 <main+0x4f6>
			}else if( memcmp((uint8_t[4]){0x01, 0xFF, 0xFF, 0xFF },uart2RxBuff, 4 ) == 0){
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <main+0x600>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	9316      	str	r3, [sp, #88]	; 0x58
 8002dce:	2204      	movs	r2, #4
 8002dd0:	4930      	ldr	r1, [pc, #192]	; (8002e94 <main+0x604>)
 8002dd2:	a816      	add	r0, sp, #88	; 0x58
 8002dd4:	f003 fae2 	bl	800639c <memcmp>
 8002dd8:	b300      	cbz	r0, 8002e1c <main+0x58c>
			}else if( memcmp((uint8_t[4]){0x00, 0xFF, 0xFF, 0xFF },uart2RxBuff, 4 )  == 0){
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <main+0x600>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	9317      	str	r3, [sp, #92]	; 0x5c
 8002de0:	2204      	movs	r2, #4
 8002de2:	492c      	ldr	r1, [pc, #176]	; (8002e94 <main+0x604>)
 8002de4:	a817      	add	r0, sp, #92	; 0x5c
 8002de6:	f003 fad9 	bl	800639c <memcmp>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d1cb      	bne.n	8002d86 <main+0x4f6>
				printf("HOTPLATE OFF\n");
 8002dee:	482f      	ldr	r0, [pc, #188]	; (8002eac <main+0x61c>)
 8002df0:	f003 ffd0 	bl	8006d94 <puts>
				HAL_GPIO_WritePin( RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2110      	movs	r1, #16
 8002df8:	482d      	ldr	r0, [pc, #180]	; (8002eb0 <main+0x620>)
 8002dfa:	f000 fdfc 	bl	80039f6 <HAL_GPIO_WritePin>
				pidIsActive = false;
 8002dfe:	2400      	movs	r4, #0
 8002e00:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <main+0x624>)
 8002e02:	701c      	strb	r4, [r3, #0]
				arm_pid_reset_f32(&PID);
 8002e04:	482c      	ldr	r0, [pc, #176]	; (8002eb8 <main+0x628>)
 8002e06:	f003 fa75 	bl	80062f4 <arm_pid_reset_f32>
				pidOutput = 0;
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <main+0x5d4>)
 8002e0c:	601c      	str	r4, [r3, #0]
				J3_Conf.powerPercent = 0;
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <main+0x62c>)
 8002e10:	605c      	str	r4, [r3, #4]
				J3_Conf.isSet = false; //update at next ZC
 8002e12:	751c      	strb	r4, [r3, #20]
				J4_Conf.powerPercent = 0;
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <main+0x630>)
 8002e16:	605c      	str	r4, [r3, #4]
				J4_Conf.isSet = false; //update at next ZC
 8002e18:	751c      	strb	r4, [r3, #20]
 8002e1a:	e7b4      	b.n	8002d86 <main+0x4f6>
				printf("HOTPLATE ON\n");
 8002e1c:	4829      	ldr	r0, [pc, #164]	; (8002ec4 <main+0x634>)
 8002e1e:	f003 ffb9 	bl	8006d94 <puts>
				HAL_GPIO_WritePin( RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8002e22:	2201      	movs	r2, #1
 8002e24:	2110      	movs	r1, #16
 8002e26:	4822      	ldr	r0, [pc, #136]	; (8002eb0 <main+0x620>)
 8002e28:	f000 fde5 	bl	80039f6 <HAL_GPIO_WritePin>
				pidIsActive = true;
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <main+0x624>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_AUTORELOAD(&htim4, period);
 8002e32:	4c25      	ldr	r4, [pc, #148]	; (8002ec8 <main+0x638>)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	2232      	movs	r2, #50	; 0x32
 8002e38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e3a:	60e2      	str	r2, [r4, #12]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, period/2);
 8002e3c:	2219      	movs	r2, #25
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002e40:	2104      	movs	r1, #4
 8002e42:	4620      	mov	r0, r4
 8002e44:	f002 fd84 	bl	8005950 <HAL_TIM_PWM_Start>
				HAL_Delay(500);
 8002e48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e4c:	f000 fb2e 	bl	80034ac <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002e50:	2104      	movs	r1, #4
 8002e52:	4620      	mov	r0, r4
 8002e54:	f002 fdea 	bl	8005a2c <HAL_TIM_PWM_Stop>
 8002e58:	e795      	b.n	8002d86 <main+0x4f6>
 8002e5a:	bf00      	nop
 8002e5c:	2000004c 	.word	0x2000004c
 8002e60:	200005fc 	.word	0x200005fc
 8002e64:	2000026c 	.word	0x2000026c
 8002e68:	0800a518 	.word	0x0800a518
 8002e6c:	20000490 	.word	0x20000490
 8002e70:	0800a52c 	.word	0x0800a52c
 8002e74:	0800a544 	.word	0x0800a544
 8002e78:	20000250 	.word	0x20000250
 8002e7c:	20000258 	.word	0x20000258
 8002e80:	200002b0 	.word	0x200002b0
 8002e84:	2000027c 	.word	0x2000027c
 8002e88:	2000024d 	.word	0x2000024d
 8002e8c:	2000054c 	.word	0x2000054c
 8002e90:	08009d88 	.word	0x08009d88
 8002e94:	200002b4 	.word	0x200002b4
 8002e98:	40a00000 	.word	0x40a00000
 8002e9c:	20000254 	.word	0x20000254
 8002ea0:	200002e8 	.word	0x200002e8
 8002ea4:	200006a0 	.word	0x200006a0
 8002ea8:	08009d90 	.word	0x08009d90
 8002eac:	0800a568 	.word	0x0800a568
 8002eb0:	40010800 	.word	0x40010800
 8002eb4:	20000268 	.word	0x20000268
 8002eb8:	200004e0 	.word	0x200004e0
 8002ebc:	20000004 	.word	0x20000004
 8002ec0:	2000001c 	.word	0x2000001c
 8002ec4:	0800a55c 	.word	0x0800a55c
 8002ec8:	20000494 	.word	0x20000494

08002ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ecc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_MspInit+0x3c>)
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	619a      	str	r2, [r3, #24]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	f002 0201 	and.w	r2, r2, #1
 8002ede:	9200      	str	r2, [sp, #0]
 8002ee0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ee8:	61da      	str	r2, [r3, #28]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_MspInit+0x40>)
 8002ef6:	6853      	ldr	r3, [r2, #4]
 8002ef8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f02:	b002      	add	sp, #8
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010000 	.word	0x40010000

08002f10 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8002f10:	6802      	ldr	r2, [r0, #0]
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RTC_MspInit+0x34>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d000      	beq.n	8002f1a <HAL_RTC_MspInit+0xa>
 8002f18:	4770      	bx	lr
{
 8002f1a:	b500      	push	{lr}
 8002f1c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002f1e:	f000 fd71 	bl	8003a04 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RTC_MspInit+0x38>)
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002f2a:	61da      	str	r2, [r3, #28]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RTC_MspInit+0x3c>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f3c:	b003      	add	sp, #12
 8002f3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f42:	bf00      	nop
 8002f44:	40002800 	.word	0x40002800
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	4242043c 	.word	0x4242043c

08002f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f50:	b510      	push	{r4, lr}
 8002f52:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	2300      	movs	r3, #0
 8002f56:	9302      	str	r3, [sp, #8]
 8002f58:	9303      	str	r3, [sp, #12]
 8002f5a:	9304      	str	r3, [sp, #16]
 8002f5c:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8002f5e:	6802      	ldr	r2, [r0, #0]
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <HAL_SPI_MspInit+0x7c>)
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f66:	b006      	add	sp, #24
 8002f68:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f6a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f74:	619a      	str	r2, [r3, #24]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f7c:	9200      	str	r2, [sp, #0]
 8002f7e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	f042 0208 	orr.w	r2, r2, #8
 8002f86:	619a      	str	r2, [r3, #24]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002f92:	2328      	movs	r3, #40	; 0x28
 8002f94:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9e:	4c0c      	ldr	r4, [pc, #48]	; (8002fd0 <HAL_SPI_MspInit+0x80>)
 8002fa0:	a902      	add	r1, sp, #8
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f000 fb92 	bl	80036cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fa8:	2310      	movs	r3, #16
 8002faa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fac:	2300      	movs	r3, #0
 8002fae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb2:	a902      	add	r1, sp, #8
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f000 fb89 	bl	80036cc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002fba:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <HAL_SPI_MspInit+0x84>)
 8002fbc:	6853      	ldr	r3, [r2, #4]
 8002fbe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6053      	str	r3, [r2, #4]
}
 8002fc8:	e7cd      	b.n	8002f66 <HAL_SPI_MspInit+0x16>
 8002fca:	bf00      	nop
 8002fcc:	40013000 	.word	0x40013000
 8002fd0:	40010c00 	.word	0x40010c00
 8002fd4:	40010000 	.word	0x40010000

08002fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9306      	str	r3, [sp, #24]
 8002fe0:	9307      	str	r3, [sp, #28]
 8002fe2:	9308      	str	r3, [sp, #32]
 8002fe4:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_base->Instance==TIM1)
 8002fe6:	6803      	ldr	r3, [r0, #0]
 8002fe8:	4a36      	ldr	r2, [pc, #216]	; (80030c4 <HAL_TIM_Base_MspInit+0xec>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00a      	beq.n	8003004 <HAL_TIM_Base_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff2:	d022      	beq.n	800303a <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002ff4:	4a34      	ldr	r2, [pc, #208]	; (80030c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d045      	beq.n	8003086 <HAL_TIM_Base_MspInit+0xae>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002ffa:	4a34      	ldr	r2, [pc, #208]	; (80030cc <HAL_TIM_Base_MspInit+0xf4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d055      	beq.n	80030ac <HAL_TIM_Base_MspInit+0xd4>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003000:	b00a      	add	sp, #40	; 0x28
 8003002:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003004:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300c:	619a      	str	r2, [r3, #24]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	4611      	mov	r1, r2
 800301c:	2019      	movs	r0, #25
 800301e:	f000 fa6b 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003022:	2019      	movs	r0, #25
 8003024:	f000 fa9c 	bl	8003560 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	4611      	mov	r1, r2
 800302c:	201b      	movs	r0, #27
 800302e:	f000 fa63 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003032:	201b      	movs	r0, #27
 8003034:	f000 fa94 	bl	8003560 <HAL_NVIC_EnableIRQ>
 8003038:	e7e2      	b.n	8003000 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800303a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	f042 0201 	orr.w	r2, r2, #1
 8003044:	61da      	str	r2, [r3, #28]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	f002 0201 	and.w	r2, r2, #1
 800304c:	9202      	str	r2, [sp, #8]
 800304e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	f042 0204 	orr.w	r2, r2, #4
 8003056:	619a      	str	r2, [r3, #24]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	9303      	str	r3, [sp, #12]
 8003060:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003062:	2301      	movs	r3, #1
 8003064:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003066:	2400      	movs	r4, #0
 8003068:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	a906      	add	r1, sp, #24
 800306e:	4819      	ldr	r0, [pc, #100]	; (80030d4 <HAL_TIM_Base_MspInit+0xfc>)
 8003070:	f000 fb2c 	bl	80036cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003074:	4622      	mov	r2, r4
 8003076:	4621      	mov	r1, r4
 8003078:	201c      	movs	r0, #28
 800307a:	f000 fa3d 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800307e:	201c      	movs	r0, #28
 8003080:	f000 fa6e 	bl	8003560 <HAL_NVIC_EnableIRQ>
 8003084:	e7bc      	b.n	8003000 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_TIM_Base_MspInit+0xf8>)
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	f042 0202 	orr.w	r2, r2, #2
 800308e:	61da      	str	r2, [r3, #28]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	9304      	str	r3, [sp, #16]
 8003098:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2101      	movs	r1, #1
 800309e:	201d      	movs	r0, #29
 80030a0:	f000 fa2a 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030a4:	201d      	movs	r0, #29
 80030a6:	f000 fa5b 	bl	8003560 <HAL_NVIC_EnableIRQ>
 80030aa:	e7a9      	b.n	8003000 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <HAL_TIM_Base_MspInit+0xf8>)
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	f042 0204 	orr.w	r2, r2, #4
 80030b4:	61da      	str	r2, [r3, #28]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	9305      	str	r3, [sp, #20]
 80030be:	9b05      	ldr	r3, [sp, #20]
}
 80030c0:	e79e      	b.n	8003000 <HAL_TIM_Base_MspInit+0x28>
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40010800 	.word	0x40010800

080030d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030d8:	b500      	push	{lr}
 80030da:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	2300      	movs	r3, #0
 80030de:	9302      	str	r3, [sp, #8]
 80030e0:	9303      	str	r3, [sp, #12]
 80030e2:	9304      	str	r3, [sp, #16]
 80030e4:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 80030e6:	6802      	ldr	r2, [r0, #0]
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_TIM_MspPostInit+0x48>)
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d002      	beq.n	80030f4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030ee:	b007      	add	sp, #28
 80030f0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	f042 0208 	orr.w	r2, r2, #8
 80030fe:	619a      	str	r2, [r3, #24]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003114:	a902      	add	r1, sp, #8
 8003116:	4803      	ldr	r0, [pc, #12]	; (8003124 <HAL_TIM_MspPostInit+0x4c>)
 8003118:	f000 fad8 	bl	80036cc <HAL_GPIO_Init>
}
 800311c:	e7e7      	b.n	80030ee <HAL_TIM_MspPostInit+0x16>
 800311e:	bf00      	nop
 8003120:	40000800 	.word	0x40000800
 8003124:	40010c00 	.word	0x40010c00

08003128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	2300      	movs	r3, #0
 800312e:	9304      	str	r3, [sp, #16]
 8003130:	9305      	str	r3, [sp, #20]
 8003132:	9306      	str	r3, [sp, #24]
 8003134:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8003136:	6803      	ldr	r3, [r0, #0]
 8003138:	4a34      	ldr	r2, [pc, #208]	; (800320c <HAL_UART_MspInit+0xe4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800313e:	4a34      	ldr	r2, [pc, #208]	; (8003210 <HAL_UART_MspInit+0xe8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d033      	beq.n	80031ac <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003144:	b008      	add	sp, #32
 8003146:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_UART_MspInit+0xec>)
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003150:	619a      	str	r2, [r3, #24]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003158:	9200      	str	r2, [sp, #0]
 800315a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	f042 0204 	orr.w	r2, r2, #4
 8003162:	619a      	str	r2, [r3, #24]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800316e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003172:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2502      	movs	r5, #2
 8003176:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003178:	2303      	movs	r3, #3
 800317a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317c:	4e26      	ldr	r6, [pc, #152]	; (8003218 <HAL_UART_MspInit+0xf0>)
 800317e:	a904      	add	r1, sp, #16
 8003180:	4630      	mov	r0, r6
 8003182:	f000 faa3 	bl	80036cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800318c:	2400      	movs	r4, #0
 800318e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	a904      	add	r1, sp, #16
 8003194:	4630      	mov	r0, r6
 8003196:	f000 fa99 	bl	80036cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800319a:	4622      	mov	r2, r4
 800319c:	4629      	mov	r1, r5
 800319e:	2025      	movs	r0, #37	; 0x25
 80031a0:	f000 f9aa 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031a4:	2025      	movs	r0, #37	; 0x25
 80031a6:	f000 f9db 	bl	8003560 <HAL_NVIC_EnableIRQ>
 80031aa:	e7cb      	b.n	8003144 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_UART_MspInit+0xec>)
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031b4:	61da      	str	r2, [r3, #28]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80031bc:	9202      	str	r2, [sp, #8]
 80031be:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	f042 0204 	orr.w	r2, r2, #4
 80031c6:	619a      	str	r2, [r3, #24]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	9303      	str	r3, [sp, #12]
 80031d0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031d2:	2304      	movs	r3, #4
 80031d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2502      	movs	r5, #2
 80031d8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031da:	2303      	movs	r3, #3
 80031dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031de:	4e0e      	ldr	r6, [pc, #56]	; (8003218 <HAL_UART_MspInit+0xf0>)
 80031e0:	a904      	add	r1, sp, #16
 80031e2:	4630      	mov	r0, r6
 80031e4:	f000 fa72 	bl	80036cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031e8:	2308      	movs	r3, #8
 80031ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ec:	2400      	movs	r4, #0
 80031ee:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f2:	a904      	add	r1, sp, #16
 80031f4:	4630      	mov	r0, r6
 80031f6:	f000 fa69 	bl	80036cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80031fa:	4622      	mov	r2, r4
 80031fc:	4629      	mov	r1, r5
 80031fe:	2026      	movs	r0, #38	; 0x26
 8003200:	f000 f97a 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003204:	2026      	movs	r0, #38	; 0x26
 8003206:	f000 f9ab 	bl	8003560 <HAL_NVIC_EnableIRQ>
}
 800320a:	e79b      	b.n	8003144 <HAL_UART_MspInit+0x1c>
 800320c:	40013800 	.word	0x40013800
 8003210:	40004400 	.word	0x40004400
 8003214:	40021000 	.word	0x40021000
 8003218:	40010800 	.word	0x40010800

0800321c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800321c:	b508      	push	{r3, lr}
  if(huart->Instance==USART1)
 800321e:	6803      	ldr	r3, [r0, #0]
 8003220:	4a11      	ldr	r2, [pc, #68]	; (8003268 <HAL_UART_MspDeInit+0x4c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <HAL_UART_MspDeInit+0x12>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8003226:	4a11      	ldr	r2, [pc, #68]	; (800326c <HAL_UART_MspDeInit+0x50>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00f      	beq.n	800324c <HAL_UART_MspDeInit+0x30>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800322c:	bd08      	pop	{r3, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 800322e:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8003232:	6993      	ldr	r3, [r2, #24]
 8003234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003238:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800323a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800323e:	480c      	ldr	r0, [pc, #48]	; (8003270 <HAL_UART_MspDeInit+0x54>)
 8003240:	f000 fb54 	bl	80038ec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003244:	2025      	movs	r0, #37	; 0x25
 8003246:	f000 f999 	bl	800357c <HAL_NVIC_DisableIRQ>
 800324a:	e7ef      	b.n	800322c <HAL_UART_MspDeInit+0x10>
    __HAL_RCC_USART2_CLK_DISABLE();
 800324c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8003250:	69d3      	ldr	r3, [r2, #28]
 8003252:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003256:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003258:	210c      	movs	r1, #12
 800325a:	4805      	ldr	r0, [pc, #20]	; (8003270 <HAL_UART_MspDeInit+0x54>)
 800325c:	f000 fb46 	bl	80038ec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003260:	2026      	movs	r0, #38	; 0x26
 8003262:	f000 f98b 	bl	800357c <HAL_NVIC_DisableIRQ>
}
 8003266:	e7e1      	b.n	800322c <HAL_UART_MspDeInit+0x10>
 8003268:	40013800 	.word	0x40013800
 800326c:	40004400 	.word	0x40004400
 8003270:	40010800 	.word	0x40010800

08003274 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003274:	4770      	bx	lr

08003276 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003276:	e7fe      	b.n	8003276 <HardFault_Handler>

08003278 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <MemManage_Handler>

0800327a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327a:	e7fe      	b.n	800327a <BusFault_Handler>

0800327c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800327c:	e7fe      	b.n	800327c <UsageFault_Handler>

0800327e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327e:	4770      	bx	lr

08003280 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003280:	4770      	bx	lr

08003282 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003282:	4770      	bx	lr

08003284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003284:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003286:	f000 f8ff 	bl	8003488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800328a:	bd08      	pop	{r3, pc}

0800328c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800328c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800328e:	4802      	ldr	r0, [pc, #8]	; (8003298 <TIM1_UP_IRQHandler+0xc>)
 8003290:	f001 fe50 	bl	8004f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003294:	bd08      	pop	{r3, pc}
 8003296:	bf00      	nop
 8003298:	200005b4 	.word	0x200005b4

0800329c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800329c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800329e:	4802      	ldr	r0, [pc, #8]	; (80032a8 <TIM1_CC_IRQHandler+0xc>)
 80032a0:	f001 fe48 	bl	8004f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80032a4:	bd08      	pop	{r3, pc}
 80032a6:	bf00      	nop
 80032a8:	200005b4 	.word	0x200005b4

080032ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032ae:	4802      	ldr	r0, [pc, #8]	; (80032b8 <TIM2_IRQHandler+0xc>)
 80032b0:	f001 fe40 	bl	8004f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //HAL_GPIO_TogglePin(J5_GPIO, J5_PIN);
  /* USER CODE END TIM2_IRQn 1 */
}
 80032b4:	bd08      	pop	{r3, pc}
 80032b6:	bf00      	nop
 80032b8:	20000658 	.word	0x20000658

080032bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032be:	4802      	ldr	r0, [pc, #8]	; (80032c8 <TIM3_IRQHandler+0xc>)
 80032c0:	f001 fe38 	bl	8004f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032c4:	bd08      	pop	{r3, pc}
 80032c6:	bf00      	nop
 80032c8:	20000504 	.word	0x20000504

080032cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032ce:	4802      	ldr	r0, [pc, #8]	; (80032d8 <USART1_IRQHandler+0xc>)
 80032d0:	f002 fed6 	bl	8006080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032d4:	bd08      	pop	{r3, pc}
 80032d6:	bf00      	nop
 80032d8:	2000054c 	.word	0x2000054c

080032dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032de:	4802      	ldr	r0, [pc, #8]	; (80032e8 <USART2_IRQHandler+0xc>)
 80032e0:	f002 fece 	bl	8006080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032e4:	bd08      	pop	{r3, pc}
 80032e6:	bf00      	nop
 80032e8:	200006a0 	.word	0x200006a0

080032ec <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80032ec:	2001      	movs	r0, #1
 80032ee:	4770      	bx	lr

080032f0 <_kill>:

int _kill(int pid, int sig)
{
 80032f0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80032f2:	f003 f829 	bl	8006348 <__errno>
 80032f6:	2316      	movs	r3, #22
 80032f8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295
 80032fe:	bd08      	pop	{r3, pc}

08003300 <_exit>:

void _exit (int status)
{
 8003300:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003302:	f04f 31ff 	mov.w	r1, #4294967295
 8003306:	f7ff fff3 	bl	80032f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800330a:	e7fe      	b.n	800330a <_exit+0xa>

0800330c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	460c      	mov	r4, r1
 8003310:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	2500      	movs	r5, #0
 8003314:	42b5      	cmp	r5, r6
 8003316:	da07      	bge.n	8003328 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8003318:	f3af 8000 	nop.w
 800331c:	4621      	mov	r1, r4
 800331e:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003322:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003324:	460c      	mov	r4, r1
 8003326:	e7f5      	b.n	8003314 <_read+0x8>
	}

return len;
}
 8003328:	4630      	mov	r0, r6
 800332a:	bd70      	pop	{r4, r5, r6, pc}

0800332c <_close>:
}

int _close(int file)
{
	return -1;
}
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	4770      	bx	lr

08003332 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003336:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003338:	2000      	movs	r0, #0
 800333a:	4770      	bx	lr

0800333c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800333c:	2001      	movs	r0, #1
 800333e:	4770      	bx	lr

08003340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003340:	2000      	movs	r0, #0
 8003342:	4770      	bx	lr

08003344 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003344:	b508      	push	{r3, lr}
 8003346:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003348:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <_sbrk+0x34>)
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	b142      	cbz	r2, 8003360 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <_sbrk+0x34>)
 8003350:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003352:	4403      	add	r3, r0
 8003354:	466a      	mov	r2, sp
 8003356:	4293      	cmp	r3, r2
 8003358:	d806      	bhi.n	8003368 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800335a:	4a07      	ldr	r2, [pc, #28]	; (8003378 <_sbrk+0x34>)
 800335c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800335e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003360:	4a05      	ldr	r2, [pc, #20]	; (8003378 <_sbrk+0x34>)
 8003362:	4906      	ldr	r1, [pc, #24]	; (800337c <_sbrk+0x38>)
 8003364:	6011      	str	r1, [r2, #0]
 8003366:	e7f2      	b.n	800334e <_sbrk+0xa>
		errno = ENOMEM;
 8003368:	f002 ffee 	bl	8006348 <__errno>
 800336c:	230c      	movs	r3, #12
 800336e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	e7f3      	b.n	800335e <_sbrk+0x1a>
 8003376:	bf00      	nop
 8003378:	200002f4 	.word	0x200002f4
 800337c:	200006f8 	.word	0x200006f8

08003380 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <SystemInit+0x40>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <SystemInit+0x44>)
 800338e:	400a      	ands	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003398:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800339c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033a4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80033ac:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80033ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <SystemInit+0x48>)
 80033b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	f8ff0000 	.word	0xf8ff0000
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033ce:	e003      	b.n	80033d8 <LoopCopyDataInit>

080033d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80033d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80033d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80033d6:	3104      	adds	r1, #4

080033d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80033d8:	480a      	ldr	r0, [pc, #40]	; (8003404 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80033dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80033de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80033e0:	d3f6      	bcc.n	80033d0 <CopyDataInit>
  ldr r2, =_sbss
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80033e4:	e002      	b.n	80033ec <LoopFillZerobss>

080033e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80033e8:	f842 3b04 	str.w	r3, [r2], #4

080033ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80033ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80033f0:	d3f9      	bcc.n	80033e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033f2:	f7ff ffc5 	bl	8003380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033f6:	f002 ffad 	bl	8006354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033fa:	f7ff fa49 	bl	8002890 <main>
  bx lr
 80033fe:	4770      	bx	lr
  ldr r3, =_sidata
 8003400:	0800a9a8 	.word	0x0800a9a8
  ldr r0, =_sdata
 8003404:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003408:	20000230 	.word	0x20000230
  ldr r2, =_sbss
 800340c:	20000230 	.word	0x20000230
  ldr r3, = _ebss
 8003410:	200006f8 	.word	0x200006f8

08003414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003414:	e7fe      	b.n	8003414 <ADC1_2_IRQHandler>
	...

08003418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_InitTick+0x40>)
 800341e:	7818      	ldrb	r0, [r3, #0]
 8003420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003424:	fbb3 f3f0 	udiv	r3, r3, r0
 8003428:	4a0c      	ldr	r2, [pc, #48]	; (800345c <HAL_InitTick+0x44>)
 800342a:	6810      	ldr	r0, [r2, #0]
 800342c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003430:	f000 f8c8 	bl	80035c4 <HAL_SYSTICK_Config>
 8003434:	b968      	cbnz	r0, 8003452 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003436:	2c0f      	cmp	r4, #15
 8003438:	d901      	bls.n	800343e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800343a:	2001      	movs	r0, #1
 800343c:	e00a      	b.n	8003454 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800343e:	2200      	movs	r2, #0
 8003440:	4621      	mov	r1, r4
 8003442:	f04f 30ff 	mov.w	r0, #4294967295
 8003446:	f000 f857 	bl	80034f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_InitTick+0x48>)
 800344c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344e:	2000      	movs	r0, #0
 8003450:	e000      	b.n	8003454 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003452:	2001      	movs	r0, #1
}
 8003454:	bd10      	pop	{r4, pc}
 8003456:	bf00      	nop
 8003458:	20000054 	.word	0x20000054
 800345c:	20000050 	.word	0x20000050
 8003460:	20000058 	.word	0x20000058

08003464 <HAL_Init>:
{
 8003464:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003466:	4a07      	ldr	r2, [pc, #28]	; (8003484 <HAL_Init+0x20>)
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	f043 0310 	orr.w	r3, r3, #16
 800346e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003470:	2003      	movs	r0, #3
 8003472:	f000 f82f 	bl	80034d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003476:	2000      	movs	r0, #0
 8003478:	f7ff ffce 	bl	8003418 <HAL_InitTick>
  HAL_MspInit();
 800347c:	f7ff fd26 	bl	8002ecc <HAL_MspInit>
}
 8003480:	2000      	movs	r0, #0
 8003482:	bd08      	pop	{r3, pc}
 8003484:	40022000 	.word	0x40022000

08003488 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003488:	4a03      	ldr	r2, [pc, #12]	; (8003498 <HAL_IncTick+0x10>)
 800348a:	6811      	ldr	r1, [r2, #0]
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_IncTick+0x14>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	440b      	add	r3, r1
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	200006e4 	.word	0x200006e4
 800349c:	20000054 	.word	0x20000054

080034a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80034a0:	4b01      	ldr	r3, [pc, #4]	; (80034a8 <HAL_GetTick+0x8>)
 80034a2:	6818      	ldr	r0, [r3, #0]
}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	200006e4 	.word	0x200006e4

080034ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80034b0:	f7ff fff6 	bl	80034a0 <HAL_GetTick>
 80034b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80034ba:	d002      	beq.n	80034c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <HAL_Delay+0x24>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034c2:	f7ff ffed 	bl	80034a0 <HAL_GetTick>
 80034c6:	1b40      	subs	r0, r0, r5
 80034c8:	42a0      	cmp	r0, r4
 80034ca:	d3fa      	bcc.n	80034c2 <HAL_Delay+0x16>
  {
  }
}
 80034cc:	bd38      	pop	{r3, r4, r5, pc}
 80034ce:	bf00      	nop
 80034d0:	20000054 	.word	0x20000054

080034d4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80034d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034e0:	0200      	lsls	r0, r0, #8
 80034e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80034e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80034f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_NVIC_SetPriority+0x60>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003502:	f1c3 0407 	rsb	r4, r3, #7
 8003506:	2c04      	cmp	r4, #4
 8003508:	bf28      	it	cs
 800350a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350c:	1d1d      	adds	r5, r3, #4
 800350e:	2d06      	cmp	r5, #6
 8003510:	d918      	bls.n	8003544 <HAL_NVIC_SetPriority+0x4c>
 8003512:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 35ff 	mov.w	r5, #4294967295
 8003518:	fa05 f404 	lsl.w	r4, r5, r4
 800351c:	ea21 0104 	bic.w	r1, r1, r4
 8003520:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003522:	fa05 f303 	lsl.w	r3, r5, r3
 8003526:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800352c:	2800      	cmp	r0, #0
 800352e:	db0b      	blt.n	8003548 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003530:	0109      	lsls	r1, r1, #4
 8003532:	b2c9      	uxtb	r1, r1
 8003534:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003538:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800353c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003540:	bc30      	pop	{r4, r5}
 8003542:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003544:	2300      	movs	r3, #0
 8003546:	e7e5      	b.n	8003514 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	f000 000f 	and.w	r0, r0, #15
 800354c:	0109      	lsls	r1, r1, #4
 800354e:	b2c9      	uxtb	r1, r1
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <HAL_NVIC_SetPriority+0x64>)
 8003552:	5419      	strb	r1, [r3, r0]
 8003554:	e7f4      	b.n	8003540 <HAL_NVIC_SetPriority+0x48>
 8003556:	bf00      	nop
 8003558:	e000ed00 	.word	0xe000ed00
 800355c:	e000ed14 	.word	0xe000ed14

08003560 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003560:	2800      	cmp	r0, #0
 8003562:	db07      	blt.n	8003574 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003564:	f000 021f 	and.w	r2, r0, #31
 8003568:	0940      	lsrs	r0, r0, #5
 800356a:	2301      	movs	r3, #1
 800356c:	4093      	lsls	r3, r2
 800356e:	4a02      	ldr	r2, [pc, #8]	; (8003578 <HAL_NVIC_EnableIRQ+0x18>)
 8003570:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000e100 	.word	0xe000e100

0800357c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800357c:	2800      	cmp	r0, #0
 800357e:	db0c      	blt.n	800359a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003580:	f000 021f 	and.w	r2, r0, #31
 8003584:	0940      	lsrs	r0, r0, #5
 8003586:	2301      	movs	r3, #1
 8003588:	4093      	lsls	r3, r2
 800358a:	3020      	adds	r0, #32
 800358c:	4a03      	ldr	r2, [pc, #12]	; (800359c <HAL_NVIC_DisableIRQ+0x20>)
 800358e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003596:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100

080035a0 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80035a0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80035a4:	4905      	ldr	r1, [pc, #20]	; (80035bc <HAL_NVIC_SystemReset+0x1c>)
 80035a6:	68ca      	ldr	r2, [r1, #12]
 80035a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_NVIC_SystemReset+0x20>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60cb      	str	r3, [r1, #12]
 80035b2:	f3bf 8f4f 	dsb	sy
    __NOP();
 80035b6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80035b8:	e7fd      	b.n	80035b6 <HAL_NVIC_SystemReset+0x16>
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00
 80035c0:	05fa0004 	.word	0x05fa0004

080035c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c4:	3801      	subs	r0, #1
 80035c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80035ca:	d20a      	bcs.n	80035e2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_SYSTICK_Config+0x24>)
 80035ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d0:	4a06      	ldr	r2, [pc, #24]	; (80035ec <HAL_SYSTICK_Config+0x28>)
 80035d2:	21f0      	movs	r1, #240	; 0xf0
 80035d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d8:	2000      	movs	r0, #0
 80035da:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035dc:	2207      	movs	r2, #7
 80035de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80035e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e000e010 	.word	0xe000e010
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d006      	beq.n	8003606 <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	2304      	movs	r3, #4
 80035fa:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fc:	2300      	movs	r3, #0
 80035fe:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8003602:	2001      	movs	r0, #1
 8003604:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003606:	6802      	ldr	r2, [r0, #0]
 8003608:	6813      	ldr	r3, [r2, #0]
 800360a:	f023 030e 	bic.w	r3, r3, #14
 800360e:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003610:	6802      	ldr	r2, [r0, #0]
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800361a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800361c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800361e:	2201      	movs	r2, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003626:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800362a:	2300      	movs	r3, #0
 800362c:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8003630:	4618      	mov	r0, r3
}
 8003632:	4770      	bx	lr

08003634 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003634:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003636:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363e:	2304      	movs	r3, #4
 8003640:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8003642:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8003644:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003646:	6802      	ldr	r2, [r0, #0]
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	f023 030e 	bic.w	r3, r3, #14
 800364e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003650:	6802      	ldr	r2, [r0, #0]
 8003652:	6813      	ldr	r3, [r2, #0]
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <HAL_DMA_Abort_IT+0x90>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d014      	beq.n	800368c <HAL_DMA_Abort_IT+0x58>
 8003662:	3214      	adds	r2, #20
 8003664:	4293      	cmp	r3, r2
 8003666:	d01f      	beq.n	80036a8 <HAL_DMA_Abort_IT+0x74>
 8003668:	3214      	adds	r2, #20
 800366a:	4293      	cmp	r3, r2
 800366c:	d01e      	beq.n	80036ac <HAL_DMA_Abort_IT+0x78>
 800366e:	3214      	adds	r2, #20
 8003670:	4293      	cmp	r3, r2
 8003672:	d01e      	beq.n	80036b2 <HAL_DMA_Abort_IT+0x7e>
 8003674:	3214      	adds	r2, #20
 8003676:	4293      	cmp	r3, r2
 8003678:	d01e      	beq.n	80036b8 <HAL_DMA_Abort_IT+0x84>
 800367a:	3214      	adds	r2, #20
 800367c:	4293      	cmp	r3, r2
 800367e:	d002      	beq.n	8003686 <HAL_DMA_Abort_IT+0x52>
 8003680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003684:	e003      	b.n	800368e <HAL_DMA_Abort_IT+0x5a>
 8003686:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800368a:	e000      	b.n	800368e <HAL_DMA_Abort_IT+0x5a>
 800368c:	2201      	movs	r2, #1
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_DMA_Abort_IT+0x94>)
 8003690:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003692:	2301      	movs	r3, #1
 8003694:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003698:	2300      	movs	r3, #0
 800369a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800369e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036a0:	b16b      	cbz	r3, 80036be <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80036a2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2000      	movs	r0, #0
 80036a6:	e7cd      	b.n	8003644 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80036a8:	2210      	movs	r2, #16
 80036aa:	e7f0      	b.n	800368e <HAL_DMA_Abort_IT+0x5a>
 80036ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b0:	e7ed      	b.n	800368e <HAL_DMA_Abort_IT+0x5a>
 80036b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036b6:	e7ea      	b.n	800368e <HAL_DMA_Abort_IT+0x5a>
 80036b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036bc:	e7e7      	b.n	800368e <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80036be:	2000      	movs	r0, #0
 80036c0:	e7c0      	b.n	8003644 <HAL_DMA_Abort_IT+0x10>
 80036c2:	bf00      	nop
 80036c4:	40020008 	.word	0x40020008
 80036c8:	40020000 	.word	0x40020000

080036cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036cc:	b4f0      	push	{r4, r5, r6, r7}
 80036ce:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036d0:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 80036d2:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d4:	e0a3      	b.n	800381e <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036d6:	4f7f      	ldr	r7, [pc, #508]	; (80038d4 <HAL_GPIO_Init+0x208>)
 80036d8:	42bb      	cmp	r3, r7
 80036da:	d010      	beq.n	80036fe <HAL_GPIO_Init+0x32>
 80036dc:	d907      	bls.n	80036ee <HAL_GPIO_Init+0x22>
 80036de:	4f7e      	ldr	r7, [pc, #504]	; (80038d8 <HAL_GPIO_Init+0x20c>)
 80036e0:	42bb      	cmp	r3, r7
 80036e2:	d00c      	beq.n	80036fe <HAL_GPIO_Init+0x32>
 80036e4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80036e8:	42bb      	cmp	r3, r7
 80036ea:	d008      	beq.n	80036fe <HAL_GPIO_Init+0x32>
 80036ec:	e013      	b.n	8003716 <HAL_GPIO_Init+0x4a>
 80036ee:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80036f2:	42bb      	cmp	r3, r7
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x32>
 80036f6:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80036fa:	42bb      	cmp	r3, r7
 80036fc:	d107      	bne.n	800370e <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036fe:	688b      	ldr	r3, [r1, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d058      	beq.n	80037b6 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003704:	2b01      	cmp	r3, #1
 8003706:	d051      	beq.n	80037ac <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8003708:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800370a:	2508      	movs	r5, #8
 800370c:	e003      	b.n	8003716 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800370e:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8003712:	42bb      	cmp	r3, r7
 8003714:	d0f3      	beq.n	80036fe <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003716:	2eff      	cmp	r6, #255	; 0xff
 8003718:	d84f      	bhi.n	80037ba <HAL_GPIO_Init+0xee>
 800371a:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800371c:	2eff      	cmp	r6, #255	; 0xff
 800371e:	d84f      	bhi.n	80037c0 <HAL_GPIO_Init+0xf4>
 8003720:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003722:	f8dc 3000 	ldr.w	r3, [ip]
 8003726:	270f      	movs	r7, #15
 8003728:	4097      	lsls	r7, r2
 800372a:	ea23 0307 	bic.w	r3, r3, r7
 800372e:	fa05 f202 	lsl.w	r2, r5, r2
 8003732:	4313      	orrs	r3, r2
 8003734:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003738:	684b      	ldr	r3, [r1, #4]
 800373a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800373e:	d06d      	beq.n	800381c <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003740:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_GPIO_Init+0x210>)
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	619a      	str	r2, [r3, #24]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003754:	08a2      	lsrs	r2, r4, #2
 8003756:	1c97      	adds	r7, r2, #2
 8003758:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <HAL_GPIO_Init+0x214>)
 800375a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800375e:	f004 0703 	and.w	r7, r4, #3
 8003762:	00bf      	lsls	r7, r7, #2
 8003764:	f04f 0c0f 	mov.w	ip, #15
 8003768:	fa0c fc07 	lsl.w	ip, ip, r7
 800376c:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003770:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_GPIO_Init+0x218>)
 8003772:	4298      	cmp	r0, r3
 8003774:	d02a      	beq.n	80037cc <HAL_GPIO_Init+0x100>
 8003776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800377a:	4298      	cmp	r0, r3
 800377c:	f000 808a 	beq.w	8003894 <HAL_GPIO_Init+0x1c8>
 8003780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003784:	4298      	cmp	r0, r3
 8003786:	f000 8087 	beq.w	8003898 <HAL_GPIO_Init+0x1cc>
 800378a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800378e:	4298      	cmp	r0, r3
 8003790:	d01a      	beq.n	80037c8 <HAL_GPIO_Init+0xfc>
 8003792:	2304      	movs	r3, #4
 8003794:	e01b      	b.n	80037ce <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003796:	68cd      	ldr	r5, [r1, #12]
          break;
 8003798:	e7bd      	b.n	8003716 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800379a:	68cd      	ldr	r5, [r1, #12]
 800379c:	3504      	adds	r5, #4
          break;
 800379e:	e7ba      	b.n	8003716 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037a0:	68cd      	ldr	r5, [r1, #12]
 80037a2:	3508      	adds	r5, #8
          break;
 80037a4:	e7b7      	b.n	8003716 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037a6:	68cd      	ldr	r5, [r1, #12]
 80037a8:	350c      	adds	r5, #12
          break;
 80037aa:	e7b4      	b.n	8003716 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80037ac:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037ae:	2508      	movs	r5, #8
 80037b0:	e7b1      	b.n	8003716 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037b2:	2500      	movs	r5, #0
 80037b4:	e7af      	b.n	8003716 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037b6:	2504      	movs	r5, #4
 80037b8:	e7ad      	b.n	8003716 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037ba:	f100 0c04 	add.w	ip, r0, #4
 80037be:	e7ad      	b.n	800371c <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037c0:	f1a4 0208 	sub.w	r2, r4, #8
 80037c4:	0092      	lsls	r2, r2, #2
 80037c6:	e7ac      	b.n	8003722 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037c8:	2303      	movs	r3, #3
 80037ca:	e000      	b.n	80037ce <HAL_GPIO_Init+0x102>
 80037cc:	2300      	movs	r3, #0
 80037ce:	40bb      	lsls	r3, r7
 80037d0:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80037d4:	3202      	adds	r2, #2
 80037d6:	4f42      	ldr	r7, [pc, #264]	; (80038e0 <HAL_GPIO_Init+0x214>)
 80037d8:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037dc:	684b      	ldr	r3, [r1, #4]
 80037de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037e2:	d05b      	beq.n	800389c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037e4:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <HAL_GPIO_Init+0x21c>)
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	4333      	orrs	r3, r6
 80037ea:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ec:	684b      	ldr	r3, [r1, #4]
 80037ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037f2:	d059      	beq.n	80038a8 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037f4:	4a3c      	ldr	r2, [pc, #240]	; (80038e8 <HAL_GPIO_Init+0x21c>)
 80037f6:	6853      	ldr	r3, [r2, #4]
 80037f8:	4333      	orrs	r3, r6
 80037fa:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037fc:	684b      	ldr	r3, [r1, #4]
 80037fe:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003802:	d057      	beq.n	80038b4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003804:	4a38      	ldr	r2, [pc, #224]	; (80038e8 <HAL_GPIO_Init+0x21c>)
 8003806:	6893      	ldr	r3, [r2, #8]
 8003808:	4333      	orrs	r3, r6
 800380a:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800380c:	684b      	ldr	r3, [r1, #4]
 800380e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003812:	d055      	beq.n	80038c0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003814:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <HAL_GPIO_Init+0x21c>)
 8003816:	68d3      	ldr	r3, [r2, #12]
 8003818:	431e      	orrs	r6, r3
 800381a:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 800381c:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800381e:	680b      	ldr	r3, [r1, #0]
 8003820:	fa33 f204 	lsrs.w	r2, r3, r4
 8003824:	d052      	beq.n	80038cc <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8003826:	2201      	movs	r2, #1
 8003828:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382a:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 800382e:	ea32 0303 	bics.w	r3, r2, r3
 8003832:	d1f3      	bne.n	800381c <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8003834:	684b      	ldr	r3, [r1, #4]
 8003836:	2b12      	cmp	r3, #18
 8003838:	f63f af4d 	bhi.w	80036d6 <HAL_GPIO_Init+0xa>
 800383c:	2b12      	cmp	r3, #18
 800383e:	f63f af6a 	bhi.w	8003716 <HAL_GPIO_Init+0x4a>
 8003842:	a701      	add	r7, pc, #4	; (adr r7, 8003848 <HAL_GPIO_Init+0x17c>)
 8003844:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8003848:	080036ff 	.word	0x080036ff
 800384c:	08003797 	.word	0x08003797
 8003850:	080037a1 	.word	0x080037a1
 8003854:	080037b3 	.word	0x080037b3
 8003858:	08003717 	.word	0x08003717
 800385c:	08003717 	.word	0x08003717
 8003860:	08003717 	.word	0x08003717
 8003864:	08003717 	.word	0x08003717
 8003868:	08003717 	.word	0x08003717
 800386c:	08003717 	.word	0x08003717
 8003870:	08003717 	.word	0x08003717
 8003874:	08003717 	.word	0x08003717
 8003878:	08003717 	.word	0x08003717
 800387c:	08003717 	.word	0x08003717
 8003880:	08003717 	.word	0x08003717
 8003884:	08003717 	.word	0x08003717
 8003888:	08003717 	.word	0x08003717
 800388c:	0800379b 	.word	0x0800379b
 8003890:	080037a7 	.word	0x080037a7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003894:	2301      	movs	r3, #1
 8003896:	e79a      	b.n	80037ce <HAL_GPIO_Init+0x102>
 8003898:	2302      	movs	r3, #2
 800389a:	e798      	b.n	80037ce <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_GPIO_Init+0x21c>)
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	ea23 0306 	bic.w	r3, r3, r6
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e7a1      	b.n	80037ec <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038a8:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <HAL_GPIO_Init+0x21c>)
 80038aa:	6853      	ldr	r3, [r2, #4]
 80038ac:	ea23 0306 	bic.w	r3, r3, r6
 80038b0:	6053      	str	r3, [r2, #4]
 80038b2:	e7a3      	b.n	80037fc <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_GPIO_Init+0x21c>)
 80038b6:	6893      	ldr	r3, [r2, #8]
 80038b8:	ea23 0306 	bic.w	r3, r3, r6
 80038bc:	6093      	str	r3, [r2, #8]
 80038be:	e7a5      	b.n	800380c <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_GPIO_Init+0x21c>)
 80038c2:	68d3      	ldr	r3, [r2, #12]
 80038c4:	ea23 0606 	bic.w	r6, r3, r6
 80038c8:	60d6      	str	r6, [r2, #12]
 80038ca:	e7a7      	b.n	800381c <HAL_GPIO_Init+0x150>
  }
}
 80038cc:	b002      	add	sp, #8
 80038ce:	bcf0      	pop	{r4, r5, r6, r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	10220000 	.word	0x10220000
 80038d8:	10310000 	.word	0x10310000
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40010800 	.word	0x40010800
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80038ec:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80038ee:	e06b      	b.n	80039c8 <HAL_GPIO_DeInit+0xdc>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80038f0:	2603      	movs	r6, #3
 80038f2:	e000      	b.n	80038f6 <HAL_GPIO_DeInit+0xa>
 80038f4:	2600      	movs	r6, #0
 80038f6:	fa06 f404 	lsl.w	r4, r6, r4
 80038fa:	42ac      	cmp	r4, r5
 80038fc:	d03f      	beq.n	800397e <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038fe:	2bff      	cmp	r3, #255	; 0xff
 8003900:	d858      	bhi.n	80039b4 <HAL_GPIO_DeInit+0xc8>
 8003902:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003904:	2bff      	cmp	r3, #255	; 0xff
 8003906:	d858      	bhi.n	80039ba <HAL_GPIO_DeInit+0xce>
 8003908:	0097      	lsls	r7, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800390a:	f8dc 4000 	ldr.w	r4, [ip]
 800390e:	260f      	movs	r6, #15
 8003910:	40be      	lsls	r6, r7
 8003912:	ea24 0406 	bic.w	r4, r4, r6
 8003916:	2504      	movs	r5, #4
 8003918:	40bd      	lsls	r5, r7
 800391a:	432c      	orrs	r4, r5
 800391c:	f8cc 4000 	str.w	r4, [ip]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003920:	68c4      	ldr	r4, [r0, #12]
 8003922:	ea24 0303 	bic.w	r3, r4, r3
 8003926:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8003928:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 800392a:	fa31 f302 	lsrs.w	r3, r1, r2
 800392e:	d048      	beq.n	80039c2 <HAL_GPIO_DeInit+0xd6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003930:	2301      	movs	r3, #1
 8003932:	4093      	lsls	r3, r2
    if (iocurrent)
 8003934:	400b      	ands	r3, r1
 8003936:	d0f7      	beq.n	8003928 <HAL_GPIO_DeInit+0x3c>
      tmp = AFIO->EXTICR[position >> 2u];
 8003938:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 800393c:	f10c 0502 	add.w	r5, ip, #2
 8003940:	4c26      	ldr	r4, [pc, #152]	; (80039dc <HAL_GPIO_DeInit+0xf0>)
 8003942:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003946:	f002 0403 	and.w	r4, r2, #3
 800394a:	00a4      	lsls	r4, r4, #2
 800394c:	260f      	movs	r6, #15
 800394e:	fa06 f704 	lsl.w	r7, r6, r4
 8003952:	403d      	ands	r5, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003954:	4e22      	ldr	r6, [pc, #136]	; (80039e0 <HAL_GPIO_DeInit+0xf4>)
 8003956:	42b0      	cmp	r0, r6
 8003958:	d0cc      	beq.n	80038f4 <HAL_GPIO_DeInit+0x8>
 800395a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800395e:	42b0      	cmp	r0, r6
 8003960:	d009      	beq.n	8003976 <HAL_GPIO_DeInit+0x8a>
 8003962:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003966:	42b0      	cmp	r0, r6
 8003968:	d007      	beq.n	800397a <HAL_GPIO_DeInit+0x8e>
 800396a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800396e:	42b0      	cmp	r0, r6
 8003970:	d0be      	beq.n	80038f0 <HAL_GPIO_DeInit+0x4>
 8003972:	2604      	movs	r6, #4
 8003974:	e7bf      	b.n	80038f6 <HAL_GPIO_DeInit+0xa>
 8003976:	2601      	movs	r6, #1
 8003978:	e7bd      	b.n	80038f6 <HAL_GPIO_DeInit+0xa>
 800397a:	2602      	movs	r6, #2
 800397c:	e7bb      	b.n	80038f6 <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800397e:	4d17      	ldr	r5, [pc, #92]	; (80039dc <HAL_GPIO_DeInit+0xf0>)
 8003980:	f10c 0402 	add.w	r4, ip, #2
 8003984:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8003988:	ea26 0607 	bic.w	r6, r6, r7
 800398c:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003990:	4c14      	ldr	r4, [pc, #80]	; (80039e4 <HAL_GPIO_DeInit+0xf8>)
 8003992:	6825      	ldr	r5, [r4, #0]
 8003994:	ea25 0503 	bic.w	r5, r5, r3
 8003998:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800399a:	6865      	ldr	r5, [r4, #4]
 800399c:	ea25 0503 	bic.w	r5, r5, r3
 80039a0:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80039a2:	68a5      	ldr	r5, [r4, #8]
 80039a4:	ea25 0503 	bic.w	r5, r5, r3
 80039a8:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80039aa:	68e5      	ldr	r5, [r4, #12]
 80039ac:	ea25 0503 	bic.w	r5, r5, r3
 80039b0:	60e5      	str	r5, [r4, #12]
 80039b2:	e7a4      	b.n	80038fe <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039b4:	f100 0c04 	add.w	ip, r0, #4
 80039b8:	e7a4      	b.n	8003904 <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039ba:	f1a2 0508 	sub.w	r5, r2, #8
 80039be:	00af      	lsls	r7, r5, #2
 80039c0:	e7a3      	b.n	800390a <HAL_GPIO_DeInit+0x1e>
  }
}
 80039c2:	bcf0      	pop	{r4, r5, r6, r7}
 80039c4:	4770      	bx	lr
    position++;
 80039c6:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 80039c8:	fa31 f302 	lsrs.w	r3, r1, r2
 80039cc:	d005      	beq.n	80039da <HAL_GPIO_DeInit+0xee>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80039ce:	2301      	movs	r3, #1
 80039d0:	4093      	lsls	r3, r2
    if (iocurrent)
 80039d2:	400b      	ands	r3, r1
 80039d4:	d0f7      	beq.n	80039c6 <HAL_GPIO_DeInit+0xda>
{
 80039d6:	b4f0      	push	{r4, r5, r6, r7}
 80039d8:	e7ae      	b.n	8003938 <HAL_GPIO_DeInit+0x4c>
 80039da:	4770      	bx	lr
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40010800 	.word	0x40010800
 80039e4:	40010400 	.word	0x40010400

080039e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e8:	6883      	ldr	r3, [r0, #8]
 80039ea:	4219      	tst	r1, r3
 80039ec:	d001      	beq.n	80039f2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80039ee:	2001      	movs	r0, #1
 80039f0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039f2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80039f4:	4770      	bx	lr

080039f6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039f6:	b10a      	cbz	r2, 80039fc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039f8:	6101      	str	r1, [r0, #16]
 80039fa:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039fc:	0409      	lsls	r1, r1, #16
 80039fe:	6101      	str	r1, [r0, #16]
  }
}
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003a04:	4b01      	ldr	r3, [pc, #4]	; (8003a0c <HAL_PWR_EnableBkUpAccess+0x8>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
}
 8003a0a:	4770      	bx	lr
 8003a0c:	420e0020 	.word	0x420e0020

08003a10 <HAL_PWR_DisableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <HAL_PWR_DisableBkUpAccess+0x8>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
}
 8003a16:	4770      	bx	lr
 8003a18:	420e0020 	.word	0x420e0020

08003a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a1c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <RCC_Delay+0x24>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <RCC_Delay+0x28>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	0a5b      	lsrs	r3, r3, #9
 8003a2a:	fb00 f303 	mul.w	r3, r0, r3
 8003a2e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003a30:	bf00      	nop
  }
  while (Delay --);
 8003a32:	9b01      	ldr	r3, [sp, #4]
 8003a34:	1e5a      	subs	r2, r3, #1
 8003a36:	9201      	str	r2, [sp, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f9      	bne.n	8003a30 <RCC_Delay+0x14>
}
 8003a3c:	b002      	add	sp, #8
 8003a3e:	4770      	bx	lr
 8003a40:	20000050 	.word	0x20000050
 8003a44:	10624dd3 	.word	0x10624dd3

08003a48 <HAL_RCC_DeInit>:
{
 8003a48:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 8003a4a:	f7ff fd29 	bl	80034a0 <HAL_GetTick>
 8003a4e:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a50:	4a36      	ldr	r2, [pc, #216]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a5a:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f013 0f02 	tst.w	r3, #2
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a64:	f7ff fd1c 	bl	80034a0 <HAL_GetTick>
 8003a68:	1b00      	subs	r0, r0, r4
 8003a6a:	2802      	cmp	r0, #2
 8003a6c:	d9f5      	bls.n	8003a5a <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8003a6e:	2403      	movs	r4, #3
}
 8003a70:	4620      	mov	r0, r4
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8003a74:	4d2d      	ldr	r5, [pc, #180]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003a76:	682b      	ldr	r3, [r5, #0]
 8003a78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a80:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003a82:	f7ff fd0d 	bl	80034a0 <HAL_GetTick>
 8003a86:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f013 0f0c 	tst.w	r3, #12
 8003a94:	d008      	beq.n	8003aa8 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a96:	f7ff fd03 	bl	80034a0 <HAL_GetTick>
 8003a9a:	1b00      	subs	r0, r0, r4
 8003a9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003aa0:	4298      	cmp	r0, r3
 8003aa2:	d9f3      	bls.n	8003a8c <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8003aa4:	2403      	movs	r4, #3
 8003aa6:	e7e3      	b.n	8003a70 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <HAL_RCC_DeInit+0xe8>)
 8003aaa:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <HAL_RCC_DeInit+0xec>)
 8003aac:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <HAL_RCC_DeInit+0xf0>)
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	f7ff fcb1 	bl	8003418 <HAL_InitTick>
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	b108      	cbz	r0, 8003abe <HAL_RCC_DeInit+0x76>
    return HAL_ERROR;
 8003aba:	2401      	movs	r4, #1
 8003abc:	e7d8      	b.n	8003a70 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8003abe:	f7ff fcef 	bl	80034a0 <HAL_GetTick>
 8003ac2:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ac4:	4a19      	ldr	r2, [pc, #100]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003acc:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ad6:	d006      	beq.n	8003ae6 <HAL_RCC_DeInit+0x9e>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7ff fce2 	bl	80034a0 <HAL_GetTick>
 8003adc:	1b40      	subs	r0, r0, r5
 8003ade:	2802      	cmp	r0, #2
 8003ae0:	d9f5      	bls.n	8003ace <HAL_RCC_DeInit+0x86>
      return HAL_TIMEOUT;
 8003ae2:	2403      	movs	r4, #3
 8003ae4:	e7c4      	b.n	8003a70 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 8003ae6:	4e11      	ldr	r6, [pc, #68]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8003aec:	f7ff fcd8 	bl	80034a0 <HAL_GetTick>
 8003af0:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8003af2:	6833      	ldr	r3, [r6, #0]
 8003af4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003af8:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b02:	d006      	beq.n	8003b12 <HAL_RCC_DeInit+0xca>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7ff fccc 	bl	80034a0 <HAL_GetTick>
 8003b08:	1b40      	subs	r0, r0, r5
 8003b0a:	2864      	cmp	r0, #100	; 0x64
 8003b0c:	d9f5      	bls.n	8003afa <HAL_RCC_DeInit+0xb2>
      return HAL_TIMEOUT;
 8003b0e:	2403      	movs	r4, #3
 8003b10:	e7ae      	b.n	8003a70 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_DeInit+0xe4>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b1a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b28:	e7a2      	b.n	8003a70 <HAL_RCC_DeInit+0x28>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	20000050 	.word	0x20000050
 8003b34:	007a1200 	.word	0x007a1200
 8003b38:	20000058 	.word	0x20000058

08003b3c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	f000 81f1 	beq.w	8003f24 <HAL_RCC_OscConfig+0x3e8>
{
 8003b42:	b570      	push	{r4, r5, r6, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b48:	6803      	ldr	r3, [r0, #0]
 8003b4a:	f013 0f01 	tst.w	r3, #1
 8003b4e:	d02c      	beq.n	8003baa <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b50:	4baa      	ldr	r3, [pc, #680]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d01d      	beq.n	8003b98 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b5c:	4ba7      	ldr	r3, [pc, #668]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d012      	beq.n	8003b8e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	6863      	ldr	r3, [r4, #4]
 8003b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6e:	d041      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xb8>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d155      	bne.n	8003c20 <HAL_RCC_OscConfig+0xe4>
 8003b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b78:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e037      	b.n	8003bfe <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b8e:	4b9b      	ldr	r3, [pc, #620]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b96:	d0e7      	beq.n	8003b68 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	4b98      	ldr	r3, [pc, #608]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_OscConfig+0x6e>
 8003ba2:	6863      	ldr	r3, [r4, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 81bf 	beq.w	8003f28 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	f013 0f02 	tst.w	r3, #2
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb2:	4b92      	ldr	r3, [pc, #584]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f013 0f0c 	tst.w	r3, #12
 8003bba:	d05f      	beq.n	8003c7c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bbc:	4b8f      	ldr	r3, [pc, #572]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d054      	beq.n	8003c72 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc8:	6923      	ldr	r3, [r4, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8089 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8003bd0:	4b8b      	ldr	r3, [pc, #556]	; (8003e00 <HAL_RCC_OscConfig+0x2c4>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003bd6:	f7ff fc63 	bl	80034a0 <HAL_GetTick>
 8003bda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bdc:	4b87      	ldr	r3, [pc, #540]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f013 0f02 	tst.w	r3, #2
 8003be4:	d174      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be6:	f7ff fc5b 	bl	80034a0 <HAL_GetTick>
 8003bea:	1b40      	subs	r0, r0, r5
 8003bec:	2802      	cmp	r0, #2
 8003bee:	d9f5      	bls.n	8003bdc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003bf0:	2003      	movs	r0, #3
 8003bf2:	e19e      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf4:	4a81      	ldr	r2, [pc, #516]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003bf6:	6813      	ldr	r3, [r2, #0]
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bfe:	6863      	ldr	r3, [r4, #4]
 8003c00:	b343      	cbz	r3, 8003c54 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003c02:	f7ff fc4d 	bl	80034a0 <HAL_GetTick>
 8003c06:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c08:	4b7c      	ldr	r3, [pc, #496]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c10:	d1cb      	bne.n	8003baa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c12:	f7ff fc45 	bl	80034a0 <HAL_GetTick>
 8003c16:	1b40      	subs	r0, r0, r5
 8003c18:	2864      	cmp	r0, #100	; 0x64
 8003c1a:	d9f5      	bls.n	8003c08 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	e188      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_OscConfig+0xfe>
 8003c26:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e7e1      	b.n	8003bfe <HAL_RCC_OscConfig+0xc2>
 8003c3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c3e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e7d4      	b.n	8003bfe <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003c54:	f7ff fc24 	bl	80034a0 <HAL_GetTick>
 8003c58:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	4b68      	ldr	r3, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c62:	d0a2      	beq.n	8003baa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7ff fc1c 	bl	80034a0 <HAL_GetTick>
 8003c68:	1b40      	subs	r0, r0, r5
 8003c6a:	2864      	cmp	r0, #100	; 0x64
 8003c6c:	d9f5      	bls.n	8003c5a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003c6e:	2003      	movs	r0, #3
 8003c70:	e15f      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c72:	4b62      	ldr	r3, [pc, #392]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c7a:	d1a5      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7c:	4b5f      	ldr	r3, [pc, #380]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f013 0f02 	tst.w	r3, #2
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
 8003c86:	6923      	ldr	r3, [r4, #16]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	f040 814f 	bne.w	8003f2c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4a5b      	ldr	r2, [pc, #364]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003c90:	6813      	ldr	r3, [r2, #0]
 8003c92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c96:	6961      	ldr	r1, [r4, #20]
 8003c98:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c9c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	f013 0f08 	tst.w	r3, #8
 8003ca4:	d032      	beq.n	8003d0c <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca6:	69a3      	ldr	r3, [r4, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d045      	beq.n	8003d38 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003cac:	4b55      	ldr	r3, [pc, #340]	; (8003e04 <HAL_RCC_OscConfig+0x2c8>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003cb2:	f7ff fbf5 	bl	80034a0 <HAL_GetTick>
 8003cb6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb8:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f013 0f02 	tst.w	r3, #2
 8003cc0:	d121      	bne.n	8003d06 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7ff fbed 	bl	80034a0 <HAL_GetTick>
 8003cc6:	1b40      	subs	r0, r0, r5
 8003cc8:	2802      	cmp	r0, #2
 8003cca:	d9f5      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8003ccc:	2003      	movs	r0, #3
 8003cce:	e130      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003cd8:	6961      	ldr	r1, [r4, #20]
 8003cda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e7dd      	b.n	8003c9e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003ce2:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <HAL_RCC_OscConfig+0x2c4>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ce8:	f7ff fbda 	bl	80034a0 <HAL_GetTick>
 8003cec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f013 0f02 	tst.w	r3, #2
 8003cf6:	d0d2      	beq.n	8003c9e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf8:	f7ff fbd2 	bl	80034a0 <HAL_GetTick>
 8003cfc:	1b40      	subs	r0, r0, r5
 8003cfe:	2802      	cmp	r0, #2
 8003d00:	d9f5      	bls.n	8003cee <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8003d02:	2003      	movs	r0, #3
 8003d04:	e115      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7ff fe88 	bl	8003a1c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	f013 0f04 	tst.w	r3, #4
 8003d12:	f000 8097 	beq.w	8003e44 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d16:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d1e:	d11d      	bne.n	8003d5c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d20:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d28:	61da      	str	r2, [r3, #28]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d34:	2501      	movs	r5, #1
 8003d36:	e012      	b.n	8003d5e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8003d38:	4b32      	ldr	r3, [pc, #200]	; (8003e04 <HAL_RCC_OscConfig+0x2c8>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d3e:	f7ff fbaf 	bl	80034a0 <HAL_GetTick>
 8003d42:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f013 0f02 	tst.w	r3, #2
 8003d4c:	d0de      	beq.n	8003d0c <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7ff fba7 	bl	80034a0 <HAL_GetTick>
 8003d52:	1b40      	subs	r0, r0, r5
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d9f5      	bls.n	8003d44 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8003d58:	2003      	movs	r0, #3
 8003d5a:	e0ea      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003d5c:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCC_OscConfig+0x2cc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d66:	d011      	beq.n	8003d8c <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d68:	68e3      	ldr	r3, [r4, #12]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d022      	beq.n	8003db4 <HAL_RCC_OscConfig+0x278>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d138      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2a8>
 8003d72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d76:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	621a      	str	r2, [r3, #32]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	f022 0204 	bic.w	r2, r2, #4
 8003d88:	621a      	str	r2, [r3, #32]
 8003d8a:	e018      	b.n	8003dbe <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <HAL_RCC_OscConfig+0x2cc>)
 8003d8e:	6813      	ldr	r3, [r2, #0]
 8003d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d94:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003d96:	f7ff fb83 	bl	80034a0 <HAL_GetTick>
 8003d9a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_RCC_OscConfig+0x2cc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003da4:	d1e0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da6:	f7ff fb7b 	bl	80034a0 <HAL_GetTick>
 8003daa:	1b80      	subs	r0, r0, r6
 8003dac:	2864      	cmp	r0, #100	; 0x64
 8003dae:	d9f5      	bls.n	8003d9c <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8003db0:	2003      	movs	r0, #3
 8003db2:	e0be      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003db6:	6a13      	ldr	r3, [r2, #32]
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbe:	68e3      	ldr	r3, [r4, #12]
 8003dc0:	b373      	cbz	r3, 8003e20 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003dc2:	f7ff fb6d 	bl	80034a0 <HAL_GetTick>
 8003dc6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f013 0f02 	tst.w	r3, #2
 8003dd0:	d137      	bne.n	8003e42 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7ff fb65 	bl	80034a0 <HAL_GetTick>
 8003dd6:	1b80      	subs	r0, r0, r6
 8003dd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ddc:	4298      	cmp	r0, r3
 8003dde:	d9f3      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8003de0:	2003      	movs	r0, #3
 8003de2:	e0a6      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d011      	beq.n	8003e0c <HAL_RCC_OscConfig+0x2d0>
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <HAL_RCC_OscConfig+0x2c0>)
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	621a      	str	r2, [r3, #32]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	f022 0204 	bic.w	r2, r2, #4
 8003df8:	621a      	str	r2, [r3, #32]
 8003dfa:	e7e0      	b.n	8003dbe <HAL_RCC_OscConfig+0x282>
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	42420000 	.word	0x42420000
 8003e04:	42420480 	.word	0x42420480
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	4b4d      	ldr	r3, [pc, #308]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	f042 0204 	orr.w	r2, r2, #4
 8003e14:	621a      	str	r2, [r3, #32]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	621a      	str	r2, [r3, #32]
 8003e1e:	e7ce      	b.n	8003dbe <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8003e20:	f7ff fb3e 	bl	80034a0 <HAL_GetTick>
 8003e24:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f013 0f02 	tst.w	r3, #2
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7ff fb36 	bl	80034a0 <HAL_GetTick>
 8003e34:	1b80      	subs	r0, r0, r6
 8003e36:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e3a:	4298      	cmp	r0, r3
 8003e3c:	d9f3      	bls.n	8003e26 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003e3e:	2003      	movs	r0, #3
 8003e40:	e077      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8003e42:	b9e5      	cbnz	r5, 8003e7e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e44:	69e3      	ldr	r3, [r4, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d072      	beq.n	8003f30 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4a:	4a3e      	ldr	r2, [pc, #248]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003e4c:	6852      	ldr	r2, [r2, #4]
 8003e4e:	f002 020c 	and.w	r2, r2, #12
 8003e52:	2a08      	cmp	r2, #8
 8003e54:	d056      	beq.n	8003f04 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d017      	beq.n	8003e8a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCC_OscConfig+0x40c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e60:	f7ff fb1e 	bl	80034a0 <HAL_GetTick>
 8003e64:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e66:	4b37      	ldr	r3, [pc, #220]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e6e:	d047      	beq.n	8003f00 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7ff fb16 	bl	80034a0 <HAL_GetTick>
 8003e74:	1b00      	subs	r0, r0, r4
 8003e76:	2802      	cmp	r0, #2
 8003e78:	d9f5      	bls.n	8003e66 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003e7a:	2003      	movs	r0, #3
 8003e7c:	e059      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4a31      	ldr	r2, [pc, #196]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003e80:	69d3      	ldr	r3, [r2, #28]
 8003e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e86:	61d3      	str	r3, [r2, #28]
 8003e88:	e7dc      	b.n	8003e44 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <HAL_RCC_OscConfig+0x40c>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e90:	f7ff fb06 	bl	80034a0 <HAL_GetTick>
 8003e94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e96:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e9e:	d006      	beq.n	8003eae <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7ff fafe 	bl	80034a0 <HAL_GetTick>
 8003ea4:	1b40      	subs	r0, r0, r5
 8003ea6:	2802      	cmp	r0, #2
 8003ea8:	d9f5      	bls.n	8003e96 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003eaa:	2003      	movs	r0, #3
 8003eac:	e041      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003eae:	6a23      	ldr	r3, [r4, #32]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d01a      	beq.n	8003eec <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb6:	4923      	ldr	r1, [pc, #140]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003eb8:	684b      	ldr	r3, [r1, #4]
 8003eba:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003ebe:	6a22      	ldr	r2, [r4, #32]
 8003ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ec2:	4302      	orrs	r2, r0
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <HAL_RCC_OscConfig+0x40c>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ece:	f7ff fae7 	bl	80034a0 <HAL_GetTick>
 8003ed2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003edc:	d10e      	bne.n	8003efc <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ede:	f7ff fadf 	bl	80034a0 <HAL_GetTick>
 8003ee2:	1b00      	subs	r0, r0, r4
 8003ee4:	2802      	cmp	r0, #2
 8003ee6:	d9f5      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003ee8:	2003      	movs	r0, #3
 8003eea:	e022      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eec:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003eee:	6853      	ldr	r3, [r2, #4]
 8003ef0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ef4:	68a1      	ldr	r1, [r4, #8]
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	6053      	str	r3, [r2, #4]
 8003efa:	e7dc      	b.n	8003eb6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003efc:	2000      	movs	r0, #0
 8003efe:	e018      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
 8003f00:	2000      	movs	r0, #0
 8003f02:	e016      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d016      	beq.n	8003f36 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <HAL_RCC_OscConfig+0x408>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003f10:	6a22      	ldr	r2, [r4, #32]
 8003f12:	4291      	cmp	r1, r2
 8003f14:	d111      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f16:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10e      	bne.n	8003f3e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003f20:	2000      	movs	r0, #0
 8003f22:	e006      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8003f24:	2001      	movs	r0, #1
}
 8003f26:	4770      	bx	lr
        return HAL_ERROR;
 8003f28:	2001      	movs	r0, #1
 8003f2a:	e002      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8003f30:	2000      	movs	r0, #0
}
 8003f32:	b002      	add	sp, #8
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003f36:	2001      	movs	r0, #1
 8003f38:	e7fb      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	e7f9      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
 8003f3e:	2001      	movs	r0, #1
 8003f40:	e7f7      	b.n	8003f32 <HAL_RCC_OscConfig+0x3f6>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	42420060 	.word	0x42420060

08003f4c <HAL_RCC_GetSysClockFreq>:
{
 8003f4c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f52:	f10d 0c18 	add.w	ip, sp, #24
 8003f56:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f5a:	f240 2301 	movw	r3, #513	; 0x201
 8003f5e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_RCC_GetSysClockFreq+0x60>)
 8003f64:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003f66:	f003 020c 	and.w	r2, r3, #12
 8003f6a:	2a08      	cmp	r2, #8
 8003f6c:	d002      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003f6e:	4810      	ldr	r0, [pc, #64]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003f70:	b006      	add	sp, #24
 8003f72:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f74:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003f78:	4462      	add	r2, ip
 8003f7a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f7e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003f82:	d00c      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_GetSysClockFreq+0x60>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003f8c:	4463      	add	r3, ip
 8003f8e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f92:	4807      	ldr	r0, [pc, #28]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x64>)
 8003f94:	fb00 f002 	mul.w	r0, r0, r2
 8003f98:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f9c:	e7e8      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f9e:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x68>)
 8003fa0:	fb00 f002 	mul.w	r0, r0, r2
 8003fa4:	e7e4      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x24>
 8003fa6:	bf00      	nop
 8003fa8:	0800a590 	.word	0x0800a590
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	007a1200 	.word	0x007a1200
 8003fb4:	003d0900 	.word	0x003d0900

08003fb8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f000 80a0 	beq.w	80040fe <HAL_RCC_ClockConfig+0x146>
{
 8003fbe:	b570      	push	{r4, r5, r6, lr}
 8003fc0:	460d      	mov	r5, r1
 8003fc2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b52      	ldr	r3, [pc, #328]	; (8004110 <HAL_RCC_ClockConfig+0x158>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	d20b      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd0:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <HAL_RCC_ClockConfig+0x158>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	f023 0307 	bic.w	r3, r3, #7
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	428b      	cmp	r3, r1
 8003fe4:	f040 808d 	bne.w	8004102 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f013 0f02 	tst.w	r3, #2
 8003fee:	d017      	beq.n	8004020 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	f013 0f04 	tst.w	r3, #4
 8003ff4:	d004      	beq.n	8004000 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff6:	4a47      	ldr	r2, [pc, #284]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 8003ff8:	6853      	ldr	r3, [r2, #4]
 8003ffa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ffe:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f013 0f08 	tst.w	r3, #8
 8004006:	d004      	beq.n	8004012 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004008:	4a42      	ldr	r2, [pc, #264]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 800400a:	6853      	ldr	r3, [r2, #4]
 800400c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004010:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004012:	4a40      	ldr	r2, [pc, #256]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 8004014:	6853      	ldr	r3, [r2, #4]
 8004016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401a:	68a1      	ldr	r1, [r4, #8]
 800401c:	430b      	orrs	r3, r1
 800401e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f013 0f01 	tst.w	r3, #1
 8004026:	d031      	beq.n	800408c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d020      	beq.n	8004070 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402e:	2b02      	cmp	r3, #2
 8004030:	d025      	beq.n	800407e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004032:	4a38      	ldr	r2, [pc, #224]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	f012 0f02 	tst.w	r2, #2
 800403a:	d064      	beq.n	8004106 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403c:	4935      	ldr	r1, [pc, #212]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 800403e:	684a      	ldr	r2, [r1, #4]
 8004040:	f022 0203 	bic.w	r2, r2, #3
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004048:	f7ff fa2a 	bl	80034a0 <HAL_GetTick>
 800404c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	4b31      	ldr	r3, [pc, #196]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800405c:	d016      	beq.n	800408c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405e:	f7ff fa1f 	bl	80034a0 <HAL_GetTick>
 8004062:	1b80      	subs	r0, r0, r6
 8004064:	f241 3388 	movw	r3, #5000	; 0x1388
 8004068:	4298      	cmp	r0, r3
 800406a:	d9f0      	bls.n	800404e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800406c:	2003      	movs	r0, #3
 800406e:	e045      	b.n	80040fc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004070:	4a28      	ldr	r2, [pc, #160]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004078:	d1e0      	bne.n	800403c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800407a:	2001      	movs	r0, #1
 800407c:	e03e      	b.n	80040fc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	4a25      	ldr	r2, [pc, #148]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004086:	d1d9      	bne.n	800403c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004088:	2001      	movs	r0, #1
 800408a:	e037      	b.n	80040fc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCC_ClockConfig+0x158>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	42ab      	cmp	r3, r5
 8004096:	d90a      	bls.n	80040ae <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_RCC_ClockConfig+0x158>)
 800409a:	6813      	ldr	r3, [r2, #0]
 800409c:	f023 0307 	bic.w	r3, r3, #7
 80040a0:	432b      	orrs	r3, r5
 80040a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a4:	6813      	ldr	r3, [r2, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	42ab      	cmp	r3, r5
 80040ac:	d12d      	bne.n	800410a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	f013 0f04 	tst.w	r3, #4
 80040b4:	d006      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b6:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 80040b8:	6853      	ldr	r3, [r2, #4]
 80040ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040be:	68e1      	ldr	r1, [r4, #12]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	f013 0f08 	tst.w	r3, #8
 80040ca:	d007      	beq.n	80040dc <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040cc:	4a11      	ldr	r2, [pc, #68]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 80040ce:	6853      	ldr	r3, [r2, #4]
 80040d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80040d4:	6921      	ldr	r1, [r4, #16]
 80040d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040da:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040dc:	f7ff ff36 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <HAL_RCC_ClockConfig+0x15c>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040e8:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <HAL_RCC_ClockConfig+0x160>)
 80040ea:	5cd3      	ldrb	r3, [r2, r3]
 80040ec:	40d8      	lsrs	r0, r3
 80040ee:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x164>)
 80040f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_ClockConfig+0x168>)
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	f7ff f98f 	bl	8003418 <HAL_InitTick>
  return HAL_OK;
 80040fa:	2000      	movs	r0, #0
}
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80040fe:	2001      	movs	r0, #1
}
 8004100:	4770      	bx	lr
    return HAL_ERROR;
 8004102:	2001      	movs	r0, #1
 8004104:	e7fa      	b.n	80040fc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004106:	2001      	movs	r0, #1
 8004108:	e7f8      	b.n	80040fc <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800410a:	2001      	movs	r0, #1
 800410c:	e7f6      	b.n	80040fc <HAL_RCC_ClockConfig+0x144>
 800410e:	bf00      	nop
 8004110:	40022000 	.word	0x40022000
 8004114:	40021000 	.word	0x40021000
 8004118:	0800a578 	.word	0x0800a578
 800411c:	20000050 	.word	0x20000050
 8004120:	20000058 	.word	0x20000058

08004124 <HAL_RCC_GetHCLKFreq>:
}
 8004124:	4b01      	ldr	r3, [pc, #4]	; (800412c <HAL_RCC_GetHCLKFreq+0x8>)
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000050 	.word	0x20000050

08004130 <HAL_RCC_GetPCLK1Freq>:
{
 8004130:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004132:	f7ff fff7 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004136:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800413e:	4a03      	ldr	r2, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004140:	5cd3      	ldrb	r3, [r2, r3]
}
 8004142:	40d8      	lsrs	r0, r3
 8004144:	bd08      	pop	{r3, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000
 800414c:	0800a588 	.word	0x0800a588

08004150 <HAL_RCC_GetPCLK2Freq>:
{
 8004150:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004152:	f7ff ffe7 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800415e:	4a03      	ldr	r2, [pc, #12]	; (800416c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004160:	5cd3      	ldrb	r3, [r2, r3]
}
 8004162:	40d8      	lsrs	r0, r3
 8004164:	bd08      	pop	{r3, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	0800a588 	.word	0x0800a588

08004170 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004176:	6803      	ldr	r3, [r0, #0]
 8004178:	f013 0f01 	tst.w	r3, #1
 800417c:	d034      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004186:	d147      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004190:	61da      	str	r2, [r3, #28]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800419c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041a6:	d039      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80041b0:	d011      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 80041b2:	6862      	ldr	r2, [r4, #4]
 80041b4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041bc:	4a2e      	ldr	r2, [pc, #184]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80041be:	6a13      	ldr	r3, [r2, #32]
 80041c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041c4:	492e      	ldr	r1, [pc, #184]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80041c6:	2601      	movs	r6, #1
 80041c8:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ca:	2600      	movs	r6, #0
 80041cc:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041ce:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041d0:	f013 0f01 	tst.w	r3, #1
 80041d4:	d136      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d6:	4a28      	ldr	r2, [pc, #160]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80041d8:	6a13      	ldr	r3, [r2, #32]
 80041da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041de:	6861      	ldr	r1, [r4, #4]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041e4:	2d00      	cmp	r5, #0
 80041e6:	d13e      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	f013 0f02 	tst.w	r3, #2
 80041ee:	d006      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80041f2:	6853      	ldr	r3, [r2, #4]
 80041f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80041f8:	68a1      	ldr	r1, [r4, #8]
 80041fa:	430b      	orrs	r3, r1
 80041fc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	f013 0f10 	tst.w	r3, #16
 8004204:	d034      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004206:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004208:	6853      	ldr	r3, [r2, #4]
 800420a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800420e:	68e1      	ldr	r1, [r4, #12]
 8004210:	430b      	orrs	r3, r1
 8004212:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004214:	2000      	movs	r0, #0
 8004216:	e02c      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x102>
    FlagStatus pwrclkchanged = RESET;
 8004218:	2500      	movs	r5, #0
 800421a:	e7c0      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421c:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004226:	f7ff f93b 	bl	80034a0 <HAL_GetTick>
 800422a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004234:	d1b8      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7ff f933 	bl	80034a0 <HAL_GetTick>
 800423a:	1b80      	subs	r0, r0, r6
 800423c:	2864      	cmp	r0, #100	; 0x64
 800423e:	d9f5      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8004240:	2003      	movs	r0, #3
 8004242:	e016      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x102>
        tickstart = HAL_GetTick();
 8004244:	f7ff f92c 	bl	80034a0 <HAL_GetTick>
 8004248:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f013 0f02 	tst.w	r3, #2
 8004252:	d1c0      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7ff f924 	bl	80034a0 <HAL_GetTick>
 8004258:	1b80      	subs	r0, r0, r6
 800425a:	f241 3388 	movw	r3, #5000	; 0x1388
 800425e:	4298      	cmp	r0, r3
 8004260:	d9f3      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
 8004262:	2003      	movs	r0, #3
 8004264:	e005      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x102>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004266:	69d3      	ldr	r3, [r2, #28]
 8004268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426c:	61d3      	str	r3, [r2, #28]
 800426e:	e7bb      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8004270:	2000      	movs	r0, #0
}
 8004272:	b002      	add	sp, #8
 8004274:	bd70      	pop	{r4, r5, r6, pc}
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	40007000 	.word	0x40007000
 8004280:	42420440 	.word	0x42420440

08004284 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004284:	b510      	push	{r4, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800428c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800428e:	f10d 0c18 	add.w	ip, sp, #24
 8004292:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004296:	f240 2301 	movw	r3, #513	; 0x201
 800429a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800429e:	2c02      	cmp	r4, #2
 80042a0:	d052      	beq.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80042a2:	2c10      	cmp	r4, #16
 80042a4:	d004      	beq.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 80042a6:	2c01      	cmp	r4, #1
 80042a8:	d02c      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 80042aa:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80042ac:	b006      	add	sp, #24
 80042ae:	bd10      	pop	{r4, pc}
      temp_reg = RCC->CFGR;
 80042b0:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80042b2:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80042ba:	d0f7      	beq.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042bc:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80042c0:	a906      	add	r1, sp, #24
 80042c2:	440b      	add	r3, r1
 80042c4:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042c8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80042cc:	d016      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ce:	4b26      	ldr	r3, [pc, #152]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80042d6:	440b      	add	r3, r1
 80042d8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042dc:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 80042de:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e2:	fb00 f003 	mul.w	r0, r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80042ee:	d1dd      	bne.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          frequency = (pllclk * 2) / 3;
 80042f0:	0040      	lsls	r0, r0, #1
 80042f2:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80042f4:	fba3 3000 	umull	r3, r0, r3, r0
 80042f8:	0840      	lsrs	r0, r0, #1
 80042fa:	e7d7      	b.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 80042fe:	fb03 f000 	mul.w	r0, r3, r0
 8004302:	e7f0      	b.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      temp_reg = RCC->BDCR;
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8004306:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004308:	f240 3202 	movw	r2, #770	; 0x302
 800430c:	401a      	ands	r2, r3
 800430e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004312:	d024      	beq.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d004      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800431e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004322:	d009      	beq.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004324:	2000      	movs	r0, #0
 8004326:	e7c1      	b.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004328:	4a0f      	ldr	r2, [pc, #60]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800432a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800432c:	f012 0f02 	tst.w	r2, #2
 8004330:	d0f5      	beq.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = LSI_VALUE;
 8004332:	f649 4040 	movw	r0, #40000	; 0x9c40
 8004336:	e7b9      	b.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004340:	d0b4      	beq.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 8004342:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 8004346:	e7b1      	b.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004348:	f7ff ff02 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004354:	3301      	adds	r3, #1
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800435c:	e7a6      	b.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = LSE_VALUE;
 800435e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004362:	e7a3      	b.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8004364:	0800a590 	.word	0x0800a590
 8004368:	40021000 	.word	0x40021000
 800436c:	007a1200 	.word	0x007a1200
 8004370:	aaaaaaab 	.word	0xaaaaaaab
 8004374:	003d0900 	.word	0x003d0900

08004378 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 800437c:	f7ff f890 	bl	80034a0 <HAL_GetTick>
 8004380:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	f012 0f20 	tst.w	r2, #32
 800438a:	d107      	bne.n	800439c <RTC_EnterInitMode+0x24>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800438c:	f7ff f888 	bl	80034a0 <HAL_GetTick>
 8004390:	1b40      	subs	r0, r0, r5
 8004392:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004396:	d9f4      	bls.n	8004382 <RTC_EnterInitMode+0xa>
    {
      return HAL_TIMEOUT;
 8004398:	2003      	movs	r0, #3
 800439a:	e004      	b.n	80043a6 <RTC_EnterInitMode+0x2e>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	f042 0210 	orr.w	r2, r2, #16
 80043a2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80043a4:	2000      	movs	r0, #0
}
 80043a6:	bd38      	pop	{r3, r4, r5, pc}

080043a8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ac:	6802      	ldr	r2, [r0, #0]
 80043ae:	6853      	ldr	r3, [r2, #4]
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80043b6:	f7ff f873 	bl	80034a0 <HAL_GetTick>
 80043ba:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f013 0f20 	tst.w	r3, #32
 80043c4:	d107      	bne.n	80043d6 <RTC_ExitInitMode+0x2e>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043c6:	f7ff f86b 	bl	80034a0 <HAL_GetTick>
 80043ca:	1b40      	subs	r0, r0, r5
 80043cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80043d0:	d9f4      	bls.n	80043bc <RTC_ExitInitMode+0x14>
    {
      return HAL_TIMEOUT;
 80043d2:	2003      	movs	r0, #3
 80043d4:	e000      	b.n	80043d8 <RTC_ExitInitMode+0x30>
    }
  }

  return HAL_OK;
 80043d6:	2000      	movs	r0, #0
}
 80043d8:	bd38      	pop	{r3, r4, r5, pc}

080043da <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 80043da:	b1c0      	cbz	r0, 800440e <HAL_RTC_WaitForSynchro+0x34>
{
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80043e0:	6802      	ldr	r2, [r0, #0]
 80043e2:	6853      	ldr	r3, [r2, #4]
 80043e4:	f023 0308 	bic.w	r3, r3, #8
 80043e8:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80043ea:	f7ff f859 	bl	80034a0 <HAL_GetTick>
 80043ee:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f013 0f08 	tst.w	r3, #8
 80043f8:	d107      	bne.n	800440a <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043fa:	f7ff f851 	bl	80034a0 <HAL_GetTick>
 80043fe:	1b00      	subs	r0, r0, r4
 8004400:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004404:	d9f4      	bls.n	80043f0 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8004406:	2003      	movs	r0, #3
 8004408:	e000      	b.n	800440c <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 800440a:	2000      	movs	r0, #0
}
 800440c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800440e:	2001      	movs	r0, #1
}
 8004410:	4770      	bx	lr
	...

08004414 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8004414:	2800      	cmp	r0, #0
 8004416:	d057      	beq.n	80044c8 <HAL_RTC_Init+0xb4>
{
 8004418:	b510      	push	{r4, lr}
 800441a:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800441c:	7c43      	ldrb	r3, [r0, #17]
 800441e:	b14b      	cbz	r3, 8004434 <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004420:	2302      	movs	r3, #2
 8004422:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff ffd8 	bl	80043da <HAL_RTC_WaitForSynchro>
 800442a:	b138      	cbz	r0, 800443c <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800442c:	2304      	movs	r3, #4
 800442e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8004430:	2001      	movs	r0, #1
}
 8004432:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004434:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8004436:	f7fe fd6b 	bl	8002f10 <HAL_RTC_MspInit>
 800443a:	e7f1      	b.n	8004420 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800443c:	4620      	mov	r0, r4
 800443e:	f7ff ff9b 	bl	8004378 <RTC_EnterInitMode>
 8004442:	bb60      	cbnz	r0, 800449e <HAL_RTC_Init+0x8a>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	6853      	ldr	r3, [r2, #4]
 8004448:	f023 0307 	bic.w	r3, r3, #7
 800444c:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	b123      	cbz	r3, 800445c <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004452:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <HAL_RTC_Init+0xb8>)
 8004454:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <HAL_RTC_Init+0xb8>)
 800445e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004460:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8004464:	68a1      	ldr	r1, [r4, #8]
 8004466:	430b      	orrs	r3, r1
 8004468:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800446a:	6862      	ldr	r2, [r4, #4]
 800446c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004470:	d019      	beq.n	80044a6 <HAL_RTC_Init+0x92>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004472:	6821      	ldr	r1, [r4, #0]
 8004474:	688b      	ldr	r3, [r1, #8]
 8004476:	f023 030f 	bic.w	r3, r3, #15
 800447a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800447e:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004480:	6821      	ldr	r1, [r4, #0]
 8004482:	68cb      	ldr	r3, [r1, #12]
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	b292      	uxth	r2, r2
 800448a:	4313      	orrs	r3, r2
 800448c:	60cb      	str	r3, [r1, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800448e:	4620      	mov	r0, r4
 8004490:	f7ff ff8a 	bl	80043a8 <RTC_ExitInitMode>
 8004494:	b188      	cbz	r0, 80044ba <HAL_RTC_Init+0xa6>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004496:	2304      	movs	r3, #4
 8004498:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 800449a:	2001      	movs	r0, #1
 800449c:	e7c9      	b.n	8004432 <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800449e:	2304      	movs	r3, #4
 80044a0:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80044a2:	2001      	movs	r0, #1
 80044a4:	e7c5      	b.n	8004432 <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7ff feec 	bl	8004284 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80044ac:	b108      	cbz	r0, 80044b2 <HAL_RTC_Init+0x9e>
        prescaler = prescaler - 1U;
 80044ae:	1e42      	subs	r2, r0, #1
 80044b0:	e7df      	b.n	8004472 <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044b2:	2304      	movs	r3, #4
 80044b4:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 80044b6:	2001      	movs	r0, #1
 80044b8:	e7bb      	b.n	8004432 <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80044be:	2301      	movs	r3, #1
 80044c0:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80044c2:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80044c4:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80044c6:	e7b4      	b.n	8004432 <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 80044c8:	2001      	movs	r0, #1
}
 80044ca:	4770      	bx	lr
 80044cc:	40006c00 	.word	0x40006c00

080044d0 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 80044d0:	0089      	lsls	r1, r1, #2
 80044d2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80044d6:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80044da:	b292      	uxth	r2, r2
 80044dc:	600a      	str	r2, [r1, #0]
}
 80044de:	4770      	bx	lr

080044e0 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 80044e0:	0089      	lsls	r1, r1, #2
 80044e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80044e6:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80044ea:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80044ec:	b280      	uxth	r0, r0
 80044ee:	4770      	bx	lr

080044f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	4605      	mov	r5, r0
 80044f8:	4688      	mov	r8, r1
 80044fa:	4617      	mov	r7, r2
 80044fc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044fe:	f7fe ffcf 	bl	80034a0 <HAL_GetTick>
 8004502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004504:	1a1b      	subs	r3, r3, r0
 8004506:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800450a:	f7fe ffc9 	bl	80034a0 <HAL_GetTick>
 800450e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004518:	fb09 f303 	mul.w	r3, r9, r3
 800451c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800451e:	682b      	ldr	r3, [r5, #0]
 8004520:	689c      	ldr	r4, [r3, #8]
 8004522:	ea38 0304 	bics.w	r3, r8, r4
 8004526:	bf0c      	ite	eq
 8004528:	2401      	moveq	r4, #1
 800452a:	2400      	movne	r4, #0
 800452c:	42bc      	cmp	r4, r7
 800452e:	d040      	beq.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004530:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004534:	d0f3      	beq.n	800451e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004536:	f7fe ffb3 	bl	80034a0 <HAL_GetTick>
 800453a:	eba0 000a 	sub.w	r0, r0, sl
 800453e:	4548      	cmp	r0, r9
 8004540:	d20a      	bcs.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x68>
 8004542:	f1b9 0f00 	cmp.w	r9, #0
 8004546:	d007      	beq.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004548:	9a01      	ldr	r2, [sp, #4]
 800454a:	b102      	cbz	r2, 800454e <SPI_WaitFlagStateUntilTimeout+0x5e>
 800454c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800454e:	9b01      	ldr	r3, [sp, #4]
 8004550:	3b01      	subs	r3, #1
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	4691      	mov	r9, r2
 8004556:	e7e2      	b.n	800451e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004558:	682a      	ldr	r2, [r5, #0]
 800455a:	6853      	ldr	r3, [r2, #4]
 800455c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004560:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004562:	686b      	ldr	r3, [r5, #4]
 8004564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004568:	d00b      	beq.n	8004582 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800456a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004570:	d014      	beq.n	800459c <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8004572:	2301      	movs	r3, #1
 8004574:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004578:	2300      	movs	r3, #0
 800457a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 800457e:	2003      	movs	r0, #3
 8004580:	e018      	b.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004582:	68ab      	ldr	r3, [r5, #8]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d002      	beq.n	8004590 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	d1ec      	bne.n	800456a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004590:	682a      	ldr	r2, [r5, #0]
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e7e6      	b.n	800456a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800459c:	682a      	ldr	r2, [r5, #0]
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	682a      	ldr	r2, [r5, #0]
 80045a8:	6813      	ldr	r3, [r2, #0]
 80045aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e7df      	b.n	8004572 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 80045b2:	2000      	movs	r0, #0
}
 80045b4:	b002      	add	sp, #8
 80045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ba:	bf00      	nop
 80045bc:	20000050 	.word	0x20000050

080045c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b510      	push	{r4, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	4604      	mov	r4, r0
 80045c6:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	9200      	str	r2, [sp, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	f7ff ff8f 	bl	80044f0 <SPI_WaitFlagStateUntilTimeout>
 80045d2:	b908      	cbnz	r0, 80045d8 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80045d4:	b002      	add	sp, #8
 80045d6:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045da:	f043 0320 	orr.w	r3, r3, #32
 80045de:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80045e0:	2003      	movs	r0, #3
 80045e2:	e7f7      	b.n	80045d4 <SPI_EndRxTxTransaction+0x14>

080045e4 <SPI_EndRxTransaction>:
{
 80045e4:	b510      	push	{r4, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	4604      	mov	r4, r0
 80045ea:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ec:	6841      	ldr	r1, [r0, #4]
 80045ee:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80045f2:	d010      	beq.n	8004616 <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80045f4:	6861      	ldr	r1, [r4, #4]
 80045f6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80045fa:	d103      	bne.n	8004604 <SPI_EndRxTransaction+0x20>
 80045fc:	68a1      	ldr	r1, [r4, #8]
 80045fe:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004602:	d015      	beq.n	8004630 <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004604:	9200      	str	r2, [sp, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	2180      	movs	r1, #128	; 0x80
 800460a:	4620      	mov	r0, r4
 800460c:	f7ff ff70 	bl	80044f0 <SPI_WaitFlagStateUntilTimeout>
 8004610:	b9e0      	cbnz	r0, 800464c <SPI_EndRxTransaction+0x68>
}
 8004612:	b002      	add	sp, #8
 8004614:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004616:	6881      	ldr	r1, [r0, #8]
 8004618:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800461c:	d002      	beq.n	8004624 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800461e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004622:	d1e7      	bne.n	80045f4 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	6801      	ldr	r1, [r0, #0]
 8004628:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800462c:	6001      	str	r1, [r0, #0]
 800462e:	e7e1      	b.n	80045f4 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004630:	9200      	str	r2, [sp, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	2101      	movs	r1, #1
 8004636:	4620      	mov	r0, r4
 8004638:	f7ff ff5a 	bl	80044f0 <SPI_WaitFlagStateUntilTimeout>
 800463c:	2800      	cmp	r0, #0
 800463e:	d0e8      	beq.n	8004612 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004640:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004642:	f043 0320 	orr.w	r3, r3, #32
 8004646:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004648:	2003      	movs	r0, #3
 800464a:	e7e2      	b.n	8004612 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800464c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800464e:	f043 0320 	orr.w	r3, r3, #32
 8004652:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004654:	2003      	movs	r0, #3
 8004656:	e7dc      	b.n	8004612 <SPI_EndRxTransaction+0x2e>

08004658 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004658:	2800      	cmp	r0, #0
 800465a:	d056      	beq.n	800470a <HAL_SPI_Init+0xb2>
{
 800465c:	b510      	push	{r4, lr}
 800465e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004660:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004662:	b933      	cbnz	r3, 8004672 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004664:	6843      	ldr	r3, [r0, #4]
 8004666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800466a:	d005      	beq.n	8004678 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800466c:	2300      	movs	r3, #0
 800466e:	61c3      	str	r3, [r0, #28]
 8004670:	e002      	b.n	8004678 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004672:	2300      	movs	r3, #0
 8004674:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004676:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004678:	2300      	movs	r3, #0
 800467a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800467c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004680:	2b00      	cmp	r3, #0
 8004682:	d03c      	beq.n	80046fe <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004684:	2302      	movs	r3, #2
 8004686:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800468a:	6822      	ldr	r2, [r4, #0]
 800468c:	6813      	ldr	r3, [r2, #0]
 800468e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004692:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004694:	6863      	ldr	r3, [r4, #4]
 8004696:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800469a:	68a2      	ldr	r2, [r4, #8]
 800469c:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80046a0:	4313      	orrs	r3, r2
 80046a2:	68e2      	ldr	r2, [r4, #12]
 80046a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046a8:	4313      	orrs	r3, r2
 80046aa:	6922      	ldr	r2, [r4, #16]
 80046ac:	f002 0202 	and.w	r2, r2, #2
 80046b0:	4313      	orrs	r3, r2
 80046b2:	6962      	ldr	r2, [r4, #20]
 80046b4:	f002 0201 	and.w	r2, r2, #1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	69a2      	ldr	r2, [r4, #24]
 80046bc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80046c0:	4313      	orrs	r3, r2
 80046c2:	69e2      	ldr	r2, [r4, #28]
 80046c4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80046c8:	4313      	orrs	r3, r2
 80046ca:	6a22      	ldr	r2, [r4, #32]
 80046cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80046d0:	4313      	orrs	r3, r2
 80046d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80046d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80046d8:	6821      	ldr	r1, [r4, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80046de:	8b63      	ldrh	r3, [r4, #26]
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	69d3      	ldr	r3, [r2, #28]
 80046ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f2:	2000      	movs	r0, #0
 80046f4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80046fc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80046fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004702:	4620      	mov	r0, r4
 8004704:	f7fe fc24 	bl	8002f50 <HAL_SPI_MspInit>
 8004708:	e7bc      	b.n	8004684 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800470a:	2001      	movs	r0, #1
}
 800470c:	4770      	bx	lr

0800470e <HAL_SPI_Transmit>:
{
 800470e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004712:	b083      	sub	sp, #12
 8004714:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004716:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800471a:	2b01      	cmp	r3, #1
 800471c:	f000 80cc 	beq.w	80048b8 <HAL_SPI_Transmit+0x1aa>
 8004720:	4604      	mov	r4, r0
 8004722:	4688      	mov	r8, r1
 8004724:	4691      	mov	r9, r2
 8004726:	2301      	movs	r3, #1
 8004728:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800472c:	f7fe feb8 	bl	80034a0 <HAL_GetTick>
 8004730:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004732:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8004736:	b2f6      	uxtb	r6, r6
 8004738:	2e01      	cmp	r6, #1
 800473a:	f040 80aa 	bne.w	8004892 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 800473e:	f1b8 0f00 	cmp.w	r8, #0
 8004742:	f000 80a7 	beq.w	8004894 <HAL_SPI_Transmit+0x186>
 8004746:	f1b9 0f00 	cmp.w	r9, #0
 800474a:	f000 80a3 	beq.w	8004894 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800474e:	2303      	movs	r3, #3
 8004750:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004754:	2300      	movs	r3, #0
 8004756:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004758:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800475c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004760:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004764:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004766:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004768:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800476a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800476c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	d01e      	beq.n	80047b4 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800477e:	d103      	bne.n	8004788 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004788:	68e3      	ldr	r3, [r4, #12]
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478e:	d01c      	beq.n	80047ca <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	b113      	cbz	r3, 800479a <HAL_SPI_Transmit+0x8c>
 8004794:	f1b9 0f01 	cmp.w	r9, #1
 8004798:	d152      	bne.n	8004840 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	7812      	ldrb	r2, [r2, #0]
 80047a0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047a4:	3301      	adds	r3, #1
 80047a6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80047a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80047b2:	e045      	b.n	8004840 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	6813      	ldr	r3, [r2, #0]
 80047b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047bc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	6813      	ldr	r3, [r2, #0]
 80047c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	e7d5      	b.n	8004776 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ca:	6863      	ldr	r3, [r4, #4]
 80047cc:	b113      	cbz	r3, 80047d4 <HAL_SPI_Transmit+0xc6>
 80047ce:	f1b9 0f01 	cmp.w	r9, #1
 80047d2:	d116      	bne.n	8004802 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	8812      	ldrh	r2, [r2, #0]
 80047da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047de:	3302      	adds	r3, #2
 80047e0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80047e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	86e3      	strh	r3, [r4, #54]	; 0x36
 80047ec:	e009      	b.n	8004802 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ee:	f7fe fe57 	bl	80034a0 <HAL_GetTick>
 80047f2:	1bc0      	subs	r0, r0, r7
 80047f4:	42a8      	cmp	r0, r5
 80047f6:	d302      	bcc.n	80047fe <HAL_SPI_Transmit+0xf0>
 80047f8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80047fc:	d154      	bne.n	80048a8 <HAL_SPI_Transmit+0x19a>
 80047fe:	2d00      	cmp	r5, #0
 8004800:	d054      	beq.n	80048ac <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 8004802:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d02e      	beq.n	8004868 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	f012 0f02 	tst.w	r2, #2
 8004812:	d0ec      	beq.n	80047ee <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004814:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800481a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800481c:	3302      	adds	r3, #2
 800481e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004820:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29b      	uxth	r3, r3
 8004828:	86e3      	strh	r3, [r4, #54]	; 0x36
 800482a:	e7ea      	b.n	8004802 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800482c:	f7fe fe38 	bl	80034a0 <HAL_GetTick>
 8004830:	1bc0      	subs	r0, r0, r7
 8004832:	42a8      	cmp	r0, r5
 8004834:	d302      	bcc.n	800483c <HAL_SPI_Transmit+0x12e>
 8004836:	f1b5 3fff 	cmp.w	r5, #4294967295
 800483a:	d139      	bne.n	80048b0 <HAL_SPI_Transmit+0x1a2>
 800483c:	2d00      	cmp	r5, #0
 800483e:	d039      	beq.n	80048b4 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 8004840:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004842:	b29b      	uxth	r3, r3
 8004844:	b183      	cbz	r3, 8004868 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	f012 0f02 	tst.w	r2, #2
 800484e:	d0ed      	beq.n	800482c <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004850:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004852:	7812      	ldrb	r2, [r2, #0]
 8004854:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004856:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004858:	3301      	adds	r3, #1
 800485a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800485c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800485e:	b292      	uxth	r2, r2
 8004860:	3a01      	subs	r2, #1
 8004862:	b292      	uxth	r2, r2
 8004864:	86e2      	strh	r2, [r4, #54]	; 0x36
 8004866:	e7eb      	b.n	8004840 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004868:	463a      	mov	r2, r7
 800486a:	4629      	mov	r1, r5
 800486c:	4620      	mov	r0, r4
 800486e:	f7ff fea7 	bl	80045c0 <SPI_EndRxTxTransaction>
 8004872:	b108      	cbz	r0, 8004878 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004874:	2320      	movs	r3, #32
 8004876:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004878:	68a3      	ldr	r3, [r4, #8]
 800487a:	b933      	cbnz	r3, 800488a <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	9201      	str	r2, [sp, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800488c:	b913      	cbnz	r3, 8004894 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800488e:	2600      	movs	r6, #0
 8004890:	e000      	b.n	8004894 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8004892:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004894:	2301      	movs	r3, #1
 8004896:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800489a:	2300      	movs	r3, #0
 800489c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80048a0:	4630      	mov	r0, r6
 80048a2:	b003      	add	sp, #12
 80048a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80048a8:	2603      	movs	r6, #3
 80048aa:	e7f3      	b.n	8004894 <HAL_SPI_Transmit+0x186>
 80048ac:	2603      	movs	r6, #3
 80048ae:	e7f1      	b.n	8004894 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 80048b0:	2603      	movs	r6, #3
 80048b2:	e7ef      	b.n	8004894 <HAL_SPI_Transmit+0x186>
 80048b4:	2603      	movs	r6, #3
 80048b6:	e7ed      	b.n	8004894 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 80048b8:	2602      	movs	r6, #2
 80048ba:	e7f1      	b.n	80048a0 <HAL_SPI_Transmit+0x192>

080048bc <HAL_SPI_TransmitReceive>:
{
 80048bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048c0:	b083      	sub	sp, #12
 80048c2:	461f      	mov	r7, r3
 80048c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80048c6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f000 8110 	beq.w	8004af0 <HAL_SPI_TransmitReceive+0x234>
 80048d0:	4604      	mov	r4, r0
 80048d2:	4688      	mov	r8, r1
 80048d4:	4691      	mov	r9, r2
 80048d6:	2301      	movs	r3, #1
 80048d8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80048dc:	f7fe fde0 	bl	80034a0 <HAL_GetTick>
 80048e0:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80048e2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80048e6:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80048e8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d00a      	beq.n	8004904 <HAL_SPI_TransmitReceive+0x48>
 80048ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80048f2:	f040 80e3 	bne.w	8004abc <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048f6:	68a2      	ldr	r2, [r4, #8]
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	f040 80e9 	bne.w	8004ad0 <HAL_SPI_TransmitReceive+0x214>
 80048fe:	2b04      	cmp	r3, #4
 8004900:	f040 80e8 	bne.w	8004ad4 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004904:	f1b8 0f00 	cmp.w	r8, #0
 8004908:	f000 80e6 	beq.w	8004ad8 <HAL_SPI_TransmitReceive+0x21c>
 800490c:	f1b9 0f00 	cmp.w	r9, #0
 8004910:	f000 80e4 	beq.w	8004adc <HAL_SPI_TransmitReceive+0x220>
 8004914:	2f00      	cmp	r7, #0
 8004916:	f000 80e3 	beq.w	8004ae0 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800491a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b04      	cmp	r3, #4
 8004922:	d002      	beq.n	800492a <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004924:	2305      	movs	r3, #5
 8004926:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492a:	2300      	movs	r3, #0
 800492c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800492e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004932:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004934:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004936:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800493a:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800493c:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800493e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004940:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	f012 0f40 	tst.w	r2, #64	; 0x40
 800494a:	d103      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004952:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004954:	68e3      	ldr	r3, [r4, #12]
 8004956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495a:	d011      	beq.n	8004980 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	b10b      	cbz	r3, 8004964 <HAL_SPI_TransmitReceive+0xa8>
 8004960:	2f01      	cmp	r7, #1
 8004962:	d10b      	bne.n	800497c <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004964:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800496c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800496e:	3301      	adds	r3, #1
 8004970:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004972:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29b      	uxth	r3, r3
 800497a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800497c:	2701      	movs	r7, #1
 800497e:	e06b      	b.n	8004a58 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	b10b      	cbz	r3, 8004988 <HAL_SPI_TransmitReceive+0xcc>
 8004984:	2f01      	cmp	r7, #1
 8004986:	d10b      	bne.n	80049a0 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004988:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	8812      	ldrh	r2, [r2, #0]
 800498e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004990:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004992:	3302      	adds	r3, #2
 8004994:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004996:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29b      	uxth	r3, r3
 800499e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80049a0:	2701      	movs	r7, #1
 80049a2:	e01c      	b.n	80049de <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	f012 0f01 	tst.w	r2, #1
 80049ac:	d00e      	beq.n	80049cc <HAL_SPI_TransmitReceive+0x110>
 80049ae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80049b0:	b292      	uxth	r2, r2
 80049b2:	b15a      	cbz	r2, 80049cc <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049bc:	3302      	adds	r3, #2
 80049be:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80049c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80049ca:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049cc:	f7fe fd68 	bl	80034a0 <HAL_GetTick>
 80049d0:	1b80      	subs	r0, r0, r6
 80049d2:	42a8      	cmp	r0, r5
 80049d4:	d303      	bcc.n	80049de <HAL_SPI_TransmitReceive+0x122>
 80049d6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80049da:	f040 8083 	bne.w	8004ae4 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	b91b      	cbnz	r3, 80049ec <HAL_SPI_TransmitReceive+0x130>
 80049e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d053      	beq.n	8004a94 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	f012 0f02 	tst.w	r2, #2
 80049f4:	d0d6      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0xe8>
 80049f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80049f8:	b292      	uxth	r2, r2
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	d0d2      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0xe8>
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	d0d0      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a04:	8812      	ldrh	r2, [r2, #0]
 8004a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004a18:	2700      	movs	r7, #0
 8004a1a:	e7c3      	b.n	80049a4 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	f012 0f01 	tst.w	r2, #1
 8004a24:	d00e      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x188>
 8004a26:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004a28:	b292      	uxth	r2, r2
 8004a2a:	b15a      	cbz	r2, 8004a44 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a34:	3301      	adds	r3, #1
 8004a36:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004a38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004a42:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a44:	f7fe fd2c 	bl	80034a0 <HAL_GetTick>
 8004a48:	1b83      	subs	r3, r0, r6
 8004a4a:	42ab      	cmp	r3, r5
 8004a4c:	d302      	bcc.n	8004a54 <HAL_SPI_TransmitReceive+0x198>
 8004a4e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004a52:	d149      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x22c>
 8004a54:	2d00      	cmp	r5, #0
 8004a56:	d049      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	b913      	cbnz	r3, 8004a64 <HAL_SPI_TransmitReceive+0x1a8>
 8004a5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	b1bb      	cbz	r3, 8004a94 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	f012 0f02 	tst.w	r2, #2
 8004a6c:	d0d6      	beq.n	8004a1c <HAL_SPI_TransmitReceive+0x160>
 8004a6e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004a70:	b292      	uxth	r2, r2
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d0d2      	beq.n	8004a1c <HAL_SPI_TransmitReceive+0x160>
 8004a76:	2f00      	cmp	r7, #0
 8004a78:	d0d0      	beq.n	8004a1c <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004a80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a82:	3301      	adds	r3, #1
 8004a84:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004a90:	2700      	movs	r7, #0
 8004a92:	e7c3      	b.n	8004a1c <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a94:	4632      	mov	r2, r6
 8004a96:	4629      	mov	r1, r5
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7ff fd91 	bl	80045c0 <SPI_EndRxTxTransaction>
 8004a9e:	b948      	cbnz	r0, 8004ab4 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aa0:	68a3      	ldr	r3, [r4, #8]
 8004aa2:	b963      	cbnz	r3, 8004abe <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	9201      	str	r2, [sp, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	9b01      	ldr	r3, [sp, #4]
 8004ab2:	e004      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004ab8:	2001      	movs	r0, #1
    goto error;
 8004aba:	e000      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8004abc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004aca:	b003      	add	sp, #12
 8004acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	e7f4      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
 8004ad4:	2002      	movs	r0, #2
 8004ad6:	e7f2      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8004ad8:	2001      	movs	r0, #1
 8004ada:	e7f0      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
 8004adc:	2001      	movs	r0, #1
 8004ade:	e7ee      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e7ec      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	e7ea      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8004ae8:	2003      	movs	r0, #3
 8004aea:	e7e8      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
 8004aec:	2003      	movs	r0, #3
 8004aee:	e7e6      	b.n	8004abe <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8004af0:	2002      	movs	r0, #2
 8004af2:	e7ea      	b.n	8004aca <HAL_SPI_TransmitReceive+0x20e>

08004af4 <HAL_SPI_Receive>:
{
 8004af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004af8:	b083      	sub	sp, #12
 8004afa:	4604      	mov	r4, r0
 8004afc:	4688      	mov	r8, r1
 8004afe:	4691      	mov	r9, r2
 8004b00:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b02:	6843      	ldr	r3, [r0, #4]
 8004b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b08:	d038      	beq.n	8004b7c <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8004b0a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	f000 80a8 	beq.w	8004c64 <HAL_SPI_Receive+0x170>
 8004b14:	2301      	movs	r3, #1
 8004b16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004b1a:	f7fe fcc1 	bl	80034a0 <HAL_GetTick>
 8004b1e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b20:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8004b24:	b2f6      	uxtb	r6, r6
 8004b26:	2e01      	cmp	r6, #1
 8004b28:	f040 8089 	bne.w	8004c3e <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8004b2c:	f1b8 0f00 	cmp.w	r8, #0
 8004b30:	f000 8086 	beq.w	8004c40 <HAL_SPI_Receive+0x14c>
 8004b34:	f1b9 0f00 	cmp.w	r9, #0
 8004b38:	f000 8082 	beq.w	8004c40 <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b46:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b4a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b4e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b52:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b54:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b56:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b58:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b5a:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5c:	68a3      	ldr	r3, [r4, #8]
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d018      	beq.n	8004b96 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b6c:	d103      	bne.n	8004b76 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b74:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b76:	68e3      	ldr	r3, [r4, #12]
 8004b78:	b313      	cbz	r3, 8004bc0 <HAL_SPI_Receive+0xcc>
 8004b7a:	e040      	b.n	8004bfe <HAL_SPI_Receive+0x10a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b7c:	6883      	ldr	r3, [r0, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1c3      	bne.n	8004b0a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b82:	2304      	movs	r3, #4
 8004b84:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b88:	9500      	str	r5, [sp, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	f7ff fe95 	bl	80048bc <HAL_SPI_TransmitReceive>
 8004b92:	4606      	mov	r6, r0
 8004b94:	e05a      	b.n	8004c4c <HAL_SPI_Receive+0x158>
    __HAL_SPI_DISABLE(hspi);
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	6813      	ldr	r3, [r2, #0]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e7db      	b.n	8004b64 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bac:	f7fe fc78 	bl	80034a0 <HAL_GetTick>
 8004bb0:	1bc0      	subs	r0, r0, r7
 8004bb2:	42a8      	cmp	r0, r5
 8004bb4:	d302      	bcc.n	8004bbc <HAL_SPI_Receive+0xc8>
 8004bb6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004bba:	d14b      	bne.n	8004c54 <HAL_SPI_Receive+0x160>
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	d04b      	beq.n	8004c58 <HAL_SPI_Receive+0x164>
    while (hspi->RxXferCount > 0U)
 8004bc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d02e      	beq.n	8004c26 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	f012 0f01 	tst.w	r2, #1
 8004bd0:	d0ec      	beq.n	8004bac <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bd4:	7b1b      	ldrb	r3, [r3, #12]
 8004bd6:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bda:	3301      	adds	r3, #1
 8004bdc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004bde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004be8:	e7ea      	b.n	8004bc0 <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bea:	f7fe fc59 	bl	80034a0 <HAL_GetTick>
 8004bee:	1bc0      	subs	r0, r0, r7
 8004bf0:	42a8      	cmp	r0, r5
 8004bf2:	d302      	bcc.n	8004bfa <HAL_SPI_Receive+0x106>
 8004bf4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004bf8:	d130      	bne.n	8004c5c <HAL_SPI_Receive+0x168>
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	d030      	beq.n	8004c60 <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 8004bfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	b183      	cbz	r3, 8004c26 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	f012 0f01 	tst.w	r2, #1
 8004c0c:	d0ed      	beq.n	8004bea <HAL_SPI_Receive+0xf6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c16:	3302      	adds	r3, #2
 8004c18:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c1a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	3a01      	subs	r2, #1
 8004c20:	b292      	uxth	r2, r2
 8004c22:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8004c24:	e7eb      	b.n	8004bfe <HAL_SPI_Receive+0x10a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c26:	463a      	mov	r2, r7
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f7ff fcda 	bl	80045e4 <SPI_EndRxTransaction>
 8004c30:	b108      	cbz	r0, 8004c36 <HAL_SPI_Receive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c32:	2320      	movs	r3, #32
 8004c34:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c38:	b913      	cbnz	r3, 8004c40 <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_SPI_Receive+0x14c>
    errorcode = HAL_BUSY;
 8004c3e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c46:	2300      	movs	r3, #0
 8004c48:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	b003      	add	sp, #12
 8004c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8004c54:	2603      	movs	r6, #3
 8004c56:	e7f3      	b.n	8004c40 <HAL_SPI_Receive+0x14c>
 8004c58:	2603      	movs	r6, #3
 8004c5a:	e7f1      	b.n	8004c40 <HAL_SPI_Receive+0x14c>
          errorcode = HAL_TIMEOUT;
 8004c5c:	2603      	movs	r6, #3
 8004c5e:	e7ef      	b.n	8004c40 <HAL_SPI_Receive+0x14c>
 8004c60:	2603      	movs	r6, #3
 8004c62:	e7ed      	b.n	8004c40 <HAL_SPI_Receive+0x14c>
  __HAL_LOCK(hspi);
 8004c64:	2602      	movs	r6, #2
 8004c66:	e7f1      	b.n	8004c4c <HAL_SPI_Receive+0x158>

08004c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6a:	6a03      	ldr	r3, [r0, #32]
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c74:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c76:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c78:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c7c:	680c      	ldr	r4, [r1, #0]
 8004c7e:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c82:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c86:	688b      	ldr	r3, [r1, #8]
 8004c88:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c8a:	4c0d      	ldr	r4, [pc, #52]	; (8004cc0 <TIM_OC1_SetConfig+0x58>)
 8004c8c:	42a0      	cmp	r0, r4
 8004c8e:	d009      	beq.n	8004ca4 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c90:	4c0b      	ldr	r4, [pc, #44]	; (8004cc0 <TIM_OC1_SetConfig+0x58>)
 8004c92:	42a0      	cmp	r0, r4
 8004c94:	d00d      	beq.n	8004cb2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c98:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c9a:	684a      	ldr	r2, [r1, #4]
 8004c9c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9e:	6203      	str	r3, [r0, #32]
}
 8004ca0:	bc70      	pop	{r4, r5, r6}
 8004ca2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ca4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004ca8:	68ca      	ldr	r2, [r1, #12]
 8004caa:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	e7ee      	b.n	8004c90 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cb2:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004cb6:	694a      	ldr	r2, [r1, #20]
 8004cb8:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cba:	698e      	ldr	r6, [r1, #24]
 8004cbc:	4316      	orrs	r6, r2
 8004cbe:	e7ea      	b.n	8004c96 <TIM_OC1_SetConfig+0x2e>
 8004cc0:	40012c00 	.word	0x40012c00

08004cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cc6:	6a03      	ldr	r3, [r0, #32]
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ccc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cd4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd8:	680c      	ldr	r4, [r1, #0]
 8004cda:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ce0:	688c      	ldr	r4, [r1, #8]
 8004ce2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ce6:	4c0f      	ldr	r4, [pc, #60]	; (8004d24 <TIM_OC3_SetConfig+0x60>)
 8004ce8:	42a0      	cmp	r0, r4
 8004cea:	d009      	beq.n	8004d00 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cec:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <TIM_OC3_SetConfig+0x60>)
 8004cee:	42a0      	cmp	r0, r4
 8004cf0:	d00e      	beq.n	8004d10 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cf6:	684a      	ldr	r2, [r1, #4]
 8004cf8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfa:	6203      	str	r3, [r0, #32]
}
 8004cfc:	bc30      	pop	{r4, r5}
 8004cfe:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d04:	68cc      	ldr	r4, [r1, #12]
 8004d06:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d0e:	e7ed      	b.n	8004cec <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d10:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d14:	694c      	ldr	r4, [r1, #20]
 8004d16:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d1a:	698c      	ldr	r4, [r1, #24]
 8004d1c:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8004d20:	e7e7      	b.n	8004cf2 <TIM_OC3_SetConfig+0x2e>
 8004d22:	bf00      	nop
 8004d24:	40012c00 	.word	0x40012c00

08004d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d2a:	6a03      	ldr	r3, [r0, #32]
 8004d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d30:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d38:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d3c:	680d      	ldr	r5, [r1, #0]
 8004d3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d46:	688d      	ldr	r5, [r1, #8]
 8004d48:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4c:	4d07      	ldr	r5, [pc, #28]	; (8004d6c <TIM_OC4_SetConfig+0x44>)
 8004d4e:	42a8      	cmp	r0, r5
 8004d50:	d006      	beq.n	8004d60 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d52:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d54:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d56:	684a      	ldr	r2, [r1, #4]
 8004d58:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	6203      	str	r3, [r0, #32]
}
 8004d5c:	bc30      	pop	{r4, r5}
 8004d5e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d60:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d64:	694d      	ldr	r5, [r1, #20]
 8004d66:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004d6a:	e7f2      	b.n	8004d52 <TIM_OC4_SetConfig+0x2a>
 8004d6c:	40012c00 	.word	0x40012c00

08004d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d70:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d72:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d74:	6a05      	ldr	r5, [r0, #32]
 8004d76:	f025 0501 	bic.w	r5, r5, #1
 8004d7a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d7e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d82:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d86:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004d8a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8c:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004d8e:	6203      	str	r3, [r0, #32]
}
 8004d90:	bc30      	pop	{r4, r5}
 8004d92:	4770      	bx	lr

08004d94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d94:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d96:	6a05      	ldr	r5, [r0, #32]
 8004d98:	f025 0510 	bic.w	r5, r5, #16
 8004d9c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004da0:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004da2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004da6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004daa:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dae:	031b      	lsls	r3, r3, #12
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db4:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004db8:	0109      	lsls	r1, r1, #4
 8004dba:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8004dbe:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004dc2:	6201      	str	r1, [r0, #32]
}
 8004dc4:	bc30      	pop	{r4, r5}
 8004dc6:	4770      	bx	lr

08004dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dca:	6a05      	ldr	r5, [r0, #32]
 8004dcc:	f025 0510 	bic.w	r5, r5, #16
 8004dd0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004dd4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dda:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de6:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004de8:	6203      	str	r3, [r0, #32]
}
 8004dea:	bc30      	pop	{r4, r5}
 8004dec:	4770      	bx	lr

08004dee <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dee:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004df0:	6a05      	ldr	r5, [r0, #32]
 8004df2:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004df6:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004df8:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8004dfa:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004dfc:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8004e00:	4314      	orrs	r4, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e02:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004e0c:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004e10:	0209      	lsls	r1, r1, #8
 8004e12:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004e16:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e18:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8004e1a:	6201      	str	r1, [r0, #32]
}
 8004e1c:	bc30      	pop	{r4, r5}
 8004e1e:	4770      	bx	lr

08004e20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e20:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e22:	6a05      	ldr	r5, [r0, #32]
 8004e24:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8004e28:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e2a:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8004e2c:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e2e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e32:	ea44 2402 	orr.w	r4, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e36:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e3a:	031b      	lsls	r3, r3, #12
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004e40:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004e44:	0309      	lsls	r1, r1, #12
 8004e46:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004e4a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e4c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8004e4e:	6201      	str	r1, [r0, #32]
}
 8004e50:	bc30      	pop	{r4, r5}
 8004e52:	4770      	bx	lr

08004e54 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e60:	6083      	str	r3, [r0, #8]
}
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004e64:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e74:	6803      	ldr	r3, [r0, #0]
 8004e76:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <HAL_TIM_Base_Start+0x58>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d010      	beq.n	8004e9e <HAL_TIM_Base_Start+0x3a>
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d00d      	beq.n	8004e9e <HAL_TIM_Base_Start+0x3a>
 8004e82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIM_Base_Start+0x3a>
 8004e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d005      	beq.n	8004e9e <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	2a06      	cmp	r2, #6
 8004ea6:	d007      	beq.n	8004eb8 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	4770      	bx	lr
    return HAL_ERROR;
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	4770      	bx	lr
  return HAL_OK;
 8004eb8:	2000      	movs	r0, #0
}
 8004eba:	4770      	bx	lr
 8004ebc:	40012c00 	.word	0x40012c00

08004ec0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d127      	bne.n	8004f1a <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ed0:	6802      	ldr	r2, [r0, #0]
 8004ed2:	68d3      	ldr	r3, [r2, #12]
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eda:	6803      	ldr	r3, [r0, #0]
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <HAL_TIM_Base_Start_IT+0x64>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d010      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x44>
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d00d      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x44>
 8004ee8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x44>
 8004ef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d005      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f00:	2000      	movs	r0, #0
 8004f02:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0a:	2a06      	cmp	r2, #6
 8004f0c:	d007      	beq.n	8004f1e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f16:	2000      	movs	r0, #0
 8004f18:	4770      	bx	lr
    return HAL_ERROR;
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	4770      	bx	lr
  return HAL_OK;
 8004f1e:	2000      	movs	r0, #0
}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40012c00 	.word	0x40012c00

08004f28 <HAL_TIM_OC_MspInit>:
}
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIM_PWM_MspInit>:
}
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_IC_MspInit>:
}
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIM_OnePulse_MspInit>:
}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004f30:	4770      	bx	lr

08004f32 <HAL_TIM_TriggerCallback>:
}
 8004f32:	4770      	bx	lr

08004f34 <HAL_TIM_IRQHandler>:
{
 8004f34:	b510      	push	{r4, lr}
 8004f36:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f38:	6803      	ldr	r3, [r0, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	f012 0f02 	tst.w	r2, #2
 8004f40:	d011      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	f012 0f02 	tst.w	r2, #2
 8004f48:	d00d      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f4a:	f06f 0202 	mvn.w	r2, #2
 8004f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f50:	2301      	movs	r3, #1
 8004f52:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f54:	6803      	ldr	r3, [r0, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f013 0f03 	tst.w	r3, #3
 8004f5c:	d070      	beq.n	8005040 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	f7fd fc27 	bl	80027b0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	2300      	movs	r3, #0
 8004f64:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	f012 0f04 	tst.w	r2, #4
 8004f6e:	d012      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	f012 0f04 	tst.w	r2, #4
 8004f76:	d00e      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f78:	f06f 0204 	mvn.w	r2, #4
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004f8a:	d05f      	beq.n	800504c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f7fd fc0f 	bl	80027b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	2300      	movs	r3, #0
 8004f94:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	f012 0f08 	tst.w	r2, #8
 8004f9e:	d012      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	f012 0f08 	tst.w	r2, #8
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fa8:	f06f 0208 	mvn.w	r2, #8
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fae:	2304      	movs	r3, #4
 8004fb0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f013 0f03 	tst.w	r3, #3
 8004fba:	d04e      	beq.n	800505a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7fd fbf7 	bl	80027b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	f012 0f10 	tst.w	r2, #16
 8004fce:	d012      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	f012 0f10 	tst.w	r2, #16
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd8:	f06f 0210 	mvn.w	r2, #16
 8004fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fde:	2308      	movs	r3, #8
 8004fe0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004fea:	d03d      	beq.n	8005068 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7fd fbdf 	bl	80027b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	f012 0f01 	tst.w	r2, #1
 8004ffe:	d003      	beq.n	8005008 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	f012 0f01 	tst.w	r2, #1
 8005006:	d136      	bne.n	8005076 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005018:	d134      	bne.n	8005084 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005022:	d003      	beq.n	800502c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	f012 0f40 	tst.w	r2, #64	; 0x40
 800502a:	d132      	bne.n	8005092 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	f012 0f20 	tst.w	r2, #32
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	f012 0f20 	tst.w	r2, #32
 800503c:	d130      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x16c>
}
 800503e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005040:	f7fd fafe 	bl	8002640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff ff73 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
 800504a:	e78a      	b.n	8004f62 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504c:	4620      	mov	r0, r4
 800504e:	f7fd faf7 	bl	8002640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005052:	4620      	mov	r0, r4
 8005054:	f7ff ff6c 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
 8005058:	e79b      	b.n	8004f92 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	4620      	mov	r0, r4
 800505c:	f7fd faf0 	bl	8002640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	4620      	mov	r0, r4
 8005062:	f7ff ff65 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
 8005066:	e7ac      	b.n	8004fc2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005068:	4620      	mov	r0, r4
 800506a:	f7fd fae9 	bl	8002640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506e:	4620      	mov	r0, r4
 8005070:	f7ff ff5e 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
 8005074:	e7bd      	b.n	8004ff2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005076:	f06f 0201 	mvn.w	r2, #1
 800507a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800507c:	4620      	mov	r0, r4
 800507e:	f7fd fb25 	bl	80026cc <HAL_TIM_PeriodElapsedCallback>
 8005082:	e7c1      	b.n	8005008 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005088:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800508a:	4620      	mov	r0, r4
 800508c:	f000 fe16 	bl	8005cbc <HAL_TIMEx_BreakCallback>
 8005090:	e7c3      	b.n	800501a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005096:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005098:	4620      	mov	r0, r4
 800509a:	f7ff ff4a 	bl	8004f32 <HAL_TIM_TriggerCallback>
 800509e:	e7c5      	b.n	800502c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050a0:	f06f 0220 	mvn.w	r2, #32
 80050a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 fe07 	bl	8005cba <HAL_TIMEx_CommutCallback>
}
 80050ac:	e7c7      	b.n	800503e <HAL_TIM_IRQHandler+0x10a>
	...

080050b0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80050b0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <TIM_Base_SetConfig+0x70>)
 80050b4:	4290      	cmp	r0, r2
 80050b6:	d00a      	beq.n	80050ce <TIM_Base_SetConfig+0x1e>
 80050b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80050bc:	d007      	beq.n	80050ce <TIM_Base_SetConfig+0x1e>
 80050be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80050c2:	4290      	cmp	r0, r2
 80050c4:	d003      	beq.n	80050ce <TIM_Base_SetConfig+0x1e>
 80050c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ca:	4290      	cmp	r0, r2
 80050cc:	d103      	bne.n	80050d6 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80050d2:	684a      	ldr	r2, [r1, #4]
 80050d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <TIM_Base_SetConfig+0x70>)
 80050d8:	4290      	cmp	r0, r2
 80050da:	d00a      	beq.n	80050f2 <TIM_Base_SetConfig+0x42>
 80050dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0x42>
 80050e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80050e6:	4290      	cmp	r0, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0x42>
 80050ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ee:	4290      	cmp	r0, r2
 80050f0:	d103      	bne.n	80050fa <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f6:	68ca      	ldr	r2, [r1, #12]
 80050f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fe:	694a      	ldr	r2, [r1, #20]
 8005100:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005102:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005104:	688b      	ldr	r3, [r1, #8]
 8005106:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005108:	680b      	ldr	r3, [r1, #0]
 800510a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <TIM_Base_SetConfig+0x70>)
 800510e:	4298      	cmp	r0, r3
 8005110:	d002      	beq.n	8005118 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8005112:	2301      	movs	r3, #1
 8005114:	6143      	str	r3, [r0, #20]
}
 8005116:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005118:	690b      	ldr	r3, [r1, #16]
 800511a:	6303      	str	r3, [r0, #48]	; 0x30
 800511c:	e7f9      	b.n	8005112 <TIM_Base_SetConfig+0x62>
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00

08005124 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005124:	b340      	cbz	r0, 8005178 <HAL_TIM_Base_Init+0x54>
{
 8005126:	b510      	push	{r4, lr}
 8005128:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800512a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800512e:	b1f3      	cbz	r3, 800516e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	2302      	movs	r3, #2
 8005132:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005136:	4621      	mov	r1, r4
 8005138:	f851 0b04 	ldr.w	r0, [r1], #4
 800513c:	f7ff ffb8 	bl	80050b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005140:	2301      	movs	r3, #1
 8005142:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800514a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800514e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005152:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800515a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005166:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800516a:	2000      	movs	r0, #0
}
 800516c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800516e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005172:	f7fd ff31 	bl	8002fd8 <HAL_TIM_Base_MspInit>
 8005176:	e7db      	b.n	8005130 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005178:	2001      	movs	r0, #1
}
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800517c:	b340      	cbz	r0, 80051d0 <HAL_TIM_OC_Init+0x54>
{
 800517e:	b510      	push	{r4, lr}
 8005180:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005182:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005186:	b1f3      	cbz	r3, 80051c6 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	2302      	movs	r3, #2
 800518a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800518e:	4621      	mov	r1, r4
 8005190:	f851 0b04 	ldr.w	r0, [r1], #4
 8005194:	f7ff ff8c 	bl	80050b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	2301      	movs	r3, #1
 800519a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80051a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80051a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80051aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80051ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80051be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80051c2:	2000      	movs	r0, #0
}
 80051c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80051c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80051ca:	f7ff fead 	bl	8004f28 <HAL_TIM_OC_MspInit>
 80051ce:	e7db      	b.n	8005188 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80051d0:	2001      	movs	r0, #1
}
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80051d4:	b340      	cbz	r0, 8005228 <HAL_TIM_PWM_Init+0x54>
{
 80051d6:	b510      	push	{r4, lr}
 80051d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051de:	b1f3      	cbz	r3, 800521e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	2302      	movs	r3, #2
 80051e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e6:	4621      	mov	r1, r4
 80051e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80051ec:	f7ff ff60 	bl	80050b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80051fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80051fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005202:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005206:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800520a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800521a:	2000      	movs	r0, #0
}
 800521c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800521e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005222:	f7ff fe82 	bl	8004f2a <HAL_TIM_PWM_MspInit>
 8005226:	e7db      	b.n	80051e0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005228:	2001      	movs	r0, #1
}
 800522a:	4770      	bx	lr

0800522c <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800522c:	b340      	cbz	r0, 8005280 <HAL_TIM_IC_Init+0x54>
{
 800522e:	b510      	push	{r4, lr}
 8005230:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005232:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005236:	b1f3      	cbz	r3, 8005276 <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	2302      	movs	r3, #2
 800523a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523e:	4621      	mov	r1, r4
 8005240:	f851 0b04 	ldr.w	r0, [r1], #4
 8005244:	f7ff ff34 	bl	80050b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005248:	2301      	movs	r3, #1
 800524a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005252:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005256:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800525a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005266:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800526a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800526e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005272:	2000      	movs	r0, #0
}
 8005274:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005276:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800527a:	f7ff fe57 	bl	8004f2c <HAL_TIM_IC_MspInit>
 800527e:	e7db      	b.n	8005238 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8005280:	2001      	movs	r0, #1
}
 8005282:	4770      	bx	lr

08005284 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8005284:	b350      	cbz	r0, 80052dc <HAL_TIM_OnePulse_Init+0x58>
{
 8005286:	b538      	push	{r3, r4, r5, lr}
 8005288:	460d      	mov	r5, r1
 800528a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800528c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005290:	b1fb      	cbz	r3, 80052d2 <HAL_TIM_OnePulse_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	2302      	movs	r3, #2
 8005294:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005298:	4621      	mov	r1, r4
 800529a:	f851 0b04 	ldr.w	r0, [r1], #4
 800529e:	f7ff ff07 	bl	80050b0 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	6813      	ldr	r3, [r2, #0]
 80052a6:	f023 0308 	bic.w	r3, r3, #8
 80052aa:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	430d      	orrs	r5, r1
 80052b2:	601d      	str	r5, [r3, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80052ce:	2000      	movs	r0, #0
}
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80052d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80052d6:	f7ff fe2a 	bl	8004f2e <HAL_TIM_OnePulse_MspInit>
 80052da:	e7da      	b.n	8005292 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 80052dc:	2001      	movs	r0, #1
}
 80052de:	4770      	bx	lr

080052e0 <TIM_OC2_SetConfig>:
{
 80052e0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	6a03      	ldr	r3, [r0, #32]
 80052e4:	f023 0310 	bic.w	r3, r3, #16
 80052e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80052ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80052ec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80052ee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f4:	680d      	ldr	r5, [r1, #0]
 80052f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80052fa:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052fe:	688d      	ldr	r5, [r1, #8]
 8005300:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005304:	4d0e      	ldr	r5, [pc, #56]	; (8005340 <TIM_OC2_SetConfig+0x60>)
 8005306:	42a8      	cmp	r0, r5
 8005308:	d009      	beq.n	800531e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530a:	4d0d      	ldr	r5, [pc, #52]	; (8005340 <TIM_OC2_SetConfig+0x60>)
 800530c:	42a8      	cmp	r0, r5
 800530e:	d00e      	beq.n	800532e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8005310:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005312:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005314:	684a      	ldr	r2, [r1, #4]
 8005316:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005318:	6203      	str	r3, [r0, #32]
}
 800531a:	bc30      	pop	{r4, r5}
 800531c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800531e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005322:	68cd      	ldr	r5, [r1, #12]
 8005324:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	e7ed      	b.n	800530a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800532e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005332:	694d      	ldr	r5, [r1, #20]
 8005334:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005338:	698d      	ldr	r5, [r1, #24]
 800533a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800533e:	e7e7      	b.n	8005310 <TIM_OC2_SetConfig+0x30>
 8005340:	40012c00 	.word	0x40012c00

08005344 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005344:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d022      	beq.n	8005392 <HAL_TIM_OC_ConfigChannel+0x4e>
{
 800534c:	b510      	push	{r4, lr}
 800534e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005350:	2301      	movs	r3, #1
 8005352:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005356:	2a0c      	cmp	r2, #12
 8005358:	d80b      	bhi.n	8005372 <HAL_TIM_OC_ConfigChannel+0x2e>
 800535a:	e8df f002 	tbb	[pc, r2]
 800535e:	0a07      	.short	0x0a07
 8005360:	0a0e0a0a 	.word	0x0a0e0a0a
 8005364:	0a120a0a 	.word	0x0a120a0a
 8005368:	0a0a      	.short	0x0a0a
 800536a:	16          	.byte	0x16
 800536b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f7ff fc7b 	bl	8004c68 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8005372:	2000      	movs	r0, #0
 8005374:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005378:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	f7ff ffb0 	bl	80052e0 <TIM_OC2_SetConfig>
      break;
 8005380:	e7f7      	b.n	8005372 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005382:	6800      	ldr	r0, [r0, #0]
 8005384:	f7ff fc9e 	bl	8004cc4 <TIM_OC3_SetConfig>
      break;
 8005388:	e7f3      	b.n	8005372 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	f7ff fccc 	bl	8004d28 <TIM_OC4_SetConfig>
      break;
 8005390:	e7ef      	b.n	8005372 <HAL_TIM_OC_ConfigChannel+0x2e>
  __HAL_LOCK(htim);
 8005392:	2002      	movs	r0, #2
}
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_PWM_ConfigChannel>:
{
 8005396:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005398:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d060      	beq.n	8005462 <HAL_TIM_PWM_ConfigChannel+0xcc>
 80053a0:	4604      	mov	r4, r0
 80053a2:	460d      	mov	r5, r1
 80053a4:	2301      	movs	r3, #1
 80053a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80053aa:	2a0c      	cmp	r2, #12
 80053ac:	d81a      	bhi.n	80053e4 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80053ae:	e8df f002 	tbb	[pc, r2]
 80053b2:	1907      	.short	0x1907
 80053b4:	191d1919 	.word	0x191d1919
 80053b8:	19311919 	.word	0x19311919
 80053bc:	1919      	.short	0x1919
 80053be:	44          	.byte	0x44
 80053bf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053c0:	6800      	ldr	r0, [r0, #0]
 80053c2:	f7ff fc51 	bl	8004c68 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053c6:	6822      	ldr	r2, [r4, #0]
 80053c8:	6993      	ldr	r3, [r2, #24]
 80053ca:	f043 0308 	orr.w	r3, r3, #8
 80053ce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	6993      	ldr	r3, [r2, #24]
 80053d4:	f023 0304 	bic.w	r3, r3, #4
 80053d8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053da:	6822      	ldr	r2, [r4, #0]
 80053dc:	6993      	ldr	r3, [r2, #24]
 80053de:	6929      	ldr	r1, [r5, #16]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80053e4:	2000      	movs	r0, #0
 80053e6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f7ff ff77 	bl	80052e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	6993      	ldr	r3, [r2, #24]
 80053f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053fa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053fc:	6822      	ldr	r2, [r4, #0]
 80053fe:	6993      	ldr	r3, [r2, #24]
 8005400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005404:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	6993      	ldr	r3, [r2, #24]
 800540a:	6929      	ldr	r1, [r5, #16]
 800540c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005410:	6193      	str	r3, [r2, #24]
      break;
 8005412:	e7e7      	b.n	80053e4 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005414:	6800      	ldr	r0, [r0, #0]
 8005416:	f7ff fc55 	bl	8004cc4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541a:	6822      	ldr	r2, [r4, #0]
 800541c:	69d3      	ldr	r3, [r2, #28]
 800541e:	f043 0308 	orr.w	r3, r3, #8
 8005422:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005424:	6822      	ldr	r2, [r4, #0]
 8005426:	69d3      	ldr	r3, [r2, #28]
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	69d3      	ldr	r3, [r2, #28]
 8005432:	6929      	ldr	r1, [r5, #16]
 8005434:	430b      	orrs	r3, r1
 8005436:	61d3      	str	r3, [r2, #28]
      break;
 8005438:	e7d4      	b.n	80053e4 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543a:	6800      	ldr	r0, [r0, #0]
 800543c:	f7ff fc74 	bl	8004d28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	69d3      	ldr	r3, [r2, #28]
 8005444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005448:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	69d3      	ldr	r3, [r2, #28]
 800544e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005452:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005454:	6822      	ldr	r2, [r4, #0]
 8005456:	69d3      	ldr	r3, [r2, #28]
 8005458:	6929      	ldr	r1, [r5, #16]
 800545a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800545e:	61d3      	str	r3, [r2, #28]
      break;
 8005460:	e7c0      	b.n	80053e4 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8005462:	2002      	movs	r0, #2
 8005464:	e7c1      	b.n	80053ea <HAL_TIM_PWM_ConfigChannel+0x54>
	...

08005468 <TIM_TI1_SetConfig>:
{
 8005468:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546a:	6a04      	ldr	r4, [r0, #32]
 800546c:	f024 0401 	bic.w	r4, r4, #1
 8005470:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005472:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005474:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005476:	4e11      	ldr	r6, [pc, #68]	; (80054bc <TIM_TI1_SetConfig+0x54>)
 8005478:	42b0      	cmp	r0, r6
 800547a:	d00d      	beq.n	8005498 <TIM_TI1_SetConfig+0x30>
 800547c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005480:	d00a      	beq.n	8005498 <TIM_TI1_SetConfig+0x30>
 8005482:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005486:	42b0      	cmp	r0, r6
 8005488:	d006      	beq.n	8005498 <TIM_TI1_SetConfig+0x30>
 800548a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800548e:	42b0      	cmp	r0, r6
 8005490:	d002      	beq.n	8005498 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005492:	f044 0201 	orr.w	r2, r4, #1
 8005496:	e002      	b.n	800549e <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005498:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800549c:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800549e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a8:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054ac:	f001 010a 	and.w	r1, r1, #10
 80054b0:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80054b2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80054b4:	6201      	str	r1, [r0, #32]
}
 80054b6:	bc70      	pop	{r4, r5, r6}
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00

080054c0 <HAL_TIM_IC_ConfigChannel>:
{
 80054c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80054c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d052      	beq.n	8005570 <HAL_TIM_IC_ConfigChannel+0xb0>
 80054ca:	4604      	mov	r4, r0
 80054cc:	460d      	mov	r5, r1
 80054ce:	2301      	movs	r3, #1
 80054d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80054d4:	b1c2      	cbz	r2, 8005508 <HAL_TIM_IC_ConfigChannel+0x48>
  else if (Channel == TIM_CHANNEL_2)
 80054d6:	2a04      	cmp	r2, #4
 80054d8:	d027      	beq.n	800552a <HAL_TIM_IC_ConfigChannel+0x6a>
  else if (Channel == TIM_CHANNEL_3)
 80054da:	2a08      	cmp	r2, #8
 80054dc:	d037      	beq.n	800554e <HAL_TIM_IC_ConfigChannel+0x8e>
    TIM_TI4_SetConfig(htim->Instance,
 80054de:	68cb      	ldr	r3, [r1, #12]
 80054e0:	684a      	ldr	r2, [r1, #4]
 80054e2:	6809      	ldr	r1, [r1, #0]
 80054e4:	6800      	ldr	r0, [r0, #0]
 80054e6:	f7ff fc9b 	bl	8004e20 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	69d3      	ldr	r3, [r2, #28]
 80054ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054f2:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054f4:	6822      	ldr	r2, [r4, #0]
 80054f6:	69d3      	ldr	r3, [r2, #28]
 80054f8:	68a9      	ldr	r1, [r5, #8]
 80054fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80054fe:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 8005500:	2000      	movs	r0, #0
 8005502:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005506:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8005508:	68cb      	ldr	r3, [r1, #12]
 800550a:	684a      	ldr	r2, [r1, #4]
 800550c:	6809      	ldr	r1, [r1, #0]
 800550e:	6800      	ldr	r0, [r0, #0]
 8005510:	f7ff ffaa 	bl	8005468 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	6993      	ldr	r3, [r2, #24]
 8005518:	f023 030c 	bic.w	r3, r3, #12
 800551c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	6993      	ldr	r3, [r2, #24]
 8005522:	68a9      	ldr	r1, [r5, #8]
 8005524:	430b      	orrs	r3, r1
 8005526:	6193      	str	r3, [r2, #24]
 8005528:	e7ea      	b.n	8005500 <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI2_SetConfig(htim->Instance,
 800552a:	68cb      	ldr	r3, [r1, #12]
 800552c:	684a      	ldr	r2, [r1, #4]
 800552e:	6809      	ldr	r1, [r1, #0]
 8005530:	6800      	ldr	r0, [r0, #0]
 8005532:	f7ff fc2f 	bl	8004d94 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	6993      	ldr	r3, [r2, #24]
 800553a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800553e:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	6993      	ldr	r3, [r2, #24]
 8005544:	68a9      	ldr	r1, [r5, #8]
 8005546:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800554a:	6193      	str	r3, [r2, #24]
 800554c:	e7d8      	b.n	8005500 <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI3_SetConfig(htim->Instance,
 800554e:	68cb      	ldr	r3, [r1, #12]
 8005550:	684a      	ldr	r2, [r1, #4]
 8005552:	6809      	ldr	r1, [r1, #0]
 8005554:	6800      	ldr	r0, [r0, #0]
 8005556:	f7ff fc4a 	bl	8004dee <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	69d3      	ldr	r3, [r2, #28]
 800555e:	f023 030c 	bic.w	r3, r3, #12
 8005562:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	69d3      	ldr	r3, [r2, #28]
 8005568:	68a9      	ldr	r1, [r5, #8]
 800556a:	430b      	orrs	r3, r1
 800556c:	61d3      	str	r3, [r2, #28]
 800556e:	e7c7      	b.n	8005500 <HAL_TIM_IC_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 8005570:	2002      	movs	r0, #2
 8005572:	e7c8      	b.n	8005506 <HAL_TIM_IC_ConfigChannel+0x46>

08005574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005574:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005576:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005578:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800557c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005580:	430a      	orrs	r2, r1
 8005582:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005584:	6082      	str	r2, [r0, #8]
}
 8005586:	bc10      	pop	{r4}
 8005588:	4770      	bx	lr

0800558a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800558a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d066      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0xd6>
{
 8005592:	b510      	push	{r4, lr}
 8005594:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005596:	2301      	movs	r3, #1
 8005598:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	2302      	movs	r3, #2
 800559e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80055a2:	6802      	ldr	r2, [r0, #0]
 80055a4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80055ae:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80055b0:	680b      	ldr	r3, [r1, #0]
 80055b2:	2b60      	cmp	r3, #96	; 0x60
 80055b4:	d040      	beq.n	8005638 <HAL_TIM_ConfigClockSource+0xae>
 80055b6:	d822      	bhi.n	80055fe <HAL_TIM_ConfigClockSource+0x74>
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d047      	beq.n	800564c <HAL_TIM_ConfigClockSource+0xc2>
 80055bc:	d90b      	bls.n	80055d6 <HAL_TIM_ConfigClockSource+0x4c>
 80055be:	2b50      	cmp	r3, #80	; 0x50
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	68ca      	ldr	r2, [r1, #12]
 80055c4:	6849      	ldr	r1, [r1, #4]
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	f7ff fbd2 	bl	8004d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055cc:	2150      	movs	r1, #80	; 0x50
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	f7ff fc40 	bl	8004e54 <TIM_ITRx_SetConfig>
      break;
 80055d4:	e004      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d00c      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0x6a>
 80055da:	d908      	bls.n	80055ee <HAL_TIM_ConfigClockSource+0x64>
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d009      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80055e6:	2000      	movs	r0, #0
 80055e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80055ec:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80055ee:	b10b      	cbz	r3, 80055f4 <HAL_TIM_ConfigClockSource+0x6a>
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d1f5      	bne.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f4:	4619      	mov	r1, r3
 80055f6:	6820      	ldr	r0, [r4, #0]
 80055f8:	f7ff fc2c 	bl	8004e54 <TIM_ITRx_SetConfig>
        break;
 80055fc:	e7f0      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80055fe:	2b70      	cmp	r3, #112	; 0x70
 8005600:	d00e      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0x96>
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005606:	d1eb      	bne.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8005608:	68cb      	ldr	r3, [r1, #12]
 800560a:	684a      	ldr	r2, [r1, #4]
 800560c:	6889      	ldr	r1, [r1, #8]
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	f7ff ffb0 	bl	8005574 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	6893      	ldr	r3, [r2, #8]
 8005618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800561c:	6093      	str	r3, [r2, #8]
      break;
 800561e:	e7df      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8005620:	68cb      	ldr	r3, [r1, #12]
 8005622:	684a      	ldr	r2, [r1, #4]
 8005624:	6889      	ldr	r1, [r1, #8]
 8005626:	6800      	ldr	r0, [r0, #0]
 8005628:	f7ff ffa4 	bl	8005574 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005634:	6093      	str	r3, [r2, #8]
      break;
 8005636:	e7d3      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005638:	68ca      	ldr	r2, [r1, #12]
 800563a:	6849      	ldr	r1, [r1, #4]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	f7ff fbc3 	bl	8004dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005642:	2160      	movs	r1, #96	; 0x60
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	f7ff fc05 	bl	8004e54 <TIM_ITRx_SetConfig>
      break;
 800564a:	e7c9      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800564c:	68ca      	ldr	r2, [r1, #12]
 800564e:	6849      	ldr	r1, [r1, #4]
 8005650:	6800      	ldr	r0, [r0, #0]
 8005652:	f7ff fb8d 	bl	8004d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005656:	2140      	movs	r1, #64	; 0x40
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	f7ff fbfb 	bl	8004e54 <TIM_ITRx_SetConfig>
      break;
 800565e:	e7bf      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8005660:	2002      	movs	r0, #2
}
 8005662:	4770      	bx	lr

08005664 <TIM_SlaveTimer_SetConfig>:
{
 8005664:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8005666:	6804      	ldr	r4, [r0, #0]
 8005668:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800566a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800566e:	684b      	ldr	r3, [r1, #4]
 8005670:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005672:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005676:	680a      	ldr	r2, [r1, #0]
 8005678:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800567a:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 800567c:	684b      	ldr	r3, [r1, #4]
 800567e:	2b60      	cmp	r3, #96	; 0x60
 8005680:	d02c      	beq.n	80056dc <TIM_SlaveTimer_SetConfig+0x78>
 8005682:	d80c      	bhi.n	800569e <TIM_SlaveTimer_SetConfig+0x3a>
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d014      	beq.n	80056b2 <TIM_SlaveTimer_SetConfig+0x4e>
 8005688:	2b50      	cmp	r3, #80	; 0x50
 800568a:	d106      	bne.n	800569a <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800568c:	690a      	ldr	r2, [r1, #16]
 800568e:	6889      	ldr	r1, [r1, #8]
 8005690:	6800      	ldr	r0, [r0, #0]
 8005692:	f7ff fb6d 	bl	8004d70 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8005696:	2000      	movs	r0, #0
      break;
 8005698:	e028      	b.n	80056ec <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 800569a:	2000      	movs	r0, #0
 800569c:	e026      	b.n	80056ec <TIM_SlaveTimer_SetConfig+0x88>
 800569e:	2b70      	cmp	r3, #112	; 0x70
 80056a0:	d123      	bne.n	80056ea <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 80056a2:	690b      	ldr	r3, [r1, #16]
 80056a4:	688a      	ldr	r2, [r1, #8]
 80056a6:	68c9      	ldr	r1, [r1, #12]
 80056a8:	6800      	ldr	r0, [r0, #0]
 80056aa:	f7ff ff63 	bl	8005574 <TIM_ETR_SetConfig>
  return HAL_OK;
 80056ae:	2000      	movs	r0, #0
      break;
 80056b0:	e01c      	b.n	80056ec <TIM_SlaveTimer_SetConfig+0x88>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80056b2:	680b      	ldr	r3, [r1, #0]
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	d01a      	beq.n	80056ee <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 80056b8:	6803      	ldr	r3, [r0, #0]
 80056ba:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80056c4:	6802      	ldr	r2, [r0, #0]
 80056c6:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80056cc:	6909      	ldr	r1, [r1, #16]
 80056ce:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80056d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80056d4:	6803      	ldr	r3, [r0, #0]
 80056d6:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 80056d8:	2000      	movs	r0, #0
      break;
 80056da:	e007      	b.n	80056ec <TIM_SlaveTimer_SetConfig+0x88>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056dc:	690a      	ldr	r2, [r1, #16]
 80056de:	6889      	ldr	r1, [r1, #8]
 80056e0:	6800      	ldr	r0, [r0, #0]
 80056e2:	f7ff fb71 	bl	8004dc8 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 80056e6:	2000      	movs	r0, #0
      break;
 80056e8:	e000      	b.n	80056ec <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 80056ea:	2000      	movs	r0, #0
}
 80056ec:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 80056ee:	2001      	movs	r0, #1
 80056f0:	e7fc      	b.n	80056ec <TIM_SlaveTimer_SetConfig+0x88>

080056f2 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80056f2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d022      	beq.n	8005740 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80056fe:	2301      	movs	r3, #1
 8005700:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	2302      	movs	r3, #2
 8005706:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800570a:	f7ff ffab 	bl	8005664 <TIM_SlaveTimer_SetConfig>
 800570e:	b980      	cbnz	r0, 8005732 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	68d3      	ldr	r3, [r2, #12]
 8005714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005718:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	68d3      	ldr	r3, [r2, #12]
 800571e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005722:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005724:	2301      	movs	r3, #1
 8005726:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800572a:	2300      	movs	r3, #0
 800572c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005730:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8005732:	2001      	movs	r0, #1
 8005734:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005738:	2300      	movs	r3, #0
 800573a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800573e:	e7f7      	b.n	8005730 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8005740:	2002      	movs	r0, #2
}
 8005742:	4770      	bx	lr

08005744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005744:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005746:	f001 011f 	and.w	r1, r1, #31
 800574a:	2301      	movs	r3, #1
 800574c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005750:	6a03      	ldr	r3, [r0, #32]
 8005752:	ea23 0304 	bic.w	r3, r3, r4
 8005756:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005758:	6a03      	ldr	r3, [r0, #32]
 800575a:	fa02 f101 	lsl.w	r1, r2, r1
 800575e:	430b      	orrs	r3, r1
 8005760:	6203      	str	r3, [r0, #32]
}
 8005762:	bc10      	pop	{r4}
 8005764:	4770      	bx	lr
	...

08005768 <HAL_TIM_OC_Start_IT>:
{
 8005768:	b510      	push	{r4, lr}
 800576a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800576c:	4608      	mov	r0, r1
 800576e:	b9b1      	cbnz	r1, 800579e <HAL_TIM_OC_Start_IT+0x36>
 8005770:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005774:	b2db      	uxtb	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	bf18      	it	ne
 800577a:	2301      	movne	r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d17c      	bne.n	800587a <HAL_TIM_OC_Start_IT+0x112>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005780:	bb30      	cbnz	r0, 80057d0 <HAL_TIM_OC_Start_IT+0x68>
 8005782:	2302      	movs	r3, #2
 8005784:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  switch (Channel)
 8005788:	280c      	cmp	r0, #12
 800578a:	d836      	bhi.n	80057fa <HAL_TIM_OC_Start_IT+0x92>
 800578c:	e8df f000 	tbb	[pc, r0]
 8005790:	35353530 	.word	0x35353530
 8005794:	35353553 	.word	0x35353553
 8005798:	35353559 	.word	0x35353559
 800579c:	5f          	.byte	0x5f
 800579d:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800579e:	2904      	cmp	r1, #4
 80057a0:	d008      	beq.n	80057b4 <HAL_TIM_OC_Start_IT+0x4c>
 80057a2:	2908      	cmp	r1, #8
 80057a4:	d00d      	beq.n	80057c2 <HAL_TIM_OC_Start_IT+0x5a>
 80057a6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	bf18      	it	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	e7e3      	b.n	800577c <HAL_TIM_OC_Start_IT+0x14>
 80057b4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	bf18      	it	ne
 80057be:	2301      	movne	r3, #1
 80057c0:	e7dc      	b.n	800577c <HAL_TIM_OC_Start_IT+0x14>
 80057c2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	bf18      	it	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	e7d5      	b.n	800577c <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d0:	2804      	cmp	r0, #4
 80057d2:	d005      	beq.n	80057e0 <HAL_TIM_OC_Start_IT+0x78>
 80057d4:	2808      	cmp	r0, #8
 80057d6:	d007      	beq.n	80057e8 <HAL_TIM_OC_Start_IT+0x80>
 80057d8:	2302      	movs	r3, #2
 80057da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80057de:	e7d3      	b.n	8005788 <HAL_TIM_OC_Start_IT+0x20>
 80057e0:	2302      	movs	r3, #2
 80057e2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80057e6:	e7cf      	b.n	8005788 <HAL_TIM_OC_Start_IT+0x20>
 80057e8:	2302      	movs	r3, #2
 80057ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057ee:	e7cb      	b.n	8005788 <HAL_TIM_OC_Start_IT+0x20>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	68d3      	ldr	r3, [r2, #12]
 80057f4:	f043 0302 	orr.w	r3, r3, #2
 80057f8:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057fa:	2201      	movs	r2, #1
 80057fc:	4601      	mov	r1, r0
 80057fe:	6820      	ldr	r0, [r4, #0]
 8005800:	f7ff ffa0 	bl	8005744 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <HAL_TIM_OC_Start_IT+0x11c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d026      	beq.n	800585a <HAL_TIM_OC_Start_IT+0xf2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <HAL_TIM_OC_Start_IT+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d027      	beq.n	8005864 <HAL_TIM_OC_Start_IT+0xfc>
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d024      	beq.n	8005864 <HAL_TIM_OC_Start_IT+0xfc>
 800581a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800581e:	4293      	cmp	r3, r2
 8005820:	d020      	beq.n	8005864 <HAL_TIM_OC_Start_IT+0xfc>
 8005822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005826:	4293      	cmp	r3, r2
 8005828:	d01c      	beq.n	8005864 <HAL_TIM_OC_Start_IT+0xfc>
    __HAL_TIM_ENABLE(htim);
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005832:	2000      	movs	r0, #0
 8005834:	e022      	b.n	800587c <HAL_TIM_OC_Start_IT+0x114>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	68d3      	ldr	r3, [r2, #12]
 800583a:	f043 0304 	orr.w	r3, r3, #4
 800583e:	60d3      	str	r3, [r2, #12]
      break;
 8005840:	e7db      	b.n	80057fa <HAL_TIM_OC_Start_IT+0x92>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	68d3      	ldr	r3, [r2, #12]
 8005846:	f043 0308 	orr.w	r3, r3, #8
 800584a:	60d3      	str	r3, [r2, #12]
      break;
 800584c:	e7d5      	b.n	80057fa <HAL_TIM_OC_Start_IT+0x92>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	68d3      	ldr	r3, [r2, #12]
 8005852:	f043 0310 	orr.w	r3, r3, #16
 8005856:	60d3      	str	r3, [r2, #12]
      break;
 8005858:	e7cf      	b.n	80057fa <HAL_TIM_OC_Start_IT+0x92>
    __HAL_TIM_MOE_ENABLE(htim);
 800585a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
 8005862:	e7d3      	b.n	800580c <HAL_TIM_OC_Start_IT+0xa4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586a:	2a06      	cmp	r2, #6
 800586c:	d007      	beq.n	800587e <HAL_TIM_OC_Start_IT+0x116>
      __HAL_TIM_ENABLE(htim);
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005876:	2000      	movs	r0, #0
 8005878:	e000      	b.n	800587c <HAL_TIM_OC_Start_IT+0x114>
    return HAL_ERROR;
 800587a:	2001      	movs	r0, #1
}
 800587c:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800587e:	2000      	movs	r0, #0
 8005880:	e7fc      	b.n	800587c <HAL_TIM_OC_Start_IT+0x114>
 8005882:	bf00      	nop
 8005884:	40012c00 	.word	0x40012c00

08005888 <HAL_TIM_OC_Stop_IT>:
{
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4605      	mov	r5, r0
 800588c:	460c      	mov	r4, r1
  switch (Channel)
 800588e:	290c      	cmp	r1, #12
 8005890:	d80d      	bhi.n	80058ae <HAL_TIM_OC_Stop_IT+0x26>
 8005892:	e8df f001 	tbb	[pc, r1]
 8005896:	0c07      	.short	0x0c07
 8005898:	0c2a0c0c 	.word	0x0c2a0c0c
 800589c:	0c300c0c 	.word	0x0c300c0c
 80058a0:	0c0c      	.short	0x0c0c
 80058a2:	36          	.byte	0x36
 80058a3:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80058a4:	6802      	ldr	r2, [r0, #0]
 80058a6:	68d3      	ldr	r3, [r2, #12]
 80058a8:	f023 0302 	bic.w	r3, r3, #2
 80058ac:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058ae:	2200      	movs	r2, #0
 80058b0:	4621      	mov	r1, r4
 80058b2:	6828      	ldr	r0, [r5, #0]
 80058b4:	f7ff ff46 	bl	8005744 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	4a24      	ldr	r2, [pc, #144]	; (800594c <HAL_TIM_OC_Stop_IT+0xc4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d026      	beq.n	800590e <HAL_TIM_OC_Stop_IT+0x86>
  __HAL_TIM_DISABLE(htim);
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	6a19      	ldr	r1, [r3, #32]
 80058c4:	f241 1211 	movw	r2, #4369	; 0x1111
 80058c8:	4211      	tst	r1, r2
 80058ca:	d108      	bne.n	80058de <HAL_TIM_OC_Stop_IT+0x56>
 80058cc:	6a19      	ldr	r1, [r3, #32]
 80058ce:	f240 4244 	movw	r2, #1092	; 0x444
 80058d2:	4211      	tst	r1, r2
 80058d4:	d103      	bne.n	80058de <HAL_TIM_OC_Stop_IT+0x56>
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058de:	bb2c      	cbnz	r4, 800592c <HAL_TIM_OC_Stop_IT+0xa4>
 80058e0:	2301      	movs	r3, #1
 80058e2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 80058e6:	2000      	movs	r0, #0
 80058e8:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80058ea:	6802      	ldr	r2, [r0, #0]
 80058ec:	68d3      	ldr	r3, [r2, #12]
 80058ee:	f023 0304 	bic.w	r3, r3, #4
 80058f2:	60d3      	str	r3, [r2, #12]
      break;
 80058f4:	e7db      	b.n	80058ae <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80058f6:	6802      	ldr	r2, [r0, #0]
 80058f8:	68d3      	ldr	r3, [r2, #12]
 80058fa:	f023 0308 	bic.w	r3, r3, #8
 80058fe:	60d3      	str	r3, [r2, #12]
      break;
 8005900:	e7d5      	b.n	80058ae <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005902:	6802      	ldr	r2, [r0, #0]
 8005904:	68d3      	ldr	r3, [r2, #12]
 8005906:	f023 0310 	bic.w	r3, r3, #16
 800590a:	60d3      	str	r3, [r2, #12]
      break;
 800590c:	e7cf      	b.n	80058ae <HAL_TIM_OC_Stop_IT+0x26>
    __HAL_TIM_MOE_DISABLE(htim);
 800590e:	6a19      	ldr	r1, [r3, #32]
 8005910:	f241 1211 	movw	r2, #4369	; 0x1111
 8005914:	4211      	tst	r1, r2
 8005916:	d1d3      	bne.n	80058c0 <HAL_TIM_OC_Stop_IT+0x38>
 8005918:	6a19      	ldr	r1, [r3, #32]
 800591a:	f240 4244 	movw	r2, #1092	; 0x444
 800591e:	4211      	tst	r1, r2
 8005920:	d1ce      	bne.n	80058c0 <HAL_TIM_OC_Stop_IT+0x38>
 8005922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005928:	645a      	str	r2, [r3, #68]	; 0x44
 800592a:	e7c9      	b.n	80058c0 <HAL_TIM_OC_Stop_IT+0x38>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	2c04      	cmp	r4, #4
 800592e:	d005      	beq.n	800593c <HAL_TIM_OC_Stop_IT+0xb4>
 8005930:	2c08      	cmp	r4, #8
 8005932:	d007      	beq.n	8005944 <HAL_TIM_OC_Stop_IT+0xbc>
 8005934:	2301      	movs	r3, #1
 8005936:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800593a:	e7d4      	b.n	80058e6 <HAL_TIM_OC_Stop_IT+0x5e>
 800593c:	2301      	movs	r3, #1
 800593e:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 8005942:	e7d0      	b.n	80058e6 <HAL_TIM_OC_Stop_IT+0x5e>
 8005944:	2301      	movs	r3, #1
 8005946:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800594a:	e7cc      	b.n	80058e6 <HAL_TIM_OC_Stop_IT+0x5e>
 800594c:	40012c00 	.word	0x40012c00

08005950 <HAL_TIM_PWM_Start>:
{
 8005950:	b510      	push	{r4, lr}
 8005952:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005954:	4608      	mov	r0, r1
 8005956:	bb51      	cbnz	r1, 80059ae <HAL_TIM_PWM_Start+0x5e>
 8005958:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800595c:	b2db      	uxtb	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	bf18      	it	ne
 8005962:	2301      	movne	r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d15b      	bne.n	8005a20 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005968:	2800      	cmp	r0, #0
 800596a:	d139      	bne.n	80059e0 <HAL_TIM_PWM_Start+0x90>
 800596c:	2302      	movs	r3, #2
 800596e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005972:	2201      	movs	r2, #1
 8005974:	4601      	mov	r1, r0
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	f7ff fee4 	bl	8005744 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <HAL_TIM_PWM_Start+0xd8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d03d      	beq.n	8005a00 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	4a28      	ldr	r2, [pc, #160]	; (8005a28 <HAL_TIM_PWM_Start+0xd8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d03e      	beq.n	8005a0a <HAL_TIM_PWM_Start+0xba>
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d03b      	beq.n	8005a0a <HAL_TIM_PWM_Start+0xba>
 8005992:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005996:	4293      	cmp	r3, r2
 8005998:	d037      	beq.n	8005a0a <HAL_TIM_PWM_Start+0xba>
 800599a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800599e:	4293      	cmp	r3, r2
 80059a0:	d033      	beq.n	8005a0a <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80059aa:	2000      	movs	r0, #0
 80059ac:	e039      	b.n	8005a22 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ae:	2904      	cmp	r1, #4
 80059b0:	d008      	beq.n	80059c4 <HAL_TIM_PWM_Start+0x74>
 80059b2:	2908      	cmp	r1, #8
 80059b4:	d00d      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x82>
 80059b6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	bf18      	it	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	e7cf      	b.n	8005964 <HAL_TIM_PWM_Start+0x14>
 80059c4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	bf18      	it	ne
 80059ce:	2301      	movne	r3, #1
 80059d0:	e7c8      	b.n	8005964 <HAL_TIM_PWM_Start+0x14>
 80059d2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	bf18      	it	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	e7c1      	b.n	8005964 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e0:	2804      	cmp	r0, #4
 80059e2:	d005      	beq.n	80059f0 <HAL_TIM_PWM_Start+0xa0>
 80059e4:	2808      	cmp	r0, #8
 80059e6:	d007      	beq.n	80059f8 <HAL_TIM_PWM_Start+0xa8>
 80059e8:	2302      	movs	r3, #2
 80059ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80059ee:	e7c0      	b.n	8005972 <HAL_TIM_PWM_Start+0x22>
 80059f0:	2302      	movs	r3, #2
 80059f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80059f6:	e7bc      	b.n	8005972 <HAL_TIM_PWM_Start+0x22>
 80059f8:	2302      	movs	r3, #2
 80059fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80059fe:	e7b8      	b.n	8005972 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8005a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a06:	645a      	str	r2, [r3, #68]	; 0x44
 8005a08:	e7bc      	b.n	8005984 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a10:	2a06      	cmp	r2, #6
 8005a12:	d007      	beq.n	8005a24 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e000      	b.n	8005a22 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8005a20:	2001      	movs	r0, #1
}
 8005a22:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005a24:	2000      	movs	r0, #0
 8005a26:	e7fc      	b.n	8005a22 <HAL_TIM_PWM_Start+0xd2>
 8005a28:	40012c00 	.word	0x40012c00

08005a2c <HAL_TIM_PWM_Stop>:
{
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4604      	mov	r4, r0
 8005a30:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a32:	2200      	movs	r2, #0
 8005a34:	6800      	ldr	r0, [r0, #0]
 8005a36:	f7ff fe85 	bl	8005744 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	4a1b      	ldr	r2, [pc, #108]	; (8005aac <HAL_TIM_PWM_Stop+0x80>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d014      	beq.n	8005a6c <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	6a19      	ldr	r1, [r3, #32]
 8005a46:	f241 1211 	movw	r2, #4369	; 0x1111
 8005a4a:	4211      	tst	r1, r2
 8005a4c:	d108      	bne.n	8005a60 <HAL_TIM_PWM_Stop+0x34>
 8005a4e:	6a19      	ldr	r1, [r3, #32]
 8005a50:	f240 4244 	movw	r2, #1092	; 0x444
 8005a54:	4211      	tst	r1, r2
 8005a56:	d103      	bne.n	8005a60 <HAL_TIM_PWM_Stop+0x34>
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	b99d      	cbnz	r5, 8005a8a <HAL_TIM_PWM_Stop+0x5e>
 8005a62:	2301      	movs	r3, #1
 8005a64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005a68:	2000      	movs	r0, #0
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005a6c:	6a19      	ldr	r1, [r3, #32]
 8005a6e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005a72:	4211      	tst	r1, r2
 8005a74:	d1e5      	bne.n	8005a42 <HAL_TIM_PWM_Stop+0x16>
 8005a76:	6a19      	ldr	r1, [r3, #32]
 8005a78:	f240 4244 	movw	r2, #1092	; 0x444
 8005a7c:	4211      	tst	r1, r2
 8005a7e:	d1e0      	bne.n	8005a42 <HAL_TIM_PWM_Stop+0x16>
 8005a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a86:	645a      	str	r2, [r3, #68]	; 0x44
 8005a88:	e7db      	b.n	8005a42 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a8a:	2d04      	cmp	r5, #4
 8005a8c:	d005      	beq.n	8005a9a <HAL_TIM_PWM_Stop+0x6e>
 8005a8e:	2d08      	cmp	r5, #8
 8005a90:	d007      	beq.n	8005aa2 <HAL_TIM_PWM_Stop+0x76>
 8005a92:	2301      	movs	r3, #1
 8005a94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005a98:	e7e6      	b.n	8005a68 <HAL_TIM_PWM_Stop+0x3c>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005aa0:	e7e2      	b.n	8005a68 <HAL_TIM_PWM_Stop+0x3c>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005aa8:	e7de      	b.n	8005a68 <HAL_TIM_PWM_Stop+0x3c>
 8005aaa:	bf00      	nop
 8005aac:	40012c00 	.word	0x40012c00

08005ab0 <HAL_TIM_IC_Start_IT>:
{
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	bb01      	cbnz	r1, 8005afa <HAL_TIM_IC_Start_IT+0x4a>
 8005ab8:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8005abc:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005abe:	bb63      	cbnz	r3, 8005b1a <HAL_TIM_IC_Start_IT+0x6a>
 8005ac0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005ac4:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ac6:	2801      	cmp	r0, #1
 8005ac8:	f040 8093 	bne.w	8005bf2 <HAL_TIM_IC_Start_IT+0x142>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005acc:	2a01      	cmp	r2, #1
 8005ace:	f040 8091 	bne.w	8005bf4 <HAL_TIM_IC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad2:	bb93      	cbnz	r3, 8005b3a <HAL_TIM_IC_Start_IT+0x8a>
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d13d      	bne.n	8005b5a <HAL_TIM_IC_Start_IT+0xaa>
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  switch (Channel)
 8005ae4:	2b0c      	cmp	r3, #12
 8005ae6:	d84d      	bhi.n	8005b84 <HAL_TIM_IC_Start_IT+0xd4>
 8005ae8:	e8df f003 	tbb	[pc, r3]
 8005aec:	4c4c4c47 	.word	0x4c4c4c47
 8005af0:	4c4c4c66 	.word	0x4c4c4c66
 8005af4:	4c4c4c6c 	.word	0x4c4c4c6c
 8005af8:	72          	.byte	0x72
 8005af9:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005afa:	2904      	cmp	r1, #4
 8005afc:	d005      	beq.n	8005b0a <HAL_TIM_IC_Start_IT+0x5a>
 8005afe:	2908      	cmp	r1, #8
 8005b00:	d007      	beq.n	8005b12 <HAL_TIM_IC_Start_IT+0x62>
 8005b02:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8005b06:	b2c0      	uxtb	r0, r0
 8005b08:	e7d9      	b.n	8005abe <HAL_TIM_IC_Start_IT+0xe>
 8005b0a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8005b0e:	b2c0      	uxtb	r0, r0
 8005b10:	e7d5      	b.n	8005abe <HAL_TIM_IC_Start_IT+0xe>
 8005b12:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8005b16:	b2c0      	uxtb	r0, r0
 8005b18:	e7d1      	b.n	8005abe <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d005      	beq.n	8005b2a <HAL_TIM_IC_Start_IT+0x7a>
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d007      	beq.n	8005b32 <HAL_TIM_IC_Start_IT+0x82>
 8005b22:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	e7cd      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x16>
 8005b2a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	e7c9      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x16>
 8005b32:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	e7c5      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d005      	beq.n	8005b4a <HAL_TIM_IC_Start_IT+0x9a>
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d007      	beq.n	8005b52 <HAL_TIM_IC_Start_IT+0xa2>
 8005b42:	2202      	movs	r2, #2
 8005b44:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8005b48:	e7c7      	b.n	8005ada <HAL_TIM_IC_Start_IT+0x2a>
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8005b50:	e7c3      	b.n	8005ada <HAL_TIM_IC_Start_IT+0x2a>
 8005b52:	2202      	movs	r2, #2
 8005b54:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8005b58:	e7bf      	b.n	8005ada <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d005      	beq.n	8005b6a <HAL_TIM_IC_Start_IT+0xba>
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d007      	beq.n	8005b72 <HAL_TIM_IC_Start_IT+0xc2>
 8005b62:	2202      	movs	r2, #2
 8005b64:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005b68:	e7bc      	b.n	8005ae4 <HAL_TIM_IC_Start_IT+0x34>
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b70:	e7b8      	b.n	8005ae4 <HAL_TIM_IC_Start_IT+0x34>
 8005b72:	2202      	movs	r2, #2
 8005b74:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8005b78:	e7b4      	b.n	8005ae4 <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b7a:	6821      	ldr	r1, [r4, #0]
 8005b7c:	68ca      	ldr	r2, [r1, #12]
 8005b7e:	f042 0202 	orr.w	r2, r2, #2
 8005b82:	60ca      	str	r2, [r1, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b84:	2201      	movs	r2, #1
 8005b86:	4619      	mov	r1, r3
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	f7ff fddb 	bl	8005744 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <HAL_TIM_IC_Start_IT+0x14c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d022      	beq.n	8005bdc <HAL_TIM_IC_Start_IT+0x12c>
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9a:	d01f      	beq.n	8005bdc <HAL_TIM_IC_Start_IT+0x12c>
 8005b9c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d01b      	beq.n	8005bdc <HAL_TIM_IC_Start_IT+0x12c>
 8005ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d017      	beq.n	8005bdc <HAL_TIM_IC_Start_IT+0x12c>
    __HAL_TIM_ENABLE(htim);
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e01d      	b.n	8005bf4 <HAL_TIM_IC_Start_IT+0x144>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bb8:	6821      	ldr	r1, [r4, #0]
 8005bba:	68ca      	ldr	r2, [r1, #12]
 8005bbc:	f042 0204 	orr.w	r2, r2, #4
 8005bc0:	60ca      	str	r2, [r1, #12]
      break;
 8005bc2:	e7df      	b.n	8005b84 <HAL_TIM_IC_Start_IT+0xd4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005bc4:	6821      	ldr	r1, [r4, #0]
 8005bc6:	68ca      	ldr	r2, [r1, #12]
 8005bc8:	f042 0208 	orr.w	r2, r2, #8
 8005bcc:	60ca      	str	r2, [r1, #12]
      break;
 8005bce:	e7d9      	b.n	8005b84 <HAL_TIM_IC_Start_IT+0xd4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005bd0:	6821      	ldr	r1, [r4, #0]
 8005bd2:	68ca      	ldr	r2, [r1, #12]
 8005bd4:	f042 0210 	orr.w	r2, r2, #16
 8005bd8:	60ca      	str	r2, [r1, #12]
      break;
 8005bda:	e7d3      	b.n	8005b84 <HAL_TIM_IC_Start_IT+0xd4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be2:	2a06      	cmp	r2, #6
 8005be4:	d007      	beq.n	8005bf6 <HAL_TIM_IC_Start_IT+0x146>
      __HAL_TIM_ENABLE(htim);
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005bee:	2000      	movs	r0, #0
 8005bf0:	e000      	b.n	8005bf4 <HAL_TIM_IC_Start_IT+0x144>
    return HAL_ERROR;
 8005bf2:	2001      	movs	r0, #1
}
 8005bf4:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e7fc      	b.n	8005bf4 <HAL_TIM_IC_Start_IT+0x144>
 8005bfa:	bf00      	nop
 8005bfc:	40012c00 	.word	0x40012c00

08005c00 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d02b      	beq.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8005c08:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	2302      	movs	r3, #2
 8005c12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c16:	6803      	ldr	r3, [r0, #0]
 8005c18:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c1a:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c1c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c20:	680a      	ldr	r2, [r1, #0]
 8005c22:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c26:	6803      	ldr	r3, [r0, #0]
 8005c28:	4a0e      	ldr	r2, [pc, #56]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00a      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d007      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c34:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d104      	bne.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c44:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c48:	684a      	ldr	r2, [r1, #4]
 8005c4a:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c4c:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c54:	2300      	movs	r3, #0
 8005c56:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005c5a:	4618      	mov	r0, r3
}
 8005c5c:	bc30      	pop	{r4, r5}
 8005c5e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005c60:	2002      	movs	r0, #2
}
 8005c62:	4770      	bx	lr
 8005c64:	40012c00 	.word	0x40012c00

08005c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d022      	beq.n	8005cb6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8005c70:	2301      	movs	r3, #1
 8005c72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c76:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7c:	688a      	ldr	r2, [r1, #8]
 8005c7e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c84:	684a      	ldr	r2, [r1, #4]
 8005c86:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c8c:	680a      	ldr	r2, [r1, #0]
 8005c8e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c94:	690a      	ldr	r2, [r1, #16]
 8005c96:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c9c:	694a      	ldr	r2, [r1, #20]
 8005c9e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca4:	69ca      	ldr	r2, [r1, #28]
 8005ca6:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ca8:	6802      	ldr	r2, [r0, #0]
 8005caa:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cac:	2300      	movs	r3, #0
 8005cae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005cb6:	2002      	movs	r0, #2
}
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cbc:	4770      	bx	lr

08005cbe <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbe:	6802      	ldr	r2, [r0, #0]
 8005cc0:	68d3      	ldr	r3, [r2, #12]
 8005cc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc6:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	6802      	ldr	r2, [r0, #0]
 8005cca:	6953      	ldr	r3, [r2, #20]
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d005      	beq.n	8005ce4 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	2320      	movs	r3, #32
 8005cda:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6303      	str	r3, [r0, #48]	; 0x30
}
 8005ce2:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	6802      	ldr	r2, [r0, #0]
 8005ce6:	68d3      	ldr	r3, [r2, #12]
 8005ce8:	f023 0310 	bic.w	r3, r3, #16
 8005cec:	60d3      	str	r3, [r2, #12]
 8005cee:	e7f3      	b.n	8005cd8 <UART_EndRxTransfer+0x1a>

08005cf0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cf0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b21      	cmp	r3, #33	; 0x21
 8005cf8:	d001      	beq.n	8005cfe <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005cfa:	2002      	movs	r0, #2
  }
}
 8005cfc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfe:	6883      	ldr	r3, [r0, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d017      	beq.n	8005d36 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d06:	6a03      	ldr	r3, [r0, #32]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	6202      	str	r2, [r0, #32]
 8005d0c:	781a      	ldrb	r2, [r3, #0]
 8005d0e:	6803      	ldr	r3, [r0, #0]
 8005d10:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8005d12:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	84c3      	strh	r3, [r0, #38]	; 0x26
 8005d1c:	b94b      	cbnz	r3, 8005d32 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d1e:	6802      	ldr	r2, [r0, #0]
 8005d20:	68d3      	ldr	r3, [r2, #12]
 8005d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d26:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d28:	6802      	ldr	r2, [r0, #0]
 8005d2a:	68d3      	ldr	r3, [r2, #12]
 8005d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d30:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8005d32:	2000      	movs	r0, #0
 8005d34:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d36:	6903      	ldr	r3, [r0, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e4      	bne.n	8005d06 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d3c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	6802      	ldr	r2, [r0, #0]
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8005d48:	6a03      	ldr	r3, [r0, #32]
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	6203      	str	r3, [r0, #32]
 8005d4e:	e7e0      	b.n	8005d12 <UART_Transmit_IT+0x22>

08005d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d50:	b510      	push	{r4, lr}
 8005d52:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d54:	6802      	ldr	r2, [r0, #0]
 8005d56:	6913      	ldr	r3, [r2, #16]
 8005d58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d5c:	68c1      	ldr	r1, [r0, #12]
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d62:	6883      	ldr	r3, [r0, #8]
 8005d64:	6902      	ldr	r2, [r0, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	6942      	ldr	r2, [r0, #20]
 8005d6a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005d6c:	6801      	ldr	r1, [r0, #0]
 8005d6e:	68cb      	ldr	r3, [r1, #12]
 8005d70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d74:	f023 030c 	bic.w	r3, r3, #12
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d7c:	6802      	ldr	r2, [r0, #0]
 8005d7e:	6953      	ldr	r3, [r2, #20]
 8005d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d84:	6981      	ldr	r1, [r0, #24]
 8005d86:	430b      	orrs	r3, r1
 8005d88:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8005d8a:	6802      	ldr	r2, [r0, #0]
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <UART_SetConfig+0x88>)
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d01f      	beq.n	8005dd2 <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d92:	f7fe f9cd 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d96:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005d9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d9e:	6862      	ldr	r2, [r4, #4]
 8005da0:	0092      	lsls	r2, r2, #2
 8005da2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005da6:	480d      	ldr	r0, [pc, #52]	; (8005ddc <UART_SetConfig+0x8c>)
 8005da8:	fba0 3102 	umull	r3, r1, r0, r2
 8005dac:	0949      	lsrs	r1, r1, #5
 8005dae:	2364      	movs	r3, #100	; 0x64
 8005db0:	fb03 2311 	mls	r3, r3, r1, r2
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	3332      	adds	r3, #50	; 0x32
 8005db8:	fba0 2303 	umull	r2, r3, r0, r3
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dc2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	6821      	ldr	r1, [r4, #0]
 8005dcc:	4413      	add	r3, r2
 8005dce:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8005dd0:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dd2:	f7fe f9bd 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8005dd6:	e7de      	b.n	8005d96 <UART_SetConfig+0x46>
 8005dd8:	40013800 	.word	0x40013800
 8005ddc:	51eb851f 	.word	0x51eb851f

08005de0 <UART_WaitOnFlagUntilTimeout>:
{
 8005de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de4:	4605      	mov	r5, r0
 8005de6:	460f      	mov	r7, r1
 8005de8:	4616      	mov	r6, r2
 8005dea:	4699      	mov	r9, r3
 8005dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df0:	682c      	ldr	r4, [r5, #0]
 8005df2:	6824      	ldr	r4, [r4, #0]
 8005df4:	ea37 0304 	bics.w	r3, r7, r4
 8005df8:	bf0c      	ite	eq
 8005dfa:	2401      	moveq	r4, #1
 8005dfc:	2400      	movne	r4, #0
 8005dfe:	42b4      	cmp	r4, r6
 8005e00:	d11f      	bne.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8005e02:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005e06:	d0f3      	beq.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e08:	f1b8 0f00 	cmp.w	r8, #0
 8005e0c:	d005      	beq.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x3a>
 8005e0e:	f7fd fb47 	bl	80034a0 <HAL_GetTick>
 8005e12:	eba0 0009 	sub.w	r0, r0, r9
 8005e16:	4540      	cmp	r0, r8
 8005e18:	d9ea      	bls.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e1a:	682a      	ldr	r2, [r5, #0]
 8005e1c:	68d3      	ldr	r3, [r2, #12]
 8005e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e22:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	682a      	ldr	r2, [r5, #0]
 8005e26:	6953      	ldr	r3, [r2, #20]
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005e2e:	2320      	movs	r3, #32
 8005e30:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e34:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005e3e:	2003      	movs	r0, #3
 8005e40:	e000      	b.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8005e42:	2000      	movs	r0, #0
}
 8005e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005e48 <HAL_UART_Init>:
  if (huart == NULL)
 8005e48:	b358      	cbz	r0, 8005ea2 <HAL_UART_Init+0x5a>
{
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005e4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e52:	b30b      	cbz	r3, 8005e98 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005e54:	2324      	movs	r3, #36	; 0x24
 8005e56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	68d3      	ldr	r3, [r2, #12]
 8005e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e62:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7ff ff73 	bl	8005d50 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	6913      	ldr	r3, [r2, #16]
 8005e6e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005e72:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e74:	6822      	ldr	r2, [r4, #0]
 8005e76:	6953      	ldr	r3, [r2, #20]
 8005e78:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005e7c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	68d3      	ldr	r3, [r2, #12]
 8005e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e86:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e88:	2000      	movs	r0, #0
 8005e8a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005e96:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005e98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005e9c:	f7fd f944 	bl	8003128 <HAL_UART_MspInit>
 8005ea0:	e7d8      	b.n	8005e54 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005ea2:	2001      	movs	r0, #1
}
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_UART_Transmit>:
{
 8005ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005eae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d154      	bne.n	8005f62 <HAL_UART_Transmit+0xbc>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	d053      	beq.n	8005f6a <HAL_UART_Transmit+0xc4>
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d053      	beq.n	8005f6e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8005ec6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d051      	beq.n	8005f72 <HAL_UART_Transmit+0xcc>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ed8:	2321      	movs	r3, #33	; 0x21
 8005eda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8005ede:	f7fd fadf 	bl	80034a0 <HAL_GetTick>
 8005ee2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005ee4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ee8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	68a3      	ldr	r3, [r4, #8]
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef2:	d005      	beq.n	8005f00 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8005ef4:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8005efe:	e012      	b.n	8005f26 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f00:	6923      	ldr	r3, [r4, #16]
 8005f02:	b113      	cbz	r3, 8005f0a <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8005f04:	f04f 0800 	mov.w	r8, #0
 8005f08:	e7f6      	b.n	8005ef8 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8005f0a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005f0c:	2500      	movs	r5, #0
 8005f0e:	e7f3      	b.n	8005ef8 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f10:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005f14:	6822      	ldr	r2, [r4, #0]
 8005f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8005f1c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005f1e:	b292      	uxth	r2, r2
 8005f20:	3a01      	subs	r2, #1
 8005f22:	b292      	uxth	r2, r2
 8005f24:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f26:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b173      	cbz	r3, 8005f4a <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f2c:	9600      	str	r6, [sp, #0]
 8005f2e:	463b      	mov	r3, r7
 8005f30:	2200      	movs	r2, #0
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	4620      	mov	r0, r4
 8005f36:	f7ff ff53 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8005f3a:	b9e0      	cbnz	r0, 8005f76 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	d0e7      	beq.n	8005f10 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f40:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f48:	e7e8      	b.n	8005f1c <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f4a:	9600      	str	r6, [sp, #0]
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2140      	movs	r1, #64	; 0x40
 8005f52:	4620      	mov	r0, r4
 8005f54:	f7ff ff44 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 8005f58:	b978      	cbnz	r0, 8005f7a <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8005f5a:	2320      	movs	r3, #32
 8005f5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8005f60:	e000      	b.n	8005f64 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8005f62:	2002      	movs	r0, #2
}
 8005f64:	b002      	add	sp, #8
 8005f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	e7fa      	b.n	8005f64 <HAL_UART_Transmit+0xbe>
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e7f8      	b.n	8005f64 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8005f72:	2002      	movs	r0, #2
 8005f74:	e7f6      	b.n	8005f64 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8005f76:	2003      	movs	r0, #3
 8005f78:	e7f4      	b.n	8005f64 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8005f7a:	2003      	movs	r0, #3
 8005f7c:	e7f2      	b.n	8005f64 <HAL_UART_Transmit+0xbe>

08005f7e <HAL_UART_TxCpltCallback>:
}
 8005f7e:	4770      	bx	lr

08005f80 <UART_EndTransmit_IT>:
{
 8005f80:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f82:	6801      	ldr	r1, [r0, #0]
 8005f84:	68ca      	ldr	r2, [r1, #12]
 8005f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8a:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8005f92:	f7ff fff4 	bl	8005f7e <HAL_UART_TxCpltCallback>
}
 8005f96:	2000      	movs	r0, #0
 8005f98:	bd08      	pop	{r3, pc}

08005f9a <UART_DMAAbortOnError>:
{
 8005f9a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fa2:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005fa4:	f7fc fa38 	bl	8002418 <HAL_UART_ErrorCallback>
}
 8005fa8:	bd08      	pop	{r3, pc}

08005faa <HAL_UARTEx_RxEventCallback>:
}
 8005faa:	4770      	bx	lr

08005fac <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fac:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b22      	cmp	r3, #34	; 0x22
 8005fb4:	d160      	bne.n	8006078 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb6:	6883      	ldr	r3, [r0, #8]
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d046      	beq.n	800604c <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fbe:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc4:	d004      	beq.n	8005fd0 <UART_Receive_IT+0x24>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d14d      	bne.n	8006066 <UART_Receive_IT+0xba>
 8005fca:	6903      	ldr	r3, [r0, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d14a      	bne.n	8006066 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fd0:	6803      	ldr	r3, [r0, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005fd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005fd8:	3301      	adds	r3, #1
 8005fda:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005fdc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d148      	bne.n	800607c <UART_Receive_IT+0xd0>
{
 8005fea:	b500      	push	{lr}
 8005fec:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fee:	6802      	ldr	r2, [r0, #0]
 8005ff0:	68d3      	ldr	r3, [r2, #12]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff8:	6802      	ldr	r2, [r0, #0]
 8005ffa:	68d3      	ldr	r3, [r2, #12]
 8005ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006000:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006002:	6802      	ldr	r2, [r0, #0]
 8006004:	6953      	ldr	r3, [r2, #20]
 8006006:	f023 0301 	bic.w	r3, r3, #1
 800600a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800600c:	2320      	movs	r3, #32
 800600e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006012:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006014:	2b01      	cmp	r3, #1
 8006016:	d12c      	bne.n	8006072 <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006018:	2300      	movs	r3, #0
 800601a:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	6802      	ldr	r2, [r0, #0]
 800601e:	68d3      	ldr	r3, [r2, #12]
 8006020:	f023 0310 	bic.w	r3, r3, #16
 8006024:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006026:	6803      	ldr	r3, [r0, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f012 0f10 	tst.w	r2, #16
 800602e:	d006      	beq.n	800603e <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006030:	2200      	movs	r2, #0
 8006032:	9201      	str	r2, [sp, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	9201      	str	r2, [sp, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006040:	f7ff ffb3 	bl	8005faa <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8006044:	2000      	movs	r0, #0
}
 8006046:	b003      	add	sp, #12
 8006048:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800604c:	6902      	ldr	r2, [r0, #16]
 800604e:	2a00      	cmp	r2, #0
 8006050:	d1b5      	bne.n	8005fbe <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006052:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006054:	6803      	ldr	r3, [r0, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800605e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006060:	3302      	adds	r3, #2
 8006062:	6283      	str	r3, [r0, #40]	; 0x28
 8006064:	e7ba      	b.n	8005fdc <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006066:	6803      	ldr	r3, [r0, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606e:	7013      	strb	r3, [r2, #0]
 8006070:	e7b1      	b.n	8005fd6 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8006072:	f7fc f941 	bl	80022f8 <HAL_UART_RxCpltCallback>
 8006076:	e7e5      	b.n	8006044 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8006078:	2002      	movs	r0, #2
 800607a:	4770      	bx	lr
    return HAL_OK;
 800607c:	2000      	movs	r0, #0
}
 800607e:	4770      	bx	lr

08006080 <HAL_UART_IRQHandler>:
{
 8006080:	b530      	push	{r4, r5, lr}
 8006082:	b083      	sub	sp, #12
 8006084:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006086:	6802      	ldr	r2, [r0, #0]
 8006088:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800608a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800608c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800608e:	f013 050f 	ands.w	r5, r3, #15
 8006092:	d105      	bne.n	80060a0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006094:	f013 0f20 	tst.w	r3, #32
 8006098:	d002      	beq.n	80060a0 <HAL_UART_IRQHandler+0x20>
 800609a:	f010 0f20 	tst.w	r0, #32
 800609e:	d119      	bne.n	80060d4 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060a0:	b12d      	cbz	r5, 80060ae <HAL_UART_IRQHandler+0x2e>
 80060a2:	f011 0101 	ands.w	r1, r1, #1
 80060a6:	d119      	bne.n	80060dc <HAL_UART_IRQHandler+0x5c>
 80060a8:	f410 7f90 	tst.w	r0, #288	; 0x120
 80060ac:	d116      	bne.n	80060dc <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80060b0:	2901      	cmp	r1, #1
 80060b2:	d075      	beq.n	80061a0 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060b8:	d003      	beq.n	80060c2 <HAL_UART_IRQHandler+0x42>
 80060ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 80060be:	f040 80d7 	bne.w	8006270 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060c6:	d003      	beq.n	80060d0 <HAL_UART_IRQHandler+0x50>
 80060c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060cc:	f040 80d4 	bne.w	8006278 <HAL_UART_IRQHandler+0x1f8>
}
 80060d0:	b003      	add	sp, #12
 80060d2:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7ff ff69 	bl	8005fac <UART_Receive_IT>
      return;
 80060da:	e7f9      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060dc:	f013 0f01 	tst.w	r3, #1
 80060e0:	d006      	beq.n	80060f0 <HAL_UART_IRQHandler+0x70>
 80060e2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80060e6:	d003      	beq.n	80060f0 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f0:	f013 0f04 	tst.w	r3, #4
 80060f4:	d004      	beq.n	8006100 <HAL_UART_IRQHandler+0x80>
 80060f6:	b119      	cbz	r1, 8006100 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060fa:	f042 0202 	orr.w	r2, r2, #2
 80060fe:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006100:	f013 0f02 	tst.w	r3, #2
 8006104:	d004      	beq.n	8006110 <HAL_UART_IRQHandler+0x90>
 8006106:	b119      	cbz	r1, 8006110 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006108:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800610a:	f042 0204 	orr.w	r2, r2, #4
 800610e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006110:	f013 0f08 	tst.w	r3, #8
 8006114:	d007      	beq.n	8006126 <HAL_UART_IRQHandler+0xa6>
 8006116:	f010 0f20 	tst.w	r0, #32
 800611a:	d100      	bne.n	800611e <HAL_UART_IRQHandler+0x9e>
 800611c:	b119      	cbz	r1, 8006126 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800611e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006120:	f042 0208 	orr.w	r2, r2, #8
 8006124:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006126:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006128:	2a00      	cmp	r2, #0
 800612a:	d0d1      	beq.n	80060d0 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800612c:	f013 0f20 	tst.w	r3, #32
 8006130:	d002      	beq.n	8006138 <HAL_UART_IRQHandler+0xb8>
 8006132:	f010 0f20 	tst.w	r0, #32
 8006136:	d121      	bne.n	800617c <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006140:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006142:	f012 0f08 	tst.w	r2, #8
 8006146:	d100      	bne.n	800614a <HAL_UART_IRQHandler+0xca>
 8006148:	b323      	cbz	r3, 8006194 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 800614a:	4620      	mov	r0, r4
 800614c:	f7ff fdb7 	bl	8005cbe <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006158:	d018      	beq.n	800618c <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615a:	695a      	ldr	r2, [r3, #20]
 800615c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006160:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006164:	b173      	cbz	r3, 8006184 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006166:	4a46      	ldr	r2, [pc, #280]	; (8006280 <HAL_UART_IRQHandler+0x200>)
 8006168:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800616a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800616c:	f7fd fa62 	bl	8003634 <HAL_DMA_Abort_IT>
 8006170:	2800      	cmp	r0, #0
 8006172:	d0ad      	beq.n	80060d0 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006174:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006176:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006178:	4798      	blx	r3
 800617a:	e7a9      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 800617c:	4620      	mov	r0, r4
 800617e:	f7ff ff15 	bl	8005fac <UART_Receive_IT>
 8006182:	e7d9      	b.n	8006138 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8006184:	4620      	mov	r0, r4
 8006186:	f7fc f947 	bl	8002418 <HAL_UART_ErrorCallback>
 800618a:	e7a1      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 800618c:	4620      	mov	r0, r4
 800618e:	f7fc f943 	bl	8002418 <HAL_UART_ErrorCallback>
 8006192:	e79d      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8006194:	4620      	mov	r0, r4
 8006196:	f7fc f93f 	bl	8002418 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619a:	2300      	movs	r3, #0
 800619c:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 800619e:	e797      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80061a0:	f013 0f10 	tst.w	r3, #16
 80061a4:	d086      	beq.n	80060b4 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80061a6:	f010 0f10 	tst.w	r0, #16
 80061aa:	d083      	beq.n	80060b4 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061ac:	2300      	movs	r3, #0
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	6813      	ldr	r3, [r2, #0]
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	6853      	ldr	r3, [r2, #4]
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ba:	6953      	ldr	r3, [r2, #20]
 80061bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061c0:	d032      	beq.n	8006228 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061c4:	680b      	ldr	r3, [r1, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d080      	beq.n	80060d0 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80061ce:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80061d0:	4298      	cmp	r0, r3
 80061d2:	f67f af7d 	bls.w	80060d0 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 80061d6:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061d8:	698b      	ldr	r3, [r1, #24]
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d108      	bne.n	80061f0 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061de:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80061e0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	1ac9      	subs	r1, r1, r3
 80061e6:	b289      	uxth	r1, r1
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff fede 	bl	8005faa <HAL_UARTEx_RxEventCallback>
      return;
 80061ee:	e76f      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061f0:	68d3      	ldr	r3, [r2, #12]
 80061f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f6:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f8:	6822      	ldr	r2, [r4, #0]
 80061fa:	6953      	ldr	r3, [r2, #20]
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	6953      	ldr	r3, [r2, #20]
 8006206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620a:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800620c:	2320      	movs	r3, #32
 800620e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006212:	2300      	movs	r3, #0
 8006214:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	68d3      	ldr	r3, [r2, #12]
 800621a:	f023 0310 	bic.w	r3, r3, #16
 800621e:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006220:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006222:	f7fd f9e5 	bl	80035f0 <HAL_DMA_Abort>
 8006226:	e7da      	b.n	80061de <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006228:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800622a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800622c:	b29b      	uxth	r3, r3
 800622e:	1ac9      	subs	r1, r1, r3
 8006230:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8006232:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	f43f af4a 	beq.w	80060d0 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 800623c:	2900      	cmp	r1, #0
 800623e:	f43f af47 	beq.w	80060d0 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006242:	68d3      	ldr	r3, [r2, #12]
 8006244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006248:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	6953      	ldr	r3, [r2, #20]
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8006254:	2320      	movs	r3, #32
 8006256:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625a:	2300      	movs	r3, #0
 800625c:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	68d3      	ldr	r3, [r2, #12]
 8006262:	f023 0310 	bic.w	r3, r3, #16
 8006266:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006268:	4620      	mov	r0, r4
 800626a:	f7ff fe9e 	bl	8005faa <HAL_UARTEx_RxEventCallback>
      return;
 800626e:	e72f      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8006270:	4620      	mov	r0, r4
 8006272:	f7ff fd3d 	bl	8005cf0 <UART_Transmit_IT>
    return;
 8006276:	e72b      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8006278:	4620      	mov	r0, r4
 800627a:	f7ff fe81 	bl	8005f80 <UART_EndTransmit_IT>
    return;
 800627e:	e727      	b.n	80060d0 <HAL_UART_IRQHandler+0x50>
 8006280:	08005f9b 	.word	0x08005f9b

08006284 <UART_Start_Receive_IT>:
{
 8006284:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8006286:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8006288:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800628a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	2000      	movs	r0, #0
 800628e:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006290:	2222      	movs	r2, #34	; 0x22
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8006296:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800629a:	6819      	ldr	r1, [r3, #0]
 800629c:	68ca      	ldr	r2, [r1, #12]
 800629e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a2:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	694a      	ldr	r2, [r1, #20]
 80062a8:	f042 0201 	orr.w	r2, r2, #1
 80062ac:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68d3      	ldr	r3, [r2, #12]
 80062b2:	f043 0320 	orr.w	r3, r3, #32
 80062b6:	60d3      	str	r3, [r2, #12]
}
 80062b8:	4770      	bx	lr

080062ba <HAL_UART_Receive_IT>:
{
 80062ba:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80062bc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d10d      	bne.n	80062e2 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 80062c6:	b171      	cbz	r1, 80062e6 <HAL_UART_Receive_IT+0x2c>
 80062c8:	b17a      	cbz	r2, 80062ea <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 80062ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d00d      	beq.n	80062ee <HAL_UART_Receive_IT+0x34>
 80062d2:	2301      	movs	r3, #1
 80062d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d8:	2300      	movs	r3, #0
 80062da:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 80062dc:	f7ff ffd2 	bl	8006284 <UART_Start_Receive_IT>
 80062e0:	e000      	b.n	80062e4 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 80062e2:	2002      	movs	r0, #2
}
 80062e4:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 80062e6:	2001      	movs	r0, #1
 80062e8:	e7fc      	b.n	80062e4 <HAL_UART_Receive_IT+0x2a>
 80062ea:	2001      	movs	r0, #1
 80062ec:	e7fa      	b.n	80062e4 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 80062ee:	2002      	movs	r0, #2
 80062f0:	e7f8      	b.n	80062e4 <HAL_UART_Receive_IT+0x2a>
	...

080062f4 <arm_pid_reset_f32>:
 80062f4:	2300      	movs	r3, #0
 80062f6:	60c3      	str	r3, [r0, #12]
 80062f8:	6103      	str	r3, [r0, #16]
 80062fa:	6143      	str	r3, [r0, #20]
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop

08006300 <arm_pid_init_f32>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	4604      	mov	r4, r0
 8006304:	6986      	ldr	r6, [r0, #24]
 8006306:	6a25      	ldr	r5, [r4, #32]
 8006308:	4630      	mov	r0, r6
 800630a:	460f      	mov	r7, r1
 800630c:	69e1      	ldr	r1, [r4, #28]
 800630e:	f7fa fc3b 	bl	8000b88 <__addsf3>
 8006312:	4629      	mov	r1, r5
 8006314:	f7fa fc38 	bl	8000b88 <__addsf3>
 8006318:	4629      	mov	r1, r5
 800631a:	6020      	str	r0, [r4, #0]
 800631c:	4628      	mov	r0, r5
 800631e:	f7fa fc33 	bl	8000b88 <__addsf3>
 8006322:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006326:	4601      	mov	r1, r0
 8006328:	4630      	mov	r0, r6
 800632a:	f7fa fc2b 	bl	8000b84 <__aeabi_fsub>
 800632e:	60a5      	str	r5, [r4, #8]
 8006330:	6060      	str	r0, [r4, #4]
 8006332:	b907      	cbnz	r7, 8006336 <arm_pid_init_f32+0x36>
 8006334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006336:	2300      	movs	r3, #0
 8006338:	60e3      	str	r3, [r4, #12]
 800633a:	6123      	str	r3, [r4, #16]
 800633c:	6163      	str	r3, [r4, #20]
 800633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006340 <atoi>:
 8006340:	220a      	movs	r2, #10
 8006342:	2100      	movs	r1, #0
 8006344:	f000 be6a 	b.w	800701c <strtol>

08006348 <__errno>:
 8006348:	4b01      	ldr	r3, [pc, #4]	; (8006350 <__errno+0x8>)
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	2000005c 	.word	0x2000005c

08006354 <__libc_init_array>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	2600      	movs	r6, #0
 8006358:	4d0c      	ldr	r5, [pc, #48]	; (800638c <__libc_init_array+0x38>)
 800635a:	4c0d      	ldr	r4, [pc, #52]	; (8006390 <__libc_init_array+0x3c>)
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	42a6      	cmp	r6, r4
 8006362:	d109      	bne.n	8006378 <__libc_init_array+0x24>
 8006364:	f003 fd02 	bl	8009d6c <_init>
 8006368:	2600      	movs	r6, #0
 800636a:	4d0a      	ldr	r5, [pc, #40]	; (8006394 <__libc_init_array+0x40>)
 800636c:	4c0a      	ldr	r4, [pc, #40]	; (8006398 <__libc_init_array+0x44>)
 800636e:	1b64      	subs	r4, r4, r5
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	42a6      	cmp	r6, r4
 8006374:	d105      	bne.n	8006382 <__libc_init_array+0x2e>
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	f855 3b04 	ldr.w	r3, [r5], #4
 800637c:	4798      	blx	r3
 800637e:	3601      	adds	r6, #1
 8006380:	e7ee      	b.n	8006360 <__libc_init_array+0xc>
 8006382:	f855 3b04 	ldr.w	r3, [r5], #4
 8006386:	4798      	blx	r3
 8006388:	3601      	adds	r6, #1
 800638a:	e7f2      	b.n	8006372 <__libc_init_array+0x1e>
 800638c:	0800a9a0 	.word	0x0800a9a0
 8006390:	0800a9a0 	.word	0x0800a9a0
 8006394:	0800a9a0 	.word	0x0800a9a0
 8006398:	0800a9a4 	.word	0x0800a9a4

0800639c <memcmp>:
 800639c:	b530      	push	{r4, r5, lr}
 800639e:	2400      	movs	r4, #0
 80063a0:	3901      	subs	r1, #1
 80063a2:	42a2      	cmp	r2, r4
 80063a4:	d101      	bne.n	80063aa <memcmp+0xe>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e005      	b.n	80063b6 <memcmp+0x1a>
 80063aa:	5d03      	ldrb	r3, [r0, r4]
 80063ac:	3401      	adds	r4, #1
 80063ae:	5d0d      	ldrb	r5, [r1, r4]
 80063b0:	42ab      	cmp	r3, r5
 80063b2:	d0f6      	beq.n	80063a2 <memcmp+0x6>
 80063b4:	1b58      	subs	r0, r3, r5
 80063b6:	bd30      	pop	{r4, r5, pc}

080063b8 <memset>:
 80063b8:	4603      	mov	r3, r0
 80063ba:	4402      	add	r2, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	d100      	bne.n	80063c2 <memset+0xa>
 80063c0:	4770      	bx	lr
 80063c2:	f803 1b01 	strb.w	r1, [r3], #1
 80063c6:	e7f9      	b.n	80063bc <memset+0x4>

080063c8 <__cvt>:
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ce:	461f      	mov	r7, r3
 80063d0:	bfbb      	ittet	lt
 80063d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80063d6:	461f      	movlt	r7, r3
 80063d8:	2300      	movge	r3, #0
 80063da:	232d      	movlt	r3, #45	; 0x2d
 80063dc:	b088      	sub	sp, #32
 80063de:	4614      	mov	r4, r2
 80063e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80063e4:	7013      	strb	r3, [r2, #0]
 80063e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80063ec:	f023 0820 	bic.w	r8, r3, #32
 80063f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063f4:	d005      	beq.n	8006402 <__cvt+0x3a>
 80063f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063fa:	d100      	bne.n	80063fe <__cvt+0x36>
 80063fc:	3501      	adds	r5, #1
 80063fe:	2302      	movs	r3, #2
 8006400:	e000      	b.n	8006404 <__cvt+0x3c>
 8006402:	2303      	movs	r3, #3
 8006404:	aa07      	add	r2, sp, #28
 8006406:	9204      	str	r2, [sp, #16]
 8006408:	aa06      	add	r2, sp, #24
 800640a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800640e:	e9cd 3500 	strd	r3, r5, [sp]
 8006412:	4622      	mov	r2, r4
 8006414:	463b      	mov	r3, r7
 8006416:	f000 ff7b 	bl	8007310 <_dtoa_r>
 800641a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800641e:	4606      	mov	r6, r0
 8006420:	d102      	bne.n	8006428 <__cvt+0x60>
 8006422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006424:	07db      	lsls	r3, r3, #31
 8006426:	d522      	bpl.n	800646e <__cvt+0xa6>
 8006428:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800642c:	eb06 0905 	add.w	r9, r6, r5
 8006430:	d110      	bne.n	8006454 <__cvt+0x8c>
 8006432:	7833      	ldrb	r3, [r6, #0]
 8006434:	2b30      	cmp	r3, #48	; 0x30
 8006436:	d10a      	bne.n	800644e <__cvt+0x86>
 8006438:	2200      	movs	r2, #0
 800643a:	2300      	movs	r3, #0
 800643c:	4620      	mov	r0, r4
 800643e:	4639      	mov	r1, r7
 8006440:	f7fa fabc 	bl	80009bc <__aeabi_dcmpeq>
 8006444:	b918      	cbnz	r0, 800644e <__cvt+0x86>
 8006446:	f1c5 0501 	rsb	r5, r5, #1
 800644a:	f8ca 5000 	str.w	r5, [sl]
 800644e:	f8da 3000 	ldr.w	r3, [sl]
 8006452:	4499      	add	r9, r3
 8006454:	2200      	movs	r2, #0
 8006456:	2300      	movs	r3, #0
 8006458:	4620      	mov	r0, r4
 800645a:	4639      	mov	r1, r7
 800645c:	f7fa faae 	bl	80009bc <__aeabi_dcmpeq>
 8006460:	b108      	cbz	r0, 8006466 <__cvt+0x9e>
 8006462:	f8cd 901c 	str.w	r9, [sp, #28]
 8006466:	2230      	movs	r2, #48	; 0x30
 8006468:	9b07      	ldr	r3, [sp, #28]
 800646a:	454b      	cmp	r3, r9
 800646c:	d307      	bcc.n	800647e <__cvt+0xb6>
 800646e:	4630      	mov	r0, r6
 8006470:	9b07      	ldr	r3, [sp, #28]
 8006472:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006474:	1b9b      	subs	r3, r3, r6
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	b008      	add	sp, #32
 800647a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	9107      	str	r1, [sp, #28]
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e7f0      	b.n	8006468 <__cvt+0xa0>

08006486 <__exponent>:
 8006486:	4603      	mov	r3, r0
 8006488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648a:	2900      	cmp	r1, #0
 800648c:	f803 2b02 	strb.w	r2, [r3], #2
 8006490:	bfb6      	itet	lt
 8006492:	222d      	movlt	r2, #45	; 0x2d
 8006494:	222b      	movge	r2, #43	; 0x2b
 8006496:	4249      	neglt	r1, r1
 8006498:	2909      	cmp	r1, #9
 800649a:	7042      	strb	r2, [r0, #1]
 800649c:	dd2b      	ble.n	80064f6 <__exponent+0x70>
 800649e:	f10d 0407 	add.w	r4, sp, #7
 80064a2:	46a4      	mov	ip, r4
 80064a4:	270a      	movs	r7, #10
 80064a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80064aa:	460a      	mov	r2, r1
 80064ac:	46a6      	mov	lr, r4
 80064ae:	fb07 1516 	mls	r5, r7, r6, r1
 80064b2:	2a63      	cmp	r2, #99	; 0x63
 80064b4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80064b8:	4631      	mov	r1, r6
 80064ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80064be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064c2:	dcf0      	bgt.n	80064a6 <__exponent+0x20>
 80064c4:	3130      	adds	r1, #48	; 0x30
 80064c6:	f1ae 0502 	sub.w	r5, lr, #2
 80064ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064ce:	4629      	mov	r1, r5
 80064d0:	1c44      	adds	r4, r0, #1
 80064d2:	4561      	cmp	r1, ip
 80064d4:	d30a      	bcc.n	80064ec <__exponent+0x66>
 80064d6:	f10d 0209 	add.w	r2, sp, #9
 80064da:	eba2 020e 	sub.w	r2, r2, lr
 80064de:	4565      	cmp	r5, ip
 80064e0:	bf88      	it	hi
 80064e2:	2200      	movhi	r2, #0
 80064e4:	4413      	add	r3, r2
 80064e6:	1a18      	subs	r0, r3, r0
 80064e8:	b003      	add	sp, #12
 80064ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064f4:	e7ed      	b.n	80064d2 <__exponent+0x4c>
 80064f6:	2330      	movs	r3, #48	; 0x30
 80064f8:	3130      	adds	r1, #48	; 0x30
 80064fa:	7083      	strb	r3, [r0, #2]
 80064fc:	70c1      	strb	r1, [r0, #3]
 80064fe:	1d03      	adds	r3, r0, #4
 8006500:	e7f1      	b.n	80064e6 <__exponent+0x60>
	...

08006504 <_printf_float>:
 8006504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	b091      	sub	sp, #68	; 0x44
 800650a:	460c      	mov	r4, r1
 800650c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006510:	4616      	mov	r6, r2
 8006512:	461f      	mov	r7, r3
 8006514:	4605      	mov	r5, r0
 8006516:	f001 fea1 	bl	800825c <_localeconv_r>
 800651a:	6803      	ldr	r3, [r0, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	9309      	str	r3, [sp, #36]	; 0x24
 8006520:	f7f9 fe20 	bl	8000164 <strlen>
 8006524:	2300      	movs	r3, #0
 8006526:	930e      	str	r3, [sp, #56]	; 0x38
 8006528:	f8d8 3000 	ldr.w	r3, [r8]
 800652c:	900a      	str	r0, [sp, #40]	; 0x28
 800652e:	3307      	adds	r3, #7
 8006530:	f023 0307 	bic.w	r3, r3, #7
 8006534:	f103 0208 	add.w	r2, r3, #8
 8006538:	f894 9018 	ldrb.w	r9, [r4, #24]
 800653c:	f8d4 b000 	ldr.w	fp, [r4]
 8006540:	f8c8 2000 	str.w	r2, [r8]
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800654c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006550:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006554:	930b      	str	r3, [sp, #44]	; 0x2c
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	4640      	mov	r0, r8
 800655c:	4b9c      	ldr	r3, [pc, #624]	; (80067d0 <_printf_float+0x2cc>)
 800655e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006560:	f7fa fa5e 	bl	8000a20 <__aeabi_dcmpun>
 8006564:	bb70      	cbnz	r0, 80065c4 <_printf_float+0xc0>
 8006566:	f04f 32ff 	mov.w	r2, #4294967295
 800656a:	4640      	mov	r0, r8
 800656c:	4b98      	ldr	r3, [pc, #608]	; (80067d0 <_printf_float+0x2cc>)
 800656e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006570:	f7fa fa38 	bl	80009e4 <__aeabi_dcmple>
 8006574:	bb30      	cbnz	r0, 80065c4 <_printf_float+0xc0>
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	4640      	mov	r0, r8
 800657c:	4651      	mov	r1, sl
 800657e:	f7fa fa27 	bl	80009d0 <__aeabi_dcmplt>
 8006582:	b110      	cbz	r0, 800658a <_printf_float+0x86>
 8006584:	232d      	movs	r3, #45	; 0x2d
 8006586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658a:	4b92      	ldr	r3, [pc, #584]	; (80067d4 <_printf_float+0x2d0>)
 800658c:	4892      	ldr	r0, [pc, #584]	; (80067d8 <_printf_float+0x2d4>)
 800658e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006592:	bf94      	ite	ls
 8006594:	4698      	movls	r8, r3
 8006596:	4680      	movhi	r8, r0
 8006598:	2303      	movs	r3, #3
 800659a:	f04f 0a00 	mov.w	sl, #0
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	f02b 0304 	bic.w	r3, fp, #4
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	4633      	mov	r3, r6
 80065a8:	4621      	mov	r1, r4
 80065aa:	4628      	mov	r0, r5
 80065ac:	9700      	str	r7, [sp, #0]
 80065ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80065b0:	f000 f9d4 	bl	800695c <_printf_common>
 80065b4:	3001      	adds	r0, #1
 80065b6:	f040 8090 	bne.w	80066da <_printf_float+0x1d6>
 80065ba:	f04f 30ff 	mov.w	r0, #4294967295
 80065be:	b011      	add	sp, #68	; 0x44
 80065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c4:	4642      	mov	r2, r8
 80065c6:	4653      	mov	r3, sl
 80065c8:	4640      	mov	r0, r8
 80065ca:	4651      	mov	r1, sl
 80065cc:	f7fa fa28 	bl	8000a20 <__aeabi_dcmpun>
 80065d0:	b148      	cbz	r0, 80065e6 <_printf_float+0xe2>
 80065d2:	f1ba 0f00 	cmp.w	sl, #0
 80065d6:	bfb8      	it	lt
 80065d8:	232d      	movlt	r3, #45	; 0x2d
 80065da:	4880      	ldr	r0, [pc, #512]	; (80067dc <_printf_float+0x2d8>)
 80065dc:	bfb8      	it	lt
 80065de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065e2:	4b7f      	ldr	r3, [pc, #508]	; (80067e0 <_printf_float+0x2dc>)
 80065e4:	e7d3      	b.n	800658e <_printf_float+0x8a>
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	d142      	bne.n	8006676 <_printf_float+0x172>
 80065f0:	2306      	movs	r3, #6
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	9206      	str	r2, [sp, #24]
 80065f8:	aa0e      	add	r2, sp, #56	; 0x38
 80065fa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80065fe:	aa0d      	add	r2, sp, #52	; 0x34
 8006600:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006604:	9203      	str	r2, [sp, #12]
 8006606:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800660a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	4642      	mov	r2, r8
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4628      	mov	r0, r5
 8006618:	4653      	mov	r3, sl
 800661a:	910b      	str	r1, [sp, #44]	; 0x2c
 800661c:	f7ff fed4 	bl	80063c8 <__cvt>
 8006620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006622:	4680      	mov	r8, r0
 8006624:	2947      	cmp	r1, #71	; 0x47
 8006626:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006628:	d108      	bne.n	800663c <_printf_float+0x138>
 800662a:	1cc8      	adds	r0, r1, #3
 800662c:	db02      	blt.n	8006634 <_printf_float+0x130>
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	4299      	cmp	r1, r3
 8006632:	dd40      	ble.n	80066b6 <_printf_float+0x1b2>
 8006634:	f1a9 0902 	sub.w	r9, r9, #2
 8006638:	fa5f f989 	uxtb.w	r9, r9
 800663c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006640:	d81f      	bhi.n	8006682 <_printf_float+0x17e>
 8006642:	464a      	mov	r2, r9
 8006644:	3901      	subs	r1, #1
 8006646:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800664a:	910d      	str	r1, [sp, #52]	; 0x34
 800664c:	f7ff ff1b 	bl	8006486 <__exponent>
 8006650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006652:	4682      	mov	sl, r0
 8006654:	1813      	adds	r3, r2, r0
 8006656:	2a01      	cmp	r2, #1
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	dc02      	bgt.n	8006662 <_printf_float+0x15e>
 800665c:	6822      	ldr	r2, [r4, #0]
 800665e:	07d2      	lsls	r2, r2, #31
 8006660:	d501      	bpl.n	8006666 <_printf_float+0x162>
 8006662:	3301      	adds	r3, #1
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800666a:	2b00      	cmp	r3, #0
 800666c:	d09b      	beq.n	80065a6 <_printf_float+0xa2>
 800666e:	232d      	movs	r3, #45	; 0x2d
 8006670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006674:	e797      	b.n	80065a6 <_printf_float+0xa2>
 8006676:	2947      	cmp	r1, #71	; 0x47
 8006678:	d1bc      	bne.n	80065f4 <_printf_float+0xf0>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1ba      	bne.n	80065f4 <_printf_float+0xf0>
 800667e:	2301      	movs	r3, #1
 8006680:	e7b7      	b.n	80065f2 <_printf_float+0xee>
 8006682:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006686:	d118      	bne.n	80066ba <_printf_float+0x1b6>
 8006688:	2900      	cmp	r1, #0
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	dd0b      	ble.n	80066a6 <_printf_float+0x1a2>
 800668e:	6121      	str	r1, [r4, #16]
 8006690:	b913      	cbnz	r3, 8006698 <_printf_float+0x194>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	07d0      	lsls	r0, r2, #31
 8006696:	d502      	bpl.n	800669e <_printf_float+0x19a>
 8006698:	3301      	adds	r3, #1
 800669a:	440b      	add	r3, r1
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	f04f 0a00 	mov.w	sl, #0
 80066a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80066a4:	e7df      	b.n	8006666 <_printf_float+0x162>
 80066a6:	b913      	cbnz	r3, 80066ae <_printf_float+0x1aa>
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	07d2      	lsls	r2, r2, #31
 80066ac:	d501      	bpl.n	80066b2 <_printf_float+0x1ae>
 80066ae:	3302      	adds	r3, #2
 80066b0:	e7f4      	b.n	800669c <_printf_float+0x198>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e7f2      	b.n	800669c <_printf_float+0x198>
 80066b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80066ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066bc:	4299      	cmp	r1, r3
 80066be:	db05      	blt.n	80066cc <_printf_float+0x1c8>
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	6121      	str	r1, [r4, #16]
 80066c4:	07d8      	lsls	r0, r3, #31
 80066c6:	d5ea      	bpl.n	800669e <_printf_float+0x19a>
 80066c8:	1c4b      	adds	r3, r1, #1
 80066ca:	e7e7      	b.n	800669c <_printf_float+0x198>
 80066cc:	2900      	cmp	r1, #0
 80066ce:	bfcc      	ite	gt
 80066d0:	2201      	movgt	r2, #1
 80066d2:	f1c1 0202 	rsble	r2, r1, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	e7e0      	b.n	800669c <_printf_float+0x198>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	055a      	lsls	r2, r3, #21
 80066de:	d407      	bmi.n	80066f0 <_printf_float+0x1ec>
 80066e0:	6923      	ldr	r3, [r4, #16]
 80066e2:	4642      	mov	r2, r8
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	d12b      	bne.n	8006746 <_printf_float+0x242>
 80066ee:	e764      	b.n	80065ba <_printf_float+0xb6>
 80066f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066f4:	f240 80dd 	bls.w	80068b2 <_printf_float+0x3ae>
 80066f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066fc:	2200      	movs	r2, #0
 80066fe:	2300      	movs	r3, #0
 8006700:	f7fa f95c 	bl	80009bc <__aeabi_dcmpeq>
 8006704:	2800      	cmp	r0, #0
 8006706:	d033      	beq.n	8006770 <_printf_float+0x26c>
 8006708:	2301      	movs	r3, #1
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	4a35      	ldr	r2, [pc, #212]	; (80067e4 <_printf_float+0x2e0>)
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f af51 	beq.w	80065ba <_printf_float+0xb6>
 8006718:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800671c:	429a      	cmp	r2, r3
 800671e:	db02      	blt.n	8006726 <_printf_float+0x222>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	07d8      	lsls	r0, r3, #31
 8006724:	d50f      	bpl.n	8006746 <_printf_float+0x242>
 8006726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	f43f af42 	beq.w	80065ba <_printf_float+0xb6>
 8006736:	f04f 0800 	mov.w	r8, #0
 800673a:	f104 091a 	add.w	r9, r4, #26
 800673e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006740:	3b01      	subs	r3, #1
 8006742:	4543      	cmp	r3, r8
 8006744:	dc09      	bgt.n	800675a <_printf_float+0x256>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	079b      	lsls	r3, r3, #30
 800674a:	f100 8102 	bmi.w	8006952 <_printf_float+0x44e>
 800674e:	68e0      	ldr	r0, [r4, #12]
 8006750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006752:	4298      	cmp	r0, r3
 8006754:	bfb8      	it	lt
 8006756:	4618      	movlt	r0, r3
 8006758:	e731      	b.n	80065be <_printf_float+0xba>
 800675a:	2301      	movs	r3, #1
 800675c:	464a      	mov	r2, r9
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f af28 	beq.w	80065ba <_printf_float+0xb6>
 800676a:	f108 0801 	add.w	r8, r8, #1
 800676e:	e7e6      	b.n	800673e <_printf_float+0x23a>
 8006770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	dc38      	bgt.n	80067e8 <_printf_float+0x2e4>
 8006776:	2301      	movs	r3, #1
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <_printf_float+0x2e0>)
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f af1a 	beq.w	80065ba <_printf_float+0xb6>
 8006786:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800678a:	4313      	orrs	r3, r2
 800678c:	d102      	bne.n	8006794 <_printf_float+0x290>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	07d9      	lsls	r1, r3, #31
 8006792:	d5d8      	bpl.n	8006746 <_printf_float+0x242>
 8006794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f af0b 	beq.w	80065ba <_printf_float+0xb6>
 80067a4:	f04f 0900 	mov.w	r9, #0
 80067a8:	f104 0a1a 	add.w	sl, r4, #26
 80067ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ae:	425b      	negs	r3, r3
 80067b0:	454b      	cmp	r3, r9
 80067b2:	dc01      	bgt.n	80067b8 <_printf_float+0x2b4>
 80067b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067b6:	e794      	b.n	80066e2 <_printf_float+0x1de>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4652      	mov	r2, sl
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f aef9 	beq.w	80065ba <_printf_float+0xb6>
 80067c8:	f109 0901 	add.w	r9, r9, #1
 80067cc:	e7ee      	b.n	80067ac <_printf_float+0x2a8>
 80067ce:	bf00      	nop
 80067d0:	7fefffff 	.word	0x7fefffff
 80067d4:	0800a5a8 	.word	0x0800a5a8
 80067d8:	0800a5ac 	.word	0x0800a5ac
 80067dc:	0800a5b4 	.word	0x0800a5b4
 80067e0:	0800a5b0 	.word	0x0800a5b0
 80067e4:	0800a941 	.word	0x0800a941
 80067e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ec:	429a      	cmp	r2, r3
 80067ee:	bfa8      	it	ge
 80067f0:	461a      	movge	r2, r3
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	4691      	mov	r9, r2
 80067f6:	dc37      	bgt.n	8006868 <_printf_float+0x364>
 80067f8:	f04f 0b00 	mov.w	fp, #0
 80067fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006800:	f104 021a 	add.w	r2, r4, #26
 8006804:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006808:	ebaa 0309 	sub.w	r3, sl, r9
 800680c:	455b      	cmp	r3, fp
 800680e:	dc33      	bgt.n	8006878 <_printf_float+0x374>
 8006810:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006814:	429a      	cmp	r2, r3
 8006816:	db3b      	blt.n	8006890 <_printf_float+0x38c>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	07da      	lsls	r2, r3, #31
 800681c:	d438      	bmi.n	8006890 <_printf_float+0x38c>
 800681e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006820:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006822:	eba2 030a 	sub.w	r3, r2, sl
 8006826:	eba2 0901 	sub.w	r9, r2, r1
 800682a:	4599      	cmp	r9, r3
 800682c:	bfa8      	it	ge
 800682e:	4699      	movge	r9, r3
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	dc34      	bgt.n	80068a0 <_printf_float+0x39c>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800683e:	f104 0a1a 	add.w	sl, r4, #26
 8006842:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	eba3 0309 	sub.w	r3, r3, r9
 800684c:	4543      	cmp	r3, r8
 800684e:	f77f af7a 	ble.w	8006746 <_printf_float+0x242>
 8006852:	2301      	movs	r3, #1
 8006854:	4652      	mov	r2, sl
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	47b8      	blx	r7
 800685c:	3001      	adds	r0, #1
 800685e:	f43f aeac 	beq.w	80065ba <_printf_float+0xb6>
 8006862:	f108 0801 	add.w	r8, r8, #1
 8006866:	e7ec      	b.n	8006842 <_printf_float+0x33e>
 8006868:	4613      	mov	r3, r2
 800686a:	4631      	mov	r1, r6
 800686c:	4642      	mov	r2, r8
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	d1c0      	bne.n	80067f8 <_printf_float+0x2f4>
 8006876:	e6a0      	b.n	80065ba <_printf_float+0xb6>
 8006878:	2301      	movs	r3, #1
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f ae99 	beq.w	80065ba <_printf_float+0xb6>
 8006888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800688a:	f10b 0b01 	add.w	fp, fp, #1
 800688e:	e7b9      	b.n	8006804 <_printf_float+0x300>
 8006890:	4631      	mov	r1, r6
 8006892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	d1bf      	bne.n	800681e <_printf_float+0x31a>
 800689e:	e68c      	b.n	80065ba <_printf_float+0xb6>
 80068a0:	464b      	mov	r3, r9
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	eb08 020a 	add.w	r2, r8, sl
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	d1c2      	bne.n	8006836 <_printf_float+0x332>
 80068b0:	e683      	b.n	80065ba <_printf_float+0xb6>
 80068b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068b4:	2a01      	cmp	r2, #1
 80068b6:	dc01      	bgt.n	80068bc <_printf_float+0x3b8>
 80068b8:	07db      	lsls	r3, r3, #31
 80068ba:	d537      	bpl.n	800692c <_printf_float+0x428>
 80068bc:	2301      	movs	r3, #1
 80068be:	4642      	mov	r2, r8
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	f43f ae77 	beq.w	80065ba <_printf_float+0xb6>
 80068cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	f43f ae6f 	beq.w	80065ba <_printf_float+0xb6>
 80068dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068e0:	2200      	movs	r2, #0
 80068e2:	2300      	movs	r3, #0
 80068e4:	f7fa f86a 	bl	80009bc <__aeabi_dcmpeq>
 80068e8:	b9d8      	cbnz	r0, 8006922 <_printf_float+0x41e>
 80068ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ec:	f108 0201 	add.w	r2, r8, #1
 80068f0:	3b01      	subs	r3, #1
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	d10e      	bne.n	800691a <_printf_float+0x416>
 80068fc:	e65d      	b.n	80065ba <_printf_float+0xb6>
 80068fe:	2301      	movs	r3, #1
 8006900:	464a      	mov	r2, r9
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f ae56 	beq.w	80065ba <_printf_float+0xb6>
 800690e:	f108 0801 	add.w	r8, r8, #1
 8006912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006914:	3b01      	subs	r3, #1
 8006916:	4543      	cmp	r3, r8
 8006918:	dcf1      	bgt.n	80068fe <_printf_float+0x3fa>
 800691a:	4653      	mov	r3, sl
 800691c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006920:	e6e0      	b.n	80066e4 <_printf_float+0x1e0>
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	f104 091a 	add.w	r9, r4, #26
 800692a:	e7f2      	b.n	8006912 <_printf_float+0x40e>
 800692c:	2301      	movs	r3, #1
 800692e:	4642      	mov	r2, r8
 8006930:	e7df      	b.n	80068f2 <_printf_float+0x3ee>
 8006932:	2301      	movs	r3, #1
 8006934:	464a      	mov	r2, r9
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	f43f ae3c 	beq.w	80065ba <_printf_float+0xb6>
 8006942:	f108 0801 	add.w	r8, r8, #1
 8006946:	68e3      	ldr	r3, [r4, #12]
 8006948:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800694a:	1a5b      	subs	r3, r3, r1
 800694c:	4543      	cmp	r3, r8
 800694e:	dcf0      	bgt.n	8006932 <_printf_float+0x42e>
 8006950:	e6fd      	b.n	800674e <_printf_float+0x24a>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	f104 0919 	add.w	r9, r4, #25
 800695a:	e7f4      	b.n	8006946 <_printf_float+0x442>

0800695c <_printf_common>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	4616      	mov	r6, r2
 8006962:	4699      	mov	r9, r3
 8006964:	688a      	ldr	r2, [r1, #8]
 8006966:	690b      	ldr	r3, [r1, #16]
 8006968:	4607      	mov	r7, r0
 800696a:	4293      	cmp	r3, r2
 800696c:	bfb8      	it	lt
 800696e:	4613      	movlt	r3, r2
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006976:	460c      	mov	r4, r1
 8006978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800697c:	b10a      	cbz	r2, 8006982 <_printf_common+0x26>
 800697e:	3301      	adds	r3, #1
 8006980:	6033      	str	r3, [r6, #0]
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	0699      	lsls	r1, r3, #26
 8006986:	bf42      	ittt	mi
 8006988:	6833      	ldrmi	r3, [r6, #0]
 800698a:	3302      	addmi	r3, #2
 800698c:	6033      	strmi	r3, [r6, #0]
 800698e:	6825      	ldr	r5, [r4, #0]
 8006990:	f015 0506 	ands.w	r5, r5, #6
 8006994:	d106      	bne.n	80069a4 <_printf_common+0x48>
 8006996:	f104 0a19 	add.w	sl, r4, #25
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	6832      	ldr	r2, [r6, #0]
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	dc28      	bgt.n	80069f6 <_printf_common+0x9a>
 80069a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069a8:	1e13      	subs	r3, r2, #0
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	bf18      	it	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	0692      	lsls	r2, r2, #26
 80069b2:	d42d      	bmi.n	8006a10 <_printf_common+0xb4>
 80069b4:	4649      	mov	r1, r9
 80069b6:	4638      	mov	r0, r7
 80069b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069bc:	47c0      	blx	r8
 80069be:	3001      	adds	r0, #1
 80069c0:	d020      	beq.n	8006a04 <_printf_common+0xa8>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	68e5      	ldr	r5, [r4, #12]
 80069c6:	f003 0306 	and.w	r3, r3, #6
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	bf18      	it	ne
 80069ce:	2500      	movne	r5, #0
 80069d0:	6832      	ldr	r2, [r6, #0]
 80069d2:	f04f 0600 	mov.w	r6, #0
 80069d6:	68a3      	ldr	r3, [r4, #8]
 80069d8:	bf08      	it	eq
 80069da:	1aad      	subeq	r5, r5, r2
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	bf08      	it	eq
 80069e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e4:	4293      	cmp	r3, r2
 80069e6:	bfc4      	itt	gt
 80069e8:	1a9b      	subgt	r3, r3, r2
 80069ea:	18ed      	addgt	r5, r5, r3
 80069ec:	341a      	adds	r4, #26
 80069ee:	42b5      	cmp	r5, r6
 80069f0:	d11a      	bne.n	8006a28 <_printf_common+0xcc>
 80069f2:	2000      	movs	r0, #0
 80069f4:	e008      	b.n	8006a08 <_printf_common+0xac>
 80069f6:	2301      	movs	r3, #1
 80069f8:	4652      	mov	r2, sl
 80069fa:	4649      	mov	r1, r9
 80069fc:	4638      	mov	r0, r7
 80069fe:	47c0      	blx	r8
 8006a00:	3001      	adds	r0, #1
 8006a02:	d103      	bne.n	8006a0c <_printf_common+0xb0>
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	e7c4      	b.n	800699a <_printf_common+0x3e>
 8006a10:	2030      	movs	r0, #48	; 0x30
 8006a12:	18e1      	adds	r1, r4, r3
 8006a14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a1e:	4422      	add	r2, r4
 8006a20:	3302      	adds	r3, #2
 8006a22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a26:	e7c5      	b.n	80069b4 <_printf_common+0x58>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4638      	mov	r0, r7
 8006a30:	47c0      	blx	r8
 8006a32:	3001      	adds	r0, #1
 8006a34:	d0e6      	beq.n	8006a04 <_printf_common+0xa8>
 8006a36:	3601      	adds	r6, #1
 8006a38:	e7d9      	b.n	80069ee <_printf_common+0x92>
	...

08006a3c <_printf_i>:
 8006a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a40:	460c      	mov	r4, r1
 8006a42:	7e27      	ldrb	r7, [r4, #24]
 8006a44:	4691      	mov	r9, r2
 8006a46:	2f78      	cmp	r7, #120	; 0x78
 8006a48:	4680      	mov	r8, r0
 8006a4a:	469a      	mov	sl, r3
 8006a4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a52:	d807      	bhi.n	8006a64 <_printf_i+0x28>
 8006a54:	2f62      	cmp	r7, #98	; 0x62
 8006a56:	d80a      	bhi.n	8006a6e <_printf_i+0x32>
 8006a58:	2f00      	cmp	r7, #0
 8006a5a:	f000 80d9 	beq.w	8006c10 <_printf_i+0x1d4>
 8006a5e:	2f58      	cmp	r7, #88	; 0x58
 8006a60:	f000 80a4 	beq.w	8006bac <_printf_i+0x170>
 8006a64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a6c:	e03a      	b.n	8006ae4 <_printf_i+0xa8>
 8006a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a72:	2b15      	cmp	r3, #21
 8006a74:	d8f6      	bhi.n	8006a64 <_printf_i+0x28>
 8006a76:	a001      	add	r0, pc, #4	; (adr r0, 8006a7c <_printf_i+0x40>)
 8006a78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a7c:	08006ad5 	.word	0x08006ad5
 8006a80:	08006ae9 	.word	0x08006ae9
 8006a84:	08006a65 	.word	0x08006a65
 8006a88:	08006a65 	.word	0x08006a65
 8006a8c:	08006a65 	.word	0x08006a65
 8006a90:	08006a65 	.word	0x08006a65
 8006a94:	08006ae9 	.word	0x08006ae9
 8006a98:	08006a65 	.word	0x08006a65
 8006a9c:	08006a65 	.word	0x08006a65
 8006aa0:	08006a65 	.word	0x08006a65
 8006aa4:	08006a65 	.word	0x08006a65
 8006aa8:	08006bf7 	.word	0x08006bf7
 8006aac:	08006b19 	.word	0x08006b19
 8006ab0:	08006bd9 	.word	0x08006bd9
 8006ab4:	08006a65 	.word	0x08006a65
 8006ab8:	08006a65 	.word	0x08006a65
 8006abc:	08006c19 	.word	0x08006c19
 8006ac0:	08006a65 	.word	0x08006a65
 8006ac4:	08006b19 	.word	0x08006b19
 8006ac8:	08006a65 	.word	0x08006a65
 8006acc:	08006a65 	.word	0x08006a65
 8006ad0:	08006be1 	.word	0x08006be1
 8006ad4:	680b      	ldr	r3, [r1, #0]
 8006ad6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	600a      	str	r2, [r1, #0]
 8006ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0a4      	b.n	8006c32 <_printf_i+0x1f6>
 8006ae8:	6825      	ldr	r5, [r4, #0]
 8006aea:	6808      	ldr	r0, [r1, #0]
 8006aec:	062e      	lsls	r6, r5, #24
 8006aee:	f100 0304 	add.w	r3, r0, #4
 8006af2:	d50a      	bpl.n	8006b0a <_printf_i+0xce>
 8006af4:	6805      	ldr	r5, [r0, #0]
 8006af6:	600b      	str	r3, [r1, #0]
 8006af8:	2d00      	cmp	r5, #0
 8006afa:	da03      	bge.n	8006b04 <_printf_i+0xc8>
 8006afc:	232d      	movs	r3, #45	; 0x2d
 8006afe:	426d      	negs	r5, r5
 8006b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b04:	230a      	movs	r3, #10
 8006b06:	485e      	ldr	r0, [pc, #376]	; (8006c80 <_printf_i+0x244>)
 8006b08:	e019      	b.n	8006b3e <_printf_i+0x102>
 8006b0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b0e:	6805      	ldr	r5, [r0, #0]
 8006b10:	600b      	str	r3, [r1, #0]
 8006b12:	bf18      	it	ne
 8006b14:	b22d      	sxthne	r5, r5
 8006b16:	e7ef      	b.n	8006af8 <_printf_i+0xbc>
 8006b18:	680b      	ldr	r3, [r1, #0]
 8006b1a:	6825      	ldr	r5, [r4, #0]
 8006b1c:	1d18      	adds	r0, r3, #4
 8006b1e:	6008      	str	r0, [r1, #0]
 8006b20:	0628      	lsls	r0, r5, #24
 8006b22:	d501      	bpl.n	8006b28 <_printf_i+0xec>
 8006b24:	681d      	ldr	r5, [r3, #0]
 8006b26:	e002      	b.n	8006b2e <_printf_i+0xf2>
 8006b28:	0669      	lsls	r1, r5, #25
 8006b2a:	d5fb      	bpl.n	8006b24 <_printf_i+0xe8>
 8006b2c:	881d      	ldrh	r5, [r3, #0]
 8006b2e:	2f6f      	cmp	r7, #111	; 0x6f
 8006b30:	bf0c      	ite	eq
 8006b32:	2308      	moveq	r3, #8
 8006b34:	230a      	movne	r3, #10
 8006b36:	4852      	ldr	r0, [pc, #328]	; (8006c80 <_printf_i+0x244>)
 8006b38:	2100      	movs	r1, #0
 8006b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b3e:	6866      	ldr	r6, [r4, #4]
 8006b40:	2e00      	cmp	r6, #0
 8006b42:	bfa8      	it	ge
 8006b44:	6821      	ldrge	r1, [r4, #0]
 8006b46:	60a6      	str	r6, [r4, #8]
 8006b48:	bfa4      	itt	ge
 8006b4a:	f021 0104 	bicge.w	r1, r1, #4
 8006b4e:	6021      	strge	r1, [r4, #0]
 8006b50:	b90d      	cbnz	r5, 8006b56 <_printf_i+0x11a>
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d04d      	beq.n	8006bf2 <_printf_i+0x1b6>
 8006b56:	4616      	mov	r6, r2
 8006b58:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b5c:	fb03 5711 	mls	r7, r3, r1, r5
 8006b60:	5dc7      	ldrb	r7, [r0, r7]
 8006b62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b66:	462f      	mov	r7, r5
 8006b68:	42bb      	cmp	r3, r7
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	d9f4      	bls.n	8006b58 <_printf_i+0x11c>
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d10b      	bne.n	8006b8a <_printf_i+0x14e>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	07df      	lsls	r7, r3, #31
 8006b76:	d508      	bpl.n	8006b8a <_printf_i+0x14e>
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	6861      	ldr	r1, [r4, #4]
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	bfde      	ittt	le
 8006b80:	2330      	movle	r3, #48	; 0x30
 8006b82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b8a:	1b92      	subs	r2, r2, r6
 8006b8c:	6122      	str	r2, [r4, #16]
 8006b8e:	464b      	mov	r3, r9
 8006b90:	4621      	mov	r1, r4
 8006b92:	4640      	mov	r0, r8
 8006b94:	f8cd a000 	str.w	sl, [sp]
 8006b98:	aa03      	add	r2, sp, #12
 8006b9a:	f7ff fedf 	bl	800695c <_printf_common>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d14c      	bne.n	8006c3c <_printf_i+0x200>
 8006ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba6:	b004      	add	sp, #16
 8006ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bac:	4834      	ldr	r0, [pc, #208]	; (8006c80 <_printf_i+0x244>)
 8006bae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bb2:	680e      	ldr	r6, [r1, #0]
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006bba:	061f      	lsls	r7, r3, #24
 8006bbc:	600e      	str	r6, [r1, #0]
 8006bbe:	d514      	bpl.n	8006bea <_printf_i+0x1ae>
 8006bc0:	07d9      	lsls	r1, r3, #31
 8006bc2:	bf44      	itt	mi
 8006bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8006bc8:	6023      	strmi	r3, [r4, #0]
 8006bca:	b91d      	cbnz	r5, 8006bd4 <_printf_i+0x198>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	f023 0320 	bic.w	r3, r3, #32
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	e7af      	b.n	8006b38 <_printf_i+0xfc>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	f043 0320 	orr.w	r3, r3, #32
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	2378      	movs	r3, #120	; 0x78
 8006be2:	4828      	ldr	r0, [pc, #160]	; (8006c84 <_printf_i+0x248>)
 8006be4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006be8:	e7e3      	b.n	8006bb2 <_printf_i+0x176>
 8006bea:	065e      	lsls	r6, r3, #25
 8006bec:	bf48      	it	mi
 8006bee:	b2ad      	uxthmi	r5, r5
 8006bf0:	e7e6      	b.n	8006bc0 <_printf_i+0x184>
 8006bf2:	4616      	mov	r6, r2
 8006bf4:	e7bb      	b.n	8006b6e <_printf_i+0x132>
 8006bf6:	680b      	ldr	r3, [r1, #0]
 8006bf8:	6826      	ldr	r6, [r4, #0]
 8006bfa:	1d1d      	adds	r5, r3, #4
 8006bfc:	6960      	ldr	r0, [r4, #20]
 8006bfe:	600d      	str	r5, [r1, #0]
 8006c00:	0635      	lsls	r5, r6, #24
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	d501      	bpl.n	8006c0a <_printf_i+0x1ce>
 8006c06:	6018      	str	r0, [r3, #0]
 8006c08:	e002      	b.n	8006c10 <_printf_i+0x1d4>
 8006c0a:	0671      	lsls	r1, r6, #25
 8006c0c:	d5fb      	bpl.n	8006c06 <_printf_i+0x1ca>
 8006c0e:	8018      	strh	r0, [r3, #0]
 8006c10:	2300      	movs	r3, #0
 8006c12:	4616      	mov	r6, r2
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	e7ba      	b.n	8006b8e <_printf_i+0x152>
 8006c18:	680b      	ldr	r3, [r1, #0]
 8006c1a:	1d1a      	adds	r2, r3, #4
 8006c1c:	600a      	str	r2, [r1, #0]
 8006c1e:	681e      	ldr	r6, [r3, #0]
 8006c20:	2100      	movs	r1, #0
 8006c22:	4630      	mov	r0, r6
 8006c24:	6862      	ldr	r2, [r4, #4]
 8006c26:	f001 fb9f 	bl	8008368 <memchr>
 8006c2a:	b108      	cbz	r0, 8006c30 <_printf_i+0x1f4>
 8006c2c:	1b80      	subs	r0, r0, r6
 8006c2e:	6060      	str	r0, [r4, #4]
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	6123      	str	r3, [r4, #16]
 8006c34:	2300      	movs	r3, #0
 8006c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c3a:	e7a8      	b.n	8006b8e <_printf_i+0x152>
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4640      	mov	r0, r8
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	47d0      	blx	sl
 8006c46:	3001      	adds	r0, #1
 8006c48:	d0ab      	beq.n	8006ba2 <_printf_i+0x166>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	079b      	lsls	r3, r3, #30
 8006c4e:	d413      	bmi.n	8006c78 <_printf_i+0x23c>
 8006c50:	68e0      	ldr	r0, [r4, #12]
 8006c52:	9b03      	ldr	r3, [sp, #12]
 8006c54:	4298      	cmp	r0, r3
 8006c56:	bfb8      	it	lt
 8006c58:	4618      	movlt	r0, r3
 8006c5a:	e7a4      	b.n	8006ba6 <_printf_i+0x16a>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4632      	mov	r2, r6
 8006c60:	4649      	mov	r1, r9
 8006c62:	4640      	mov	r0, r8
 8006c64:	47d0      	blx	sl
 8006c66:	3001      	adds	r0, #1
 8006c68:	d09b      	beq.n	8006ba2 <_printf_i+0x166>
 8006c6a:	3501      	adds	r5, #1
 8006c6c:	68e3      	ldr	r3, [r4, #12]
 8006c6e:	9903      	ldr	r1, [sp, #12]
 8006c70:	1a5b      	subs	r3, r3, r1
 8006c72:	42ab      	cmp	r3, r5
 8006c74:	dcf2      	bgt.n	8006c5c <_printf_i+0x220>
 8006c76:	e7eb      	b.n	8006c50 <_printf_i+0x214>
 8006c78:	2500      	movs	r5, #0
 8006c7a:	f104 0619 	add.w	r6, r4, #25
 8006c7e:	e7f5      	b.n	8006c6c <_printf_i+0x230>
 8006c80:	0800a5b8 	.word	0x0800a5b8
 8006c84:	0800a5c9 	.word	0x0800a5c9

08006c88 <iprintf>:
 8006c88:	b40f      	push	{r0, r1, r2, r3}
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <iprintf+0x2c>)
 8006c8c:	b513      	push	{r0, r1, r4, lr}
 8006c8e:	681c      	ldr	r4, [r3, #0]
 8006c90:	b124      	cbz	r4, 8006c9c <iprintf+0x14>
 8006c92:	69a3      	ldr	r3, [r4, #24]
 8006c94:	b913      	cbnz	r3, 8006c9c <iprintf+0x14>
 8006c96:	4620      	mov	r0, r4
 8006c98:	f001 fa42 	bl	8008120 <__sinit>
 8006c9c:	ab05      	add	r3, sp, #20
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	9a04      	ldr	r2, [sp, #16]
 8006ca2:	68a1      	ldr	r1, [r4, #8]
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	f002 fb09 	bl	80092bc <_vfiprintf_r>
 8006caa:	b002      	add	sp, #8
 8006cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb0:	b004      	add	sp, #16
 8006cb2:	4770      	bx	lr
 8006cb4:	2000005c 	.word	0x2000005c

08006cb8 <_puts_r>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	460e      	mov	r6, r1
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	b118      	cbz	r0, 8006cc8 <_puts_r+0x10>
 8006cc0:	6983      	ldr	r3, [r0, #24]
 8006cc2:	b90b      	cbnz	r3, 8006cc8 <_puts_r+0x10>
 8006cc4:	f001 fa2c 	bl	8008120 <__sinit>
 8006cc8:	69ab      	ldr	r3, [r5, #24]
 8006cca:	68ac      	ldr	r4, [r5, #8]
 8006ccc:	b913      	cbnz	r3, 8006cd4 <_puts_r+0x1c>
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f001 fa26 	bl	8008120 <__sinit>
 8006cd4:	4b2c      	ldr	r3, [pc, #176]	; (8006d88 <_puts_r+0xd0>)
 8006cd6:	429c      	cmp	r4, r3
 8006cd8:	d120      	bne.n	8006d1c <_puts_r+0x64>
 8006cda:	686c      	ldr	r4, [r5, #4]
 8006cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cde:	07db      	lsls	r3, r3, #31
 8006ce0:	d405      	bmi.n	8006cee <_puts_r+0x36>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	0598      	lsls	r0, r3, #22
 8006ce6:	d402      	bmi.n	8006cee <_puts_r+0x36>
 8006ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cea:	f001 fabc 	bl	8008266 <__retarget_lock_acquire_recursive>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	0719      	lsls	r1, r3, #28
 8006cf2:	d51d      	bpl.n	8006d30 <_puts_r+0x78>
 8006cf4:	6923      	ldr	r3, [r4, #16]
 8006cf6:	b1db      	cbz	r3, 8006d30 <_puts_r+0x78>
 8006cf8:	3e01      	subs	r6, #1
 8006cfa:	68a3      	ldr	r3, [r4, #8]
 8006cfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d00:	3b01      	subs	r3, #1
 8006d02:	60a3      	str	r3, [r4, #8]
 8006d04:	bb39      	cbnz	r1, 8006d56 <_puts_r+0x9e>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da38      	bge.n	8006d7c <_puts_r+0xc4>
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	210a      	movs	r1, #10
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 f98e 	bl	8007030 <__swbuf_r>
 8006d14:	3001      	adds	r0, #1
 8006d16:	d011      	beq.n	8006d3c <_puts_r+0x84>
 8006d18:	250a      	movs	r5, #10
 8006d1a:	e011      	b.n	8006d40 <_puts_r+0x88>
 8006d1c:	4b1b      	ldr	r3, [pc, #108]	; (8006d8c <_puts_r+0xd4>)
 8006d1e:	429c      	cmp	r4, r3
 8006d20:	d101      	bne.n	8006d26 <_puts_r+0x6e>
 8006d22:	68ac      	ldr	r4, [r5, #8]
 8006d24:	e7da      	b.n	8006cdc <_puts_r+0x24>
 8006d26:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <_puts_r+0xd8>)
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	bf08      	it	eq
 8006d2c:	68ec      	ldreq	r4, [r5, #12]
 8006d2e:	e7d5      	b.n	8006cdc <_puts_r+0x24>
 8006d30:	4621      	mov	r1, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 f9e0 	bl	80070f8 <__swsetup_r>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d0dd      	beq.n	8006cf8 <_puts_r+0x40>
 8006d3c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d42:	07da      	lsls	r2, r3, #31
 8006d44:	d405      	bmi.n	8006d52 <_puts_r+0x9a>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	059b      	lsls	r3, r3, #22
 8006d4a:	d402      	bmi.n	8006d52 <_puts_r+0x9a>
 8006d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d4e:	f001 fa8b 	bl	8008268 <__retarget_lock_release_recursive>
 8006d52:	4628      	mov	r0, r5
 8006d54:	bd70      	pop	{r4, r5, r6, pc}
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da04      	bge.n	8006d64 <_puts_r+0xac>
 8006d5a:	69a2      	ldr	r2, [r4, #24]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	dc06      	bgt.n	8006d6e <_puts_r+0xb6>
 8006d60:	290a      	cmp	r1, #10
 8006d62:	d004      	beq.n	8006d6e <_puts_r+0xb6>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	6022      	str	r2, [r4, #0]
 8006d6a:	7019      	strb	r1, [r3, #0]
 8006d6c:	e7c5      	b.n	8006cfa <_puts_r+0x42>
 8006d6e:	4622      	mov	r2, r4
 8006d70:	4628      	mov	r0, r5
 8006d72:	f000 f95d 	bl	8007030 <__swbuf_r>
 8006d76:	3001      	adds	r0, #1
 8006d78:	d1bf      	bne.n	8006cfa <_puts_r+0x42>
 8006d7a:	e7df      	b.n	8006d3c <_puts_r+0x84>
 8006d7c:	250a      	movs	r5, #10
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	6022      	str	r2, [r4, #0]
 8006d84:	701d      	strb	r5, [r3, #0]
 8006d86:	e7db      	b.n	8006d40 <_puts_r+0x88>
 8006d88:	0800a790 	.word	0x0800a790
 8006d8c:	0800a7b0 	.word	0x0800a7b0
 8006d90:	0800a770 	.word	0x0800a770

08006d94 <puts>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <puts+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f7ff bf8d 	b.w	8006cb8 <_puts_r>
 8006d9e:	bf00      	nop
 8006da0:	2000005c 	.word	0x2000005c

08006da4 <siprintf>:
 8006da4:	b40e      	push	{r1, r2, r3}
 8006da6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006daa:	b500      	push	{lr}
 8006dac:	b09c      	sub	sp, #112	; 0x70
 8006dae:	ab1d      	add	r3, sp, #116	; 0x74
 8006db0:	9002      	str	r0, [sp, #8]
 8006db2:	9006      	str	r0, [sp, #24]
 8006db4:	9107      	str	r1, [sp, #28]
 8006db6:	9104      	str	r1, [sp, #16]
 8006db8:	4808      	ldr	r0, [pc, #32]	; (8006ddc <siprintf+0x38>)
 8006dba:	4909      	ldr	r1, [pc, #36]	; (8006de0 <siprintf+0x3c>)
 8006dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc0:	9105      	str	r1, [sp, #20]
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	a902      	add	r1, sp, #8
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	f001 ff7c 	bl	8008cc4 <_svfiprintf_r>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	9b02      	ldr	r3, [sp, #8]
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	b01c      	add	sp, #112	; 0x70
 8006dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd8:	b003      	add	sp, #12
 8006dda:	4770      	bx	lr
 8006ddc:	2000005c 	.word	0x2000005c
 8006de0:	ffff0208 	.word	0xffff0208

08006de4 <siscanf>:
 8006de4:	b40e      	push	{r1, r2, r3}
 8006de6:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006dea:	b530      	push	{r4, r5, lr}
 8006dec:	b09c      	sub	sp, #112	; 0x70
 8006dee:	ac1f      	add	r4, sp, #124	; 0x7c
 8006df0:	f854 5b04 	ldr.w	r5, [r4], #4
 8006df4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006df8:	9002      	str	r0, [sp, #8]
 8006dfa:	9006      	str	r0, [sp, #24]
 8006dfc:	f7f9 f9b2 	bl	8000164 <strlen>
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <siscanf+0x4c>)
 8006e02:	9003      	str	r0, [sp, #12]
 8006e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e06:	2300      	movs	r3, #0
 8006e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e0a:	9314      	str	r3, [sp, #80]	; 0x50
 8006e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e10:	9007      	str	r0, [sp, #28]
 8006e12:	4808      	ldr	r0, [pc, #32]	; (8006e34 <siscanf+0x50>)
 8006e14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e18:	462a      	mov	r2, r5
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	a902      	add	r1, sp, #8
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9401      	str	r4, [sp, #4]
 8006e22:	f002 f8a9 	bl	8008f78 <__ssvfiscanf_r>
 8006e26:	b01c      	add	sp, #112	; 0x70
 8006e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e2c:	b003      	add	sp, #12
 8006e2e:	4770      	bx	lr
 8006e30:	08006e5b 	.word	0x08006e5b
 8006e34:	2000005c 	.word	0x2000005c

08006e38 <__sread>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e40:	f002 fcb6 	bl	80097b0 <_read_r>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	bfab      	itete	ge
 8006e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e4c:	181b      	addge	r3, r3, r0
 8006e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e52:	bfac      	ite	ge
 8006e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e56:	81a3      	strhlt	r3, [r4, #12]
 8006e58:	bd10      	pop	{r4, pc}

08006e5a <__seofread>:
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	4770      	bx	lr

08006e5e <__swrite>:
 8006e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e62:	461f      	mov	r7, r3
 8006e64:	898b      	ldrh	r3, [r1, #12]
 8006e66:	4605      	mov	r5, r0
 8006e68:	05db      	lsls	r3, r3, #23
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	d505      	bpl.n	8006e7c <__swrite+0x1e>
 8006e70:	2302      	movs	r3, #2
 8006e72:	2200      	movs	r2, #0
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f001 f9f8 	bl	800826c <_lseek_r>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	4632      	mov	r2, r6
 8006e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	4628      	mov	r0, r5
 8006e88:	463b      	mov	r3, r7
 8006e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	f000 b91f 	b.w	80070d4 <_write_r>

08006e96 <__sseek>:
 8006e96:	b510      	push	{r4, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9e:	f001 f9e5 	bl	800826c <_lseek_r>
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	bf15      	itete	ne
 8006ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006eb2:	81a3      	strheq	r3, [r4, #12]
 8006eb4:	bf18      	it	ne
 8006eb6:	81a3      	strhne	r3, [r4, #12]
 8006eb8:	bd10      	pop	{r4, pc}

08006eba <__sclose>:
 8006eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebe:	f000 b989 	b.w	80071d4 <_close_r>

08006ec2 <strchr>:
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	b2c9      	uxtb	r1, r1
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ecc:	b112      	cbz	r2, 8006ed4 <strchr+0x12>
 8006ece:	428a      	cmp	r2, r1
 8006ed0:	d1f9      	bne.n	8006ec6 <strchr+0x4>
 8006ed2:	4770      	bx	lr
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	bf18      	it	ne
 8006ed8:	2000      	movne	r0, #0
 8006eda:	4770      	bx	lr

08006edc <strstr>:
 8006edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ede:	780c      	ldrb	r4, [r1, #0]
 8006ee0:	b164      	cbz	r4, 8006efc <strstr+0x20>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	1c5e      	adds	r6, r3, #1
 8006eea:	b90a      	cbnz	r2, 8006ef0 <strstr+0x14>
 8006eec:	4610      	mov	r0, r2
 8006eee:	e005      	b.n	8006efc <strstr+0x20>
 8006ef0:	4294      	cmp	r4, r2
 8006ef2:	d108      	bne.n	8006f06 <strstr+0x2a>
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006efa:	b902      	cbnz	r2, 8006efe <strstr+0x22>
 8006efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006efe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006f02:	4297      	cmp	r7, r2
 8006f04:	d0f7      	beq.n	8006ef6 <strstr+0x1a>
 8006f06:	4633      	mov	r3, r6
 8006f08:	e7ec      	b.n	8006ee4 <strstr+0x8>
	...

08006f0c <_strtol_l.isra.0>:
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f12:	4686      	mov	lr, r0
 8006f14:	d001      	beq.n	8006f1a <_strtol_l.isra.0+0xe>
 8006f16:	2b24      	cmp	r3, #36	; 0x24
 8006f18:	d906      	bls.n	8006f28 <_strtol_l.isra.0+0x1c>
 8006f1a:	f7ff fa15 	bl	8006348 <__errno>
 8006f1e:	2316      	movs	r3, #22
 8006f20:	6003      	str	r3, [r0, #0]
 8006f22:	2000      	movs	r0, #0
 8006f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f28:	468c      	mov	ip, r1
 8006f2a:	4e3a      	ldr	r6, [pc, #232]	; (8007014 <_strtol_l.isra.0+0x108>)
 8006f2c:	4660      	mov	r0, ip
 8006f2e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006f32:	5da5      	ldrb	r5, [r4, r6]
 8006f34:	f015 0508 	ands.w	r5, r5, #8
 8006f38:	d1f8      	bne.n	8006f2c <_strtol_l.isra.0+0x20>
 8006f3a:	2c2d      	cmp	r4, #45	; 0x2d
 8006f3c:	d133      	bne.n	8006fa6 <_strtol_l.isra.0+0x9a>
 8006f3e:	f04f 0801 	mov.w	r8, #1
 8006f42:	f89c 4000 	ldrb.w	r4, [ip]
 8006f46:	f100 0c02 	add.w	ip, r0, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d05d      	beq.n	800700a <_strtol_l.isra.0+0xfe>
 8006f4e:	2b10      	cmp	r3, #16
 8006f50:	d10c      	bne.n	8006f6c <_strtol_l.isra.0+0x60>
 8006f52:	2c30      	cmp	r4, #48	; 0x30
 8006f54:	d10a      	bne.n	8006f6c <_strtol_l.isra.0+0x60>
 8006f56:	f89c 0000 	ldrb.w	r0, [ip]
 8006f5a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006f5e:	2858      	cmp	r0, #88	; 0x58
 8006f60:	d14e      	bne.n	8007000 <_strtol_l.isra.0+0xf4>
 8006f62:	2310      	movs	r3, #16
 8006f64:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006f68:	f10c 0c02 	add.w	ip, ip, #2
 8006f6c:	2500      	movs	r5, #0
 8006f6e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006f72:	3f01      	subs	r7, #1
 8006f74:	fbb7 f9f3 	udiv	r9, r7, r3
 8006f78:	4628      	mov	r0, r5
 8006f7a:	fb03 7a19 	mls	sl, r3, r9, r7
 8006f7e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006f82:	2e09      	cmp	r6, #9
 8006f84:	d818      	bhi.n	8006fb8 <_strtol_l.isra.0+0xac>
 8006f86:	4634      	mov	r4, r6
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	dd24      	ble.n	8006fd6 <_strtol_l.isra.0+0xca>
 8006f8c:	2d00      	cmp	r5, #0
 8006f8e:	db1f      	blt.n	8006fd0 <_strtol_l.isra.0+0xc4>
 8006f90:	4581      	cmp	r9, r0
 8006f92:	d31d      	bcc.n	8006fd0 <_strtol_l.isra.0+0xc4>
 8006f94:	d101      	bne.n	8006f9a <_strtol_l.isra.0+0x8e>
 8006f96:	45a2      	cmp	sl, r4
 8006f98:	db1a      	blt.n	8006fd0 <_strtol_l.isra.0+0xc4>
 8006f9a:	2501      	movs	r5, #1
 8006f9c:	fb00 4003 	mla	r0, r0, r3, r4
 8006fa0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006fa4:	e7eb      	b.n	8006f7e <_strtol_l.isra.0+0x72>
 8006fa6:	2c2b      	cmp	r4, #43	; 0x2b
 8006fa8:	bf08      	it	eq
 8006faa:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006fae:	46a8      	mov	r8, r5
 8006fb0:	bf08      	it	eq
 8006fb2:	f100 0c02 	addeq.w	ip, r0, #2
 8006fb6:	e7c8      	b.n	8006f4a <_strtol_l.isra.0+0x3e>
 8006fb8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006fbc:	2e19      	cmp	r6, #25
 8006fbe:	d801      	bhi.n	8006fc4 <_strtol_l.isra.0+0xb8>
 8006fc0:	3c37      	subs	r4, #55	; 0x37
 8006fc2:	e7e1      	b.n	8006f88 <_strtol_l.isra.0+0x7c>
 8006fc4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006fc8:	2e19      	cmp	r6, #25
 8006fca:	d804      	bhi.n	8006fd6 <_strtol_l.isra.0+0xca>
 8006fcc:	3c57      	subs	r4, #87	; 0x57
 8006fce:	e7db      	b.n	8006f88 <_strtol_l.isra.0+0x7c>
 8006fd0:	f04f 35ff 	mov.w	r5, #4294967295
 8006fd4:	e7e4      	b.n	8006fa0 <_strtol_l.isra.0+0x94>
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	da08      	bge.n	8006fec <_strtol_l.isra.0+0xe0>
 8006fda:	2322      	movs	r3, #34	; 0x22
 8006fdc:	4638      	mov	r0, r7
 8006fde:	f8ce 3000 	str.w	r3, [lr]
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	d09e      	beq.n	8006f24 <_strtol_l.isra.0+0x18>
 8006fe6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006fea:	e007      	b.n	8006ffc <_strtol_l.isra.0+0xf0>
 8006fec:	f1b8 0f00 	cmp.w	r8, #0
 8006ff0:	d000      	beq.n	8006ff4 <_strtol_l.isra.0+0xe8>
 8006ff2:	4240      	negs	r0, r0
 8006ff4:	2a00      	cmp	r2, #0
 8006ff6:	d095      	beq.n	8006f24 <_strtol_l.isra.0+0x18>
 8006ff8:	2d00      	cmp	r5, #0
 8006ffa:	d1f4      	bne.n	8006fe6 <_strtol_l.isra.0+0xda>
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	e791      	b.n	8006f24 <_strtol_l.isra.0+0x18>
 8007000:	2430      	movs	r4, #48	; 0x30
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1b2      	bne.n	8006f6c <_strtol_l.isra.0+0x60>
 8007006:	2308      	movs	r3, #8
 8007008:	e7b0      	b.n	8006f6c <_strtol_l.isra.0+0x60>
 800700a:	2c30      	cmp	r4, #48	; 0x30
 800700c:	d0a3      	beq.n	8006f56 <_strtol_l.isra.0+0x4a>
 800700e:	230a      	movs	r3, #10
 8007010:	e7ac      	b.n	8006f6c <_strtol_l.isra.0+0x60>
 8007012:	bf00      	nop
 8007014:	0800a5db 	.word	0x0800a5db

08007018 <_strtol_r>:
 8007018:	f7ff bf78 	b.w	8006f0c <_strtol_l.isra.0>

0800701c <strtol>:
 800701c:	4613      	mov	r3, r2
 800701e:	460a      	mov	r2, r1
 8007020:	4601      	mov	r1, r0
 8007022:	4802      	ldr	r0, [pc, #8]	; (800702c <strtol+0x10>)
 8007024:	6800      	ldr	r0, [r0, #0]
 8007026:	f7ff bf71 	b.w	8006f0c <_strtol_l.isra.0>
 800702a:	bf00      	nop
 800702c:	2000005c 	.word	0x2000005c

08007030 <__swbuf_r>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	460e      	mov	r6, r1
 8007034:	4614      	mov	r4, r2
 8007036:	4605      	mov	r5, r0
 8007038:	b118      	cbz	r0, 8007042 <__swbuf_r+0x12>
 800703a:	6983      	ldr	r3, [r0, #24]
 800703c:	b90b      	cbnz	r3, 8007042 <__swbuf_r+0x12>
 800703e:	f001 f86f 	bl	8008120 <__sinit>
 8007042:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <__swbuf_r+0x98>)
 8007044:	429c      	cmp	r4, r3
 8007046:	d12b      	bne.n	80070a0 <__swbuf_r+0x70>
 8007048:	686c      	ldr	r4, [r5, #4]
 800704a:	69a3      	ldr	r3, [r4, #24]
 800704c:	60a3      	str	r3, [r4, #8]
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	071a      	lsls	r2, r3, #28
 8007052:	d52f      	bpl.n	80070b4 <__swbuf_r+0x84>
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	b36b      	cbz	r3, 80070b4 <__swbuf_r+0x84>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	6820      	ldr	r0, [r4, #0]
 800705c:	b2f6      	uxtb	r6, r6
 800705e:	1ac0      	subs	r0, r0, r3
 8007060:	6963      	ldr	r3, [r4, #20]
 8007062:	4637      	mov	r7, r6
 8007064:	4283      	cmp	r3, r0
 8007066:	dc04      	bgt.n	8007072 <__swbuf_r+0x42>
 8007068:	4621      	mov	r1, r4
 800706a:	4628      	mov	r0, r5
 800706c:	f000 ffc4 	bl	8007ff8 <_fflush_r>
 8007070:	bb30      	cbnz	r0, 80070c0 <__swbuf_r+0x90>
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	3001      	adds	r0, #1
 8007076:	3b01      	subs	r3, #1
 8007078:	60a3      	str	r3, [r4, #8]
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	6022      	str	r2, [r4, #0]
 8007080:	701e      	strb	r6, [r3, #0]
 8007082:	6963      	ldr	r3, [r4, #20]
 8007084:	4283      	cmp	r3, r0
 8007086:	d004      	beq.n	8007092 <__swbuf_r+0x62>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	07db      	lsls	r3, r3, #31
 800708c:	d506      	bpl.n	800709c <__swbuf_r+0x6c>
 800708e:	2e0a      	cmp	r6, #10
 8007090:	d104      	bne.n	800709c <__swbuf_r+0x6c>
 8007092:	4621      	mov	r1, r4
 8007094:	4628      	mov	r0, r5
 8007096:	f000 ffaf 	bl	8007ff8 <_fflush_r>
 800709a:	b988      	cbnz	r0, 80070c0 <__swbuf_r+0x90>
 800709c:	4638      	mov	r0, r7
 800709e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <__swbuf_r+0x9c>)
 80070a2:	429c      	cmp	r4, r3
 80070a4:	d101      	bne.n	80070aa <__swbuf_r+0x7a>
 80070a6:	68ac      	ldr	r4, [r5, #8]
 80070a8:	e7cf      	b.n	800704a <__swbuf_r+0x1a>
 80070aa:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <__swbuf_r+0xa0>)
 80070ac:	429c      	cmp	r4, r3
 80070ae:	bf08      	it	eq
 80070b0:	68ec      	ldreq	r4, [r5, #12]
 80070b2:	e7ca      	b.n	800704a <__swbuf_r+0x1a>
 80070b4:	4621      	mov	r1, r4
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f81e 	bl	80070f8 <__swsetup_r>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d0cb      	beq.n	8007058 <__swbuf_r+0x28>
 80070c0:	f04f 37ff 	mov.w	r7, #4294967295
 80070c4:	e7ea      	b.n	800709c <__swbuf_r+0x6c>
 80070c6:	bf00      	nop
 80070c8:	0800a790 	.word	0x0800a790
 80070cc:	0800a7b0 	.word	0x0800a7b0
 80070d0:	0800a770 	.word	0x0800a770

080070d4 <_write_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	2200      	movs	r2, #0
 80070de:	4d05      	ldr	r5, [pc, #20]	; (80070f4 <_write_r+0x20>)
 80070e0:	602a      	str	r2, [r5, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	f7fb f8fa 	bl	80022dc <_write>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_write_r+0x1e>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_write_r+0x1e>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	200006f4 	.word	0x200006f4

080070f8 <__swsetup_r>:
 80070f8:	4b32      	ldr	r3, [pc, #200]	; (80071c4 <__swsetup_r+0xcc>)
 80070fa:	b570      	push	{r4, r5, r6, lr}
 80070fc:	681d      	ldr	r5, [r3, #0]
 80070fe:	4606      	mov	r6, r0
 8007100:	460c      	mov	r4, r1
 8007102:	b125      	cbz	r5, 800710e <__swsetup_r+0x16>
 8007104:	69ab      	ldr	r3, [r5, #24]
 8007106:	b913      	cbnz	r3, 800710e <__swsetup_r+0x16>
 8007108:	4628      	mov	r0, r5
 800710a:	f001 f809 	bl	8008120 <__sinit>
 800710e:	4b2e      	ldr	r3, [pc, #184]	; (80071c8 <__swsetup_r+0xd0>)
 8007110:	429c      	cmp	r4, r3
 8007112:	d10f      	bne.n	8007134 <__swsetup_r+0x3c>
 8007114:	686c      	ldr	r4, [r5, #4]
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800711c:	0719      	lsls	r1, r3, #28
 800711e:	d42c      	bmi.n	800717a <__swsetup_r+0x82>
 8007120:	06dd      	lsls	r5, r3, #27
 8007122:	d411      	bmi.n	8007148 <__swsetup_r+0x50>
 8007124:	2309      	movs	r3, #9
 8007126:	6033      	str	r3, [r6, #0]
 8007128:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800712c:	f04f 30ff 	mov.w	r0, #4294967295
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	e03e      	b.n	80071b2 <__swsetup_r+0xba>
 8007134:	4b25      	ldr	r3, [pc, #148]	; (80071cc <__swsetup_r+0xd4>)
 8007136:	429c      	cmp	r4, r3
 8007138:	d101      	bne.n	800713e <__swsetup_r+0x46>
 800713a:	68ac      	ldr	r4, [r5, #8]
 800713c:	e7eb      	b.n	8007116 <__swsetup_r+0x1e>
 800713e:	4b24      	ldr	r3, [pc, #144]	; (80071d0 <__swsetup_r+0xd8>)
 8007140:	429c      	cmp	r4, r3
 8007142:	bf08      	it	eq
 8007144:	68ec      	ldreq	r4, [r5, #12]
 8007146:	e7e6      	b.n	8007116 <__swsetup_r+0x1e>
 8007148:	0758      	lsls	r0, r3, #29
 800714a:	d512      	bpl.n	8007172 <__swsetup_r+0x7a>
 800714c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800714e:	b141      	cbz	r1, 8007162 <__swsetup_r+0x6a>
 8007150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007154:	4299      	cmp	r1, r3
 8007156:	d002      	beq.n	800715e <__swsetup_r+0x66>
 8007158:	4630      	mov	r0, r6
 800715a:	f001 fcb1 	bl	8008ac0 <_free_r>
 800715e:	2300      	movs	r3, #0
 8007160:	6363      	str	r3, [r4, #52]	; 0x34
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	2300      	movs	r3, #0
 800716c:	6063      	str	r3, [r4, #4]
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	f043 0308 	orr.w	r3, r3, #8
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	b94b      	cbnz	r3, 8007192 <__swsetup_r+0x9a>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007188:	d003      	beq.n	8007192 <__swsetup_r+0x9a>
 800718a:	4621      	mov	r1, r4
 800718c:	4630      	mov	r0, r6
 800718e:	f001 f8a3 	bl	80082d8 <__smakebuf_r>
 8007192:	89a0      	ldrh	r0, [r4, #12]
 8007194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007198:	f010 0301 	ands.w	r3, r0, #1
 800719c:	d00a      	beq.n	80071b4 <__swsetup_r+0xbc>
 800719e:	2300      	movs	r3, #0
 80071a0:	60a3      	str	r3, [r4, #8]
 80071a2:	6963      	ldr	r3, [r4, #20]
 80071a4:	425b      	negs	r3, r3
 80071a6:	61a3      	str	r3, [r4, #24]
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	b943      	cbnz	r3, 80071be <__swsetup_r+0xc6>
 80071ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071b0:	d1ba      	bne.n	8007128 <__swsetup_r+0x30>
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	0781      	lsls	r1, r0, #30
 80071b6:	bf58      	it	pl
 80071b8:	6963      	ldrpl	r3, [r4, #20]
 80071ba:	60a3      	str	r3, [r4, #8]
 80071bc:	e7f4      	b.n	80071a8 <__swsetup_r+0xb0>
 80071be:	2000      	movs	r0, #0
 80071c0:	e7f7      	b.n	80071b2 <__swsetup_r+0xba>
 80071c2:	bf00      	nop
 80071c4:	2000005c 	.word	0x2000005c
 80071c8:	0800a790 	.word	0x0800a790
 80071cc:	0800a7b0 	.word	0x0800a7b0
 80071d0:	0800a770 	.word	0x0800a770

080071d4 <_close_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	2300      	movs	r3, #0
 80071d8:	4d05      	ldr	r5, [pc, #20]	; (80071f0 <_close_r+0x1c>)
 80071da:	4604      	mov	r4, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	f7fc f8a4 	bl	800332c <_close>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_close_r+0x1a>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_close_r+0x1a>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	200006f4 	.word	0x200006f4

080071f4 <quorem>:
 80071f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	6903      	ldr	r3, [r0, #16]
 80071fa:	690c      	ldr	r4, [r1, #16]
 80071fc:	4607      	mov	r7, r0
 80071fe:	42a3      	cmp	r3, r4
 8007200:	f2c0 8083 	blt.w	800730a <quorem+0x116>
 8007204:	3c01      	subs	r4, #1
 8007206:	f100 0514 	add.w	r5, r0, #20
 800720a:	f101 0814 	add.w	r8, r1, #20
 800720e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800721c:	3301      	adds	r3, #1
 800721e:	429a      	cmp	r2, r3
 8007220:	fbb2 f6f3 	udiv	r6, r2, r3
 8007224:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007228:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800722c:	d332      	bcc.n	8007294 <quorem+0xa0>
 800722e:	f04f 0e00 	mov.w	lr, #0
 8007232:	4640      	mov	r0, r8
 8007234:	46ac      	mov	ip, r5
 8007236:	46f2      	mov	sl, lr
 8007238:	f850 2b04 	ldr.w	r2, [r0], #4
 800723c:	b293      	uxth	r3, r2
 800723e:	fb06 e303 	mla	r3, r6, r3, lr
 8007242:	0c12      	lsrs	r2, r2, #16
 8007244:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007248:	fb06 e202 	mla	r2, r6, r2, lr
 800724c:	b29b      	uxth	r3, r3
 800724e:	ebaa 0303 	sub.w	r3, sl, r3
 8007252:	f8dc a000 	ldr.w	sl, [ip]
 8007256:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800725a:	fa1f fa8a 	uxth.w	sl, sl
 800725e:	4453      	add	r3, sl
 8007260:	fa1f fa82 	uxth.w	sl, r2
 8007264:	f8dc 2000 	ldr.w	r2, [ip]
 8007268:	4581      	cmp	r9, r0
 800726a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800726e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007272:	b29b      	uxth	r3, r3
 8007274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007278:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800727c:	f84c 3b04 	str.w	r3, [ip], #4
 8007280:	d2da      	bcs.n	8007238 <quorem+0x44>
 8007282:	f855 300b 	ldr.w	r3, [r5, fp]
 8007286:	b92b      	cbnz	r3, 8007294 <quorem+0xa0>
 8007288:	9b01      	ldr	r3, [sp, #4]
 800728a:	3b04      	subs	r3, #4
 800728c:	429d      	cmp	r5, r3
 800728e:	461a      	mov	r2, r3
 8007290:	d32f      	bcc.n	80072f2 <quorem+0xfe>
 8007292:	613c      	str	r4, [r7, #16]
 8007294:	4638      	mov	r0, r7
 8007296:	f001 fafd 	bl	8008894 <__mcmp>
 800729a:	2800      	cmp	r0, #0
 800729c:	db25      	blt.n	80072ea <quorem+0xf6>
 800729e:	4628      	mov	r0, r5
 80072a0:	f04f 0c00 	mov.w	ip, #0
 80072a4:	3601      	adds	r6, #1
 80072a6:	f858 1b04 	ldr.w	r1, [r8], #4
 80072aa:	f8d0 e000 	ldr.w	lr, [r0]
 80072ae:	b28b      	uxth	r3, r1
 80072b0:	ebac 0303 	sub.w	r3, ip, r3
 80072b4:	fa1f f28e 	uxth.w	r2, lr
 80072b8:	4413      	add	r3, r2
 80072ba:	0c0a      	lsrs	r2, r1, #16
 80072bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ca:	45c1      	cmp	r9, r8
 80072cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072d0:	f840 3b04 	str.w	r3, [r0], #4
 80072d4:	d2e7      	bcs.n	80072a6 <quorem+0xb2>
 80072d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072de:	b922      	cbnz	r2, 80072ea <quorem+0xf6>
 80072e0:	3b04      	subs	r3, #4
 80072e2:	429d      	cmp	r5, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	d30a      	bcc.n	80072fe <quorem+0x10a>
 80072e8:	613c      	str	r4, [r7, #16]
 80072ea:	4630      	mov	r0, r6
 80072ec:	b003      	add	sp, #12
 80072ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	3b04      	subs	r3, #4
 80072f6:	2a00      	cmp	r2, #0
 80072f8:	d1cb      	bne.n	8007292 <quorem+0x9e>
 80072fa:	3c01      	subs	r4, #1
 80072fc:	e7c6      	b.n	800728c <quorem+0x98>
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	3b04      	subs	r3, #4
 8007302:	2a00      	cmp	r2, #0
 8007304:	d1f0      	bne.n	80072e8 <quorem+0xf4>
 8007306:	3c01      	subs	r4, #1
 8007308:	e7eb      	b.n	80072e2 <quorem+0xee>
 800730a:	2000      	movs	r0, #0
 800730c:	e7ee      	b.n	80072ec <quorem+0xf8>
	...

08007310 <_dtoa_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	4616      	mov	r6, r2
 8007316:	461f      	mov	r7, r3
 8007318:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800731a:	b099      	sub	sp, #100	; 0x64
 800731c:	4605      	mov	r5, r0
 800731e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007322:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007326:	b974      	cbnz	r4, 8007346 <_dtoa_r+0x36>
 8007328:	2010      	movs	r0, #16
 800732a:	f001 f815 	bl	8008358 <malloc>
 800732e:	4602      	mov	r2, r0
 8007330:	6268      	str	r0, [r5, #36]	; 0x24
 8007332:	b920      	cbnz	r0, 800733e <_dtoa_r+0x2e>
 8007334:	21ea      	movs	r1, #234	; 0xea
 8007336:	4bae      	ldr	r3, [pc, #696]	; (80075f0 <_dtoa_r+0x2e0>)
 8007338:	48ae      	ldr	r0, [pc, #696]	; (80075f4 <_dtoa_r+0x2e4>)
 800733a:	f002 fb4b 	bl	80099d4 <__assert_func>
 800733e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007342:	6004      	str	r4, [r0, #0]
 8007344:	60c4      	str	r4, [r0, #12]
 8007346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	b151      	cbz	r1, 8007362 <_dtoa_r+0x52>
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	2301      	movs	r3, #1
 8007350:	4093      	lsls	r3, r2
 8007352:	604a      	str	r2, [r1, #4]
 8007354:	608b      	str	r3, [r1, #8]
 8007356:	4628      	mov	r0, r5
 8007358:	f001 f862 	bl	8008420 <_Bfree>
 800735c:	2200      	movs	r2, #0
 800735e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	1e3b      	subs	r3, r7, #0
 8007364:	bfaf      	iteee	ge
 8007366:	2300      	movge	r3, #0
 8007368:	2201      	movlt	r2, #1
 800736a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800736e:	9305      	strlt	r3, [sp, #20]
 8007370:	bfa8      	it	ge
 8007372:	f8c8 3000 	strge.w	r3, [r8]
 8007376:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800737a:	4b9f      	ldr	r3, [pc, #636]	; (80075f8 <_dtoa_r+0x2e8>)
 800737c:	bfb8      	it	lt
 800737e:	f8c8 2000 	strlt.w	r2, [r8]
 8007382:	ea33 0309 	bics.w	r3, r3, r9
 8007386:	d119      	bne.n	80073bc <_dtoa_r+0xac>
 8007388:	f242 730f 	movw	r3, #9999	; 0x270f
 800738c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007394:	4333      	orrs	r3, r6
 8007396:	f000 8580 	beq.w	8007e9a <_dtoa_r+0xb8a>
 800739a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800739c:	b953      	cbnz	r3, 80073b4 <_dtoa_r+0xa4>
 800739e:	4b97      	ldr	r3, [pc, #604]	; (80075fc <_dtoa_r+0x2ec>)
 80073a0:	e022      	b.n	80073e8 <_dtoa_r+0xd8>
 80073a2:	4b97      	ldr	r3, [pc, #604]	; (8007600 <_dtoa_r+0x2f0>)
 80073a4:	9308      	str	r3, [sp, #32]
 80073a6:	3308      	adds	r3, #8
 80073a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	9808      	ldr	r0, [sp, #32]
 80073ae:	b019      	add	sp, #100	; 0x64
 80073b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b4:	4b91      	ldr	r3, [pc, #580]	; (80075fc <_dtoa_r+0x2ec>)
 80073b6:	9308      	str	r3, [sp, #32]
 80073b8:	3303      	adds	r3, #3
 80073ba:	e7f5      	b.n	80073a8 <_dtoa_r+0x98>
 80073bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80073c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80073c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073c8:	2200      	movs	r2, #0
 80073ca:	2300      	movs	r3, #0
 80073cc:	f7f9 faf6 	bl	80009bc <__aeabi_dcmpeq>
 80073d0:	4680      	mov	r8, r0
 80073d2:	b158      	cbz	r0, 80073ec <_dtoa_r+0xdc>
 80073d4:	2301      	movs	r3, #1
 80073d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8559 	beq.w	8007e94 <_dtoa_r+0xb84>
 80073e2:	4888      	ldr	r0, [pc, #544]	; (8007604 <_dtoa_r+0x2f4>)
 80073e4:	6018      	str	r0, [r3, #0]
 80073e6:	1e43      	subs	r3, r0, #1
 80073e8:	9308      	str	r3, [sp, #32]
 80073ea:	e7df      	b.n	80073ac <_dtoa_r+0x9c>
 80073ec:	ab16      	add	r3, sp, #88	; 0x58
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	ab17      	add	r3, sp, #92	; 0x5c
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	4628      	mov	r0, r5
 80073f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80073fa:	f001 faf7 	bl	80089ec <__d2b>
 80073fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007402:	4682      	mov	sl, r0
 8007404:	2c00      	cmp	r4, #0
 8007406:	d07e      	beq.n	8007506 <_dtoa_r+0x1f6>
 8007408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800740c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800740e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007416:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800741a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800741e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007422:	2200      	movs	r2, #0
 8007424:	4b78      	ldr	r3, [pc, #480]	; (8007608 <_dtoa_r+0x2f8>)
 8007426:	f7f8 fea9 	bl	800017c <__aeabi_dsub>
 800742a:	a36b      	add	r3, pc, #428	; (adr r3, 80075d8 <_dtoa_r+0x2c8>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f7f9 f85c 	bl	80004ec <__aeabi_dmul>
 8007434:	a36a      	add	r3, pc, #424	; (adr r3, 80075e0 <_dtoa_r+0x2d0>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f7f8 fea1 	bl	8000180 <__adddf3>
 800743e:	4606      	mov	r6, r0
 8007440:	4620      	mov	r0, r4
 8007442:	460f      	mov	r7, r1
 8007444:	f7f8 ffe8 	bl	8000418 <__aeabi_i2d>
 8007448:	a367      	add	r3, pc, #412	; (adr r3, 80075e8 <_dtoa_r+0x2d8>)
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	f7f9 f84d 	bl	80004ec <__aeabi_dmul>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4630      	mov	r0, r6
 8007458:	4639      	mov	r1, r7
 800745a:	f7f8 fe91 	bl	8000180 <__adddf3>
 800745e:	4606      	mov	r6, r0
 8007460:	460f      	mov	r7, r1
 8007462:	f7f9 faf3 	bl	8000a4c <__aeabi_d2iz>
 8007466:	2200      	movs	r2, #0
 8007468:	4681      	mov	r9, r0
 800746a:	2300      	movs	r3, #0
 800746c:	4630      	mov	r0, r6
 800746e:	4639      	mov	r1, r7
 8007470:	f7f9 faae 	bl	80009d0 <__aeabi_dcmplt>
 8007474:	b148      	cbz	r0, 800748a <_dtoa_r+0x17a>
 8007476:	4648      	mov	r0, r9
 8007478:	f7f8 ffce 	bl	8000418 <__aeabi_i2d>
 800747c:	4632      	mov	r2, r6
 800747e:	463b      	mov	r3, r7
 8007480:	f7f9 fa9c 	bl	80009bc <__aeabi_dcmpeq>
 8007484:	b908      	cbnz	r0, 800748a <_dtoa_r+0x17a>
 8007486:	f109 39ff 	add.w	r9, r9, #4294967295
 800748a:	f1b9 0f16 	cmp.w	r9, #22
 800748e:	d857      	bhi.n	8007540 <_dtoa_r+0x230>
 8007490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007494:	4b5d      	ldr	r3, [pc, #372]	; (800760c <_dtoa_r+0x2fc>)
 8007496:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f9 fa97 	bl	80009d0 <__aeabi_dcmplt>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d04e      	beq.n	8007544 <_dtoa_r+0x234>
 80074a6:	2300      	movs	r3, #0
 80074a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80074ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80074ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074b0:	1b1c      	subs	r4, r3, r4
 80074b2:	1e63      	subs	r3, r4, #1
 80074b4:	9309      	str	r3, [sp, #36]	; 0x24
 80074b6:	bf49      	itett	mi
 80074b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80074bc:	2300      	movpl	r3, #0
 80074be:	9306      	strmi	r3, [sp, #24]
 80074c0:	2300      	movmi	r3, #0
 80074c2:	bf54      	ite	pl
 80074c4:	9306      	strpl	r3, [sp, #24]
 80074c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80074c8:	f1b9 0f00 	cmp.w	r9, #0
 80074cc:	db3c      	blt.n	8007548 <_dtoa_r+0x238>
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80074d4:	444b      	add	r3, r9
 80074d6:	9309      	str	r3, [sp, #36]	; 0x24
 80074d8:	2300      	movs	r3, #0
 80074da:	930a      	str	r3, [sp, #40]	; 0x28
 80074dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074de:	2b09      	cmp	r3, #9
 80074e0:	d86c      	bhi.n	80075bc <_dtoa_r+0x2ac>
 80074e2:	2b05      	cmp	r3, #5
 80074e4:	bfc4      	itt	gt
 80074e6:	3b04      	subgt	r3, #4
 80074e8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80074ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074ec:	bfc8      	it	gt
 80074ee:	2400      	movgt	r4, #0
 80074f0:	f1a3 0302 	sub.w	r3, r3, #2
 80074f4:	bfd8      	it	le
 80074f6:	2401      	movle	r4, #1
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	f200 808b 	bhi.w	8007614 <_dtoa_r+0x304>
 80074fe:	e8df f003 	tbb	[pc, r3]
 8007502:	4f2d      	.short	0x4f2d
 8007504:	5b4d      	.short	0x5b4d
 8007506:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800750a:	441c      	add	r4, r3
 800750c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007510:	2b20      	cmp	r3, #32
 8007512:	bfc3      	ittte	gt
 8007514:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007518:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800751c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007520:	f1c3 0320 	rsble	r3, r3, #32
 8007524:	bfc6      	itte	gt
 8007526:	fa26 f000 	lsrgt.w	r0, r6, r0
 800752a:	4318      	orrgt	r0, r3
 800752c:	fa06 f003 	lslle.w	r0, r6, r3
 8007530:	f7f8 ff62 	bl	80003f8 <__aeabi_ui2d>
 8007534:	2301      	movs	r3, #1
 8007536:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800753a:	3c01      	subs	r4, #1
 800753c:	9313      	str	r3, [sp, #76]	; 0x4c
 800753e:	e770      	b.n	8007422 <_dtoa_r+0x112>
 8007540:	2301      	movs	r3, #1
 8007542:	e7b3      	b.n	80074ac <_dtoa_r+0x19c>
 8007544:	900f      	str	r0, [sp, #60]	; 0x3c
 8007546:	e7b2      	b.n	80074ae <_dtoa_r+0x19e>
 8007548:	9b06      	ldr	r3, [sp, #24]
 800754a:	eba3 0309 	sub.w	r3, r3, r9
 800754e:	9306      	str	r3, [sp, #24]
 8007550:	f1c9 0300 	rsb	r3, r9, #0
 8007554:	930a      	str	r3, [sp, #40]	; 0x28
 8007556:	2300      	movs	r3, #0
 8007558:	930e      	str	r3, [sp, #56]	; 0x38
 800755a:	e7bf      	b.n	80074dc <_dtoa_r+0x1cc>
 800755c:	2300      	movs	r3, #0
 800755e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007560:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007562:	2b00      	cmp	r3, #0
 8007564:	dc59      	bgt.n	800761a <_dtoa_r+0x30a>
 8007566:	f04f 0b01 	mov.w	fp, #1
 800756a:	465b      	mov	r3, fp
 800756c:	f8cd b008 	str.w	fp, [sp, #8]
 8007570:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007574:	2200      	movs	r2, #0
 8007576:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007578:	6042      	str	r2, [r0, #4]
 800757a:	2204      	movs	r2, #4
 800757c:	f102 0614 	add.w	r6, r2, #20
 8007580:	429e      	cmp	r6, r3
 8007582:	6841      	ldr	r1, [r0, #4]
 8007584:	d94f      	bls.n	8007626 <_dtoa_r+0x316>
 8007586:	4628      	mov	r0, r5
 8007588:	f000 ff0a 	bl	80083a0 <_Balloc>
 800758c:	9008      	str	r0, [sp, #32]
 800758e:	2800      	cmp	r0, #0
 8007590:	d14d      	bne.n	800762e <_dtoa_r+0x31e>
 8007592:	4602      	mov	r2, r0
 8007594:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007598:	4b1d      	ldr	r3, [pc, #116]	; (8007610 <_dtoa_r+0x300>)
 800759a:	e6cd      	b.n	8007338 <_dtoa_r+0x28>
 800759c:	2301      	movs	r3, #1
 800759e:	e7de      	b.n	800755e <_dtoa_r+0x24e>
 80075a0:	2300      	movs	r3, #0
 80075a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075a6:	eb09 0b03 	add.w	fp, r9, r3
 80075aa:	f10b 0301 	add.w	r3, fp, #1
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	9302      	str	r3, [sp, #8]
 80075b2:	bfb8      	it	lt
 80075b4:	2301      	movlt	r3, #1
 80075b6:	e7dd      	b.n	8007574 <_dtoa_r+0x264>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e7f2      	b.n	80075a2 <_dtoa_r+0x292>
 80075bc:	2401      	movs	r4, #1
 80075be:	2300      	movs	r3, #0
 80075c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80075c2:	9322      	str	r3, [sp, #136]	; 0x88
 80075c4:	f04f 3bff 	mov.w	fp, #4294967295
 80075c8:	2200      	movs	r2, #0
 80075ca:	2312      	movs	r3, #18
 80075cc:	f8cd b008 	str.w	fp, [sp, #8]
 80075d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80075d2:	e7cf      	b.n	8007574 <_dtoa_r+0x264>
 80075d4:	f3af 8000 	nop.w
 80075d8:	636f4361 	.word	0x636f4361
 80075dc:	3fd287a7 	.word	0x3fd287a7
 80075e0:	8b60c8b3 	.word	0x8b60c8b3
 80075e4:	3fc68a28 	.word	0x3fc68a28
 80075e8:	509f79fb 	.word	0x509f79fb
 80075ec:	3fd34413 	.word	0x3fd34413
 80075f0:	0800a6e8 	.word	0x0800a6e8
 80075f4:	0800a6ff 	.word	0x0800a6ff
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	0800a6e4 	.word	0x0800a6e4
 8007600:	0800a6db 	.word	0x0800a6db
 8007604:	0800a942 	.word	0x0800a942
 8007608:	3ff80000 	.word	0x3ff80000
 800760c:	0800a858 	.word	0x0800a858
 8007610:	0800a75e 	.word	0x0800a75e
 8007614:	2301      	movs	r3, #1
 8007616:	930b      	str	r3, [sp, #44]	; 0x2c
 8007618:	e7d4      	b.n	80075c4 <_dtoa_r+0x2b4>
 800761a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800761e:	465b      	mov	r3, fp
 8007620:	f8cd b008 	str.w	fp, [sp, #8]
 8007624:	e7a6      	b.n	8007574 <_dtoa_r+0x264>
 8007626:	3101      	adds	r1, #1
 8007628:	6041      	str	r1, [r0, #4]
 800762a:	0052      	lsls	r2, r2, #1
 800762c:	e7a6      	b.n	800757c <_dtoa_r+0x26c>
 800762e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007630:	9a08      	ldr	r2, [sp, #32]
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	9b02      	ldr	r3, [sp, #8]
 8007636:	2b0e      	cmp	r3, #14
 8007638:	f200 80a8 	bhi.w	800778c <_dtoa_r+0x47c>
 800763c:	2c00      	cmp	r4, #0
 800763e:	f000 80a5 	beq.w	800778c <_dtoa_r+0x47c>
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	dd34      	ble.n	80076b2 <_dtoa_r+0x3a2>
 8007648:	4a9a      	ldr	r2, [pc, #616]	; (80078b4 <_dtoa_r+0x5a4>)
 800764a:	f009 030f 	and.w	r3, r9, #15
 800764e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007652:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007656:	e9d3 3400 	ldrd	r3, r4, [r3]
 800765a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800765e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007662:	d016      	beq.n	8007692 <_dtoa_r+0x382>
 8007664:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007668:	4b93      	ldr	r3, [pc, #588]	; (80078b8 <_dtoa_r+0x5a8>)
 800766a:	2703      	movs	r7, #3
 800766c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007670:	f7f9 f866 	bl	8000740 <__aeabi_ddiv>
 8007674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007678:	f004 040f 	and.w	r4, r4, #15
 800767c:	4e8e      	ldr	r6, [pc, #568]	; (80078b8 <_dtoa_r+0x5a8>)
 800767e:	b954      	cbnz	r4, 8007696 <_dtoa_r+0x386>
 8007680:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007688:	f7f9 f85a 	bl	8000740 <__aeabi_ddiv>
 800768c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007690:	e029      	b.n	80076e6 <_dtoa_r+0x3d6>
 8007692:	2702      	movs	r7, #2
 8007694:	e7f2      	b.n	800767c <_dtoa_r+0x36c>
 8007696:	07e1      	lsls	r1, r4, #31
 8007698:	d508      	bpl.n	80076ac <_dtoa_r+0x39c>
 800769a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800769e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076a2:	f7f8 ff23 	bl	80004ec <__aeabi_dmul>
 80076a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076aa:	3701      	adds	r7, #1
 80076ac:	1064      	asrs	r4, r4, #1
 80076ae:	3608      	adds	r6, #8
 80076b0:	e7e5      	b.n	800767e <_dtoa_r+0x36e>
 80076b2:	f000 80a5 	beq.w	8007800 <_dtoa_r+0x4f0>
 80076b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076ba:	f1c9 0400 	rsb	r4, r9, #0
 80076be:	4b7d      	ldr	r3, [pc, #500]	; (80078b4 <_dtoa_r+0x5a4>)
 80076c0:	f004 020f 	and.w	r2, r4, #15
 80076c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f7f8 ff0e 	bl	80004ec <__aeabi_dmul>
 80076d0:	2702      	movs	r7, #2
 80076d2:	2300      	movs	r3, #0
 80076d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076d8:	4e77      	ldr	r6, [pc, #476]	; (80078b8 <_dtoa_r+0x5a8>)
 80076da:	1124      	asrs	r4, r4, #4
 80076dc:	2c00      	cmp	r4, #0
 80076de:	f040 8084 	bne.w	80077ea <_dtoa_r+0x4da>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1d2      	bne.n	800768c <_dtoa_r+0x37c>
 80076e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 808b 	beq.w	8007804 <_dtoa_r+0x4f4>
 80076ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80076f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076fa:	2200      	movs	r2, #0
 80076fc:	4b6f      	ldr	r3, [pc, #444]	; (80078bc <_dtoa_r+0x5ac>)
 80076fe:	f7f9 f967 	bl	80009d0 <__aeabi_dcmplt>
 8007702:	2800      	cmp	r0, #0
 8007704:	d07e      	beq.n	8007804 <_dtoa_r+0x4f4>
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d07b      	beq.n	8007804 <_dtoa_r+0x4f4>
 800770c:	f1bb 0f00 	cmp.w	fp, #0
 8007710:	dd38      	ble.n	8007784 <_dtoa_r+0x474>
 8007712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007716:	2200      	movs	r2, #0
 8007718:	4b69      	ldr	r3, [pc, #420]	; (80078c0 <_dtoa_r+0x5b0>)
 800771a:	f7f8 fee7 	bl	80004ec <__aeabi_dmul>
 800771e:	465c      	mov	r4, fp
 8007720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007724:	f109 38ff 	add.w	r8, r9, #4294967295
 8007728:	3701      	adds	r7, #1
 800772a:	4638      	mov	r0, r7
 800772c:	f7f8 fe74 	bl	8000418 <__aeabi_i2d>
 8007730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007734:	f7f8 feda 	bl	80004ec <__aeabi_dmul>
 8007738:	2200      	movs	r2, #0
 800773a:	4b62      	ldr	r3, [pc, #392]	; (80078c4 <_dtoa_r+0x5b4>)
 800773c:	f7f8 fd20 	bl	8000180 <__adddf3>
 8007740:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007744:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007748:	9611      	str	r6, [sp, #68]	; 0x44
 800774a:	2c00      	cmp	r4, #0
 800774c:	d15d      	bne.n	800780a <_dtoa_r+0x4fa>
 800774e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007752:	2200      	movs	r2, #0
 8007754:	4b5c      	ldr	r3, [pc, #368]	; (80078c8 <_dtoa_r+0x5b8>)
 8007756:	f7f8 fd11 	bl	800017c <__aeabi_dsub>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007762:	4633      	mov	r3, r6
 8007764:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007766:	f7f9 f951 	bl	8000a0c <__aeabi_dcmpgt>
 800776a:	2800      	cmp	r0, #0
 800776c:	f040 829e 	bne.w	8007cac <_dtoa_r+0x99c>
 8007770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007776:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800777a:	f7f9 f929 	bl	80009d0 <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	f040 8292 	bne.w	8007ca8 <_dtoa_r+0x998>
 8007784:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007788:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800778c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800778e:	2b00      	cmp	r3, #0
 8007790:	f2c0 8153 	blt.w	8007a3a <_dtoa_r+0x72a>
 8007794:	f1b9 0f0e 	cmp.w	r9, #14
 8007798:	f300 814f 	bgt.w	8007a3a <_dtoa_r+0x72a>
 800779c:	4b45      	ldr	r3, [pc, #276]	; (80078b4 <_dtoa_r+0x5a4>)
 800779e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80077a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80077aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f280 80db 	bge.w	8007968 <_dtoa_r+0x658>
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f300 80d7 	bgt.w	8007968 <_dtoa_r+0x658>
 80077ba:	f040 8274 	bne.w	8007ca6 <_dtoa_r+0x996>
 80077be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077c2:	2200      	movs	r2, #0
 80077c4:	4b40      	ldr	r3, [pc, #256]	; (80078c8 <_dtoa_r+0x5b8>)
 80077c6:	f7f8 fe91 	bl	80004ec <__aeabi_dmul>
 80077ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ce:	f7f9 f913 	bl	80009f8 <__aeabi_dcmpge>
 80077d2:	9c02      	ldr	r4, [sp, #8]
 80077d4:	4626      	mov	r6, r4
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f040 824a 	bne.w	8007c70 <_dtoa_r+0x960>
 80077dc:	2331      	movs	r3, #49	; 0x31
 80077de:	9f08      	ldr	r7, [sp, #32]
 80077e0:	f109 0901 	add.w	r9, r9, #1
 80077e4:	f807 3b01 	strb.w	r3, [r7], #1
 80077e8:	e246      	b.n	8007c78 <_dtoa_r+0x968>
 80077ea:	07e2      	lsls	r2, r4, #31
 80077ec:	d505      	bpl.n	80077fa <_dtoa_r+0x4ea>
 80077ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077f2:	f7f8 fe7b 	bl	80004ec <__aeabi_dmul>
 80077f6:	2301      	movs	r3, #1
 80077f8:	3701      	adds	r7, #1
 80077fa:	1064      	asrs	r4, r4, #1
 80077fc:	3608      	adds	r6, #8
 80077fe:	e76d      	b.n	80076dc <_dtoa_r+0x3cc>
 8007800:	2702      	movs	r7, #2
 8007802:	e770      	b.n	80076e6 <_dtoa_r+0x3d6>
 8007804:	46c8      	mov	r8, r9
 8007806:	9c02      	ldr	r4, [sp, #8]
 8007808:	e78f      	b.n	800772a <_dtoa_r+0x41a>
 800780a:	9908      	ldr	r1, [sp, #32]
 800780c:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <_dtoa_r+0x5a4>)
 800780e:	4421      	add	r1, r4
 8007810:	9112      	str	r1, [sp, #72]	; 0x48
 8007812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007814:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007818:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800781c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007820:	2900      	cmp	r1, #0
 8007822:	d055      	beq.n	80078d0 <_dtoa_r+0x5c0>
 8007824:	2000      	movs	r0, #0
 8007826:	4929      	ldr	r1, [pc, #164]	; (80078cc <_dtoa_r+0x5bc>)
 8007828:	f7f8 ff8a 	bl	8000740 <__aeabi_ddiv>
 800782c:	463b      	mov	r3, r7
 800782e:	4632      	mov	r2, r6
 8007830:	f7f8 fca4 	bl	800017c <__aeabi_dsub>
 8007834:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007838:	9f08      	ldr	r7, [sp, #32]
 800783a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800783e:	f7f9 f905 	bl	8000a4c <__aeabi_d2iz>
 8007842:	4604      	mov	r4, r0
 8007844:	f7f8 fde8 	bl	8000418 <__aeabi_i2d>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007850:	f7f8 fc94 	bl	800017c <__aeabi_dsub>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	3430      	adds	r4, #48	; 0x30
 800785a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800785e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007862:	f807 4b01 	strb.w	r4, [r7], #1
 8007866:	f7f9 f8b3 	bl	80009d0 <__aeabi_dcmplt>
 800786a:	2800      	cmp	r0, #0
 800786c:	d174      	bne.n	8007958 <_dtoa_r+0x648>
 800786e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007872:	2000      	movs	r0, #0
 8007874:	4911      	ldr	r1, [pc, #68]	; (80078bc <_dtoa_r+0x5ac>)
 8007876:	f7f8 fc81 	bl	800017c <__aeabi_dsub>
 800787a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800787e:	f7f9 f8a7 	bl	80009d0 <__aeabi_dcmplt>
 8007882:	2800      	cmp	r0, #0
 8007884:	f040 80b6 	bne.w	80079f4 <_dtoa_r+0x6e4>
 8007888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800788a:	429f      	cmp	r7, r3
 800788c:	f43f af7a 	beq.w	8007784 <_dtoa_r+0x474>
 8007890:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007894:	2200      	movs	r2, #0
 8007896:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <_dtoa_r+0x5b0>)
 8007898:	f7f8 fe28 	bl	80004ec <__aeabi_dmul>
 800789c:	2200      	movs	r2, #0
 800789e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a6:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <_dtoa_r+0x5b0>)
 80078a8:	f7f8 fe20 	bl	80004ec <__aeabi_dmul>
 80078ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078b0:	e7c3      	b.n	800783a <_dtoa_r+0x52a>
 80078b2:	bf00      	nop
 80078b4:	0800a858 	.word	0x0800a858
 80078b8:	0800a830 	.word	0x0800a830
 80078bc:	3ff00000 	.word	0x3ff00000
 80078c0:	40240000 	.word	0x40240000
 80078c4:	401c0000 	.word	0x401c0000
 80078c8:	40140000 	.word	0x40140000
 80078cc:	3fe00000 	.word	0x3fe00000
 80078d0:	4630      	mov	r0, r6
 80078d2:	4639      	mov	r1, r7
 80078d4:	f7f8 fe0a 	bl	80004ec <__aeabi_dmul>
 80078d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078de:	9c08      	ldr	r4, [sp, #32]
 80078e0:	9314      	str	r3, [sp, #80]	; 0x50
 80078e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078e6:	f7f9 f8b1 	bl	8000a4c <__aeabi_d2iz>
 80078ea:	9015      	str	r0, [sp, #84]	; 0x54
 80078ec:	f7f8 fd94 	bl	8000418 <__aeabi_i2d>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078f8:	f7f8 fc40 	bl	800017c <__aeabi_dsub>
 80078fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078fe:	4606      	mov	r6, r0
 8007900:	3330      	adds	r3, #48	; 0x30
 8007902:	f804 3b01 	strb.w	r3, [r4], #1
 8007906:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007908:	460f      	mov	r7, r1
 800790a:	429c      	cmp	r4, r3
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	d124      	bne.n	800795c <_dtoa_r+0x64c>
 8007912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007916:	4bb3      	ldr	r3, [pc, #716]	; (8007be4 <_dtoa_r+0x8d4>)
 8007918:	f7f8 fc32 	bl	8000180 <__adddf3>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4630      	mov	r0, r6
 8007922:	4639      	mov	r1, r7
 8007924:	f7f9 f872 	bl	8000a0c <__aeabi_dcmpgt>
 8007928:	2800      	cmp	r0, #0
 800792a:	d162      	bne.n	80079f2 <_dtoa_r+0x6e2>
 800792c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007930:	2000      	movs	r0, #0
 8007932:	49ac      	ldr	r1, [pc, #688]	; (8007be4 <_dtoa_r+0x8d4>)
 8007934:	f7f8 fc22 	bl	800017c <__aeabi_dsub>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4630      	mov	r0, r6
 800793e:	4639      	mov	r1, r7
 8007940:	f7f9 f846 	bl	80009d0 <__aeabi_dcmplt>
 8007944:	2800      	cmp	r0, #0
 8007946:	f43f af1d 	beq.w	8007784 <_dtoa_r+0x474>
 800794a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800794c:	1e7b      	subs	r3, r7, #1
 800794e:	9314      	str	r3, [sp, #80]	; 0x50
 8007950:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007954:	2b30      	cmp	r3, #48	; 0x30
 8007956:	d0f8      	beq.n	800794a <_dtoa_r+0x63a>
 8007958:	46c1      	mov	r9, r8
 800795a:	e03a      	b.n	80079d2 <_dtoa_r+0x6c2>
 800795c:	4ba2      	ldr	r3, [pc, #648]	; (8007be8 <_dtoa_r+0x8d8>)
 800795e:	f7f8 fdc5 	bl	80004ec <__aeabi_dmul>
 8007962:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007966:	e7bc      	b.n	80078e2 <_dtoa_r+0x5d2>
 8007968:	9f08      	ldr	r7, [sp, #32]
 800796a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800796e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007972:	f7f8 fee5 	bl	8000740 <__aeabi_ddiv>
 8007976:	f7f9 f869 	bl	8000a4c <__aeabi_d2iz>
 800797a:	4604      	mov	r4, r0
 800797c:	f7f8 fd4c 	bl	8000418 <__aeabi_i2d>
 8007980:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007984:	f7f8 fdb2 	bl	80004ec <__aeabi_dmul>
 8007988:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800798c:	460b      	mov	r3, r1
 800798e:	4602      	mov	r2, r0
 8007990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007994:	f7f8 fbf2 	bl	800017c <__aeabi_dsub>
 8007998:	f807 6b01 	strb.w	r6, [r7], #1
 800799c:	9e08      	ldr	r6, [sp, #32]
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	1bbe      	subs	r6, r7, r6
 80079a2:	42b3      	cmp	r3, r6
 80079a4:	d13a      	bne.n	8007a1c <_dtoa_r+0x70c>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	f7f8 fbe9 	bl	8000180 <__adddf3>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079ba:	f7f9 f827 	bl	8000a0c <__aeabi_dcmpgt>
 80079be:	bb58      	cbnz	r0, 8007a18 <_dtoa_r+0x708>
 80079c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c8:	f7f8 fff8 	bl	80009bc <__aeabi_dcmpeq>
 80079cc:	b108      	cbz	r0, 80079d2 <_dtoa_r+0x6c2>
 80079ce:	07e1      	lsls	r1, r4, #31
 80079d0:	d422      	bmi.n	8007a18 <_dtoa_r+0x708>
 80079d2:	4628      	mov	r0, r5
 80079d4:	4651      	mov	r1, sl
 80079d6:	f000 fd23 	bl	8008420 <_Bfree>
 80079da:	2300      	movs	r3, #0
 80079dc:	703b      	strb	r3, [r7, #0]
 80079de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80079e0:	f109 0001 	add.w	r0, r9, #1
 80079e4:	6018      	str	r0, [r3, #0]
 80079e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f43f acdf 	beq.w	80073ac <_dtoa_r+0x9c>
 80079ee:	601f      	str	r7, [r3, #0]
 80079f0:	e4dc      	b.n	80073ac <_dtoa_r+0x9c>
 80079f2:	4627      	mov	r7, r4
 80079f4:	463b      	mov	r3, r7
 80079f6:	461f      	mov	r7, r3
 80079f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079fc:	2a39      	cmp	r2, #57	; 0x39
 80079fe:	d107      	bne.n	8007a10 <_dtoa_r+0x700>
 8007a00:	9a08      	ldr	r2, [sp, #32]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d1f7      	bne.n	80079f6 <_dtoa_r+0x6e6>
 8007a06:	2230      	movs	r2, #48	; 0x30
 8007a08:	9908      	ldr	r1, [sp, #32]
 8007a0a:	f108 0801 	add.w	r8, r8, #1
 8007a0e:	700a      	strb	r2, [r1, #0]
 8007a10:	781a      	ldrb	r2, [r3, #0]
 8007a12:	3201      	adds	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	e79f      	b.n	8007958 <_dtoa_r+0x648>
 8007a18:	46c8      	mov	r8, r9
 8007a1a:	e7eb      	b.n	80079f4 <_dtoa_r+0x6e4>
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	4b72      	ldr	r3, [pc, #456]	; (8007be8 <_dtoa_r+0x8d8>)
 8007a20:	f7f8 fd64 	bl	80004ec <__aeabi_dmul>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f7f8 ffc4 	bl	80009bc <__aeabi_dcmpeq>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d098      	beq.n	800796a <_dtoa_r+0x65a>
 8007a38:	e7cb      	b.n	80079d2 <_dtoa_r+0x6c2>
 8007a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	f000 80cd 	beq.w	8007bdc <_dtoa_r+0x8cc>
 8007a42:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a44:	2a01      	cmp	r2, #1
 8007a46:	f300 80af 	bgt.w	8007ba8 <_dtoa_r+0x898>
 8007a4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a4c:	2a00      	cmp	r2, #0
 8007a4e:	f000 80a7 	beq.w	8007ba0 <_dtoa_r+0x890>
 8007a52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a58:	9f06      	ldr	r7, [sp, #24]
 8007a5a:	9a06      	ldr	r2, [sp, #24]
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	441a      	add	r2, r3
 8007a60:	9206      	str	r2, [sp, #24]
 8007a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a64:	4628      	mov	r0, r5
 8007a66:	441a      	add	r2, r3
 8007a68:	9209      	str	r2, [sp, #36]	; 0x24
 8007a6a:	f000 fd93 	bl	8008594 <__i2b>
 8007a6e:	4606      	mov	r6, r0
 8007a70:	2f00      	cmp	r7, #0
 8007a72:	dd0c      	ble.n	8007a8e <_dtoa_r+0x77e>
 8007a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd09      	ble.n	8007a8e <_dtoa_r+0x77e>
 8007a7a:	42bb      	cmp	r3, r7
 8007a7c:	bfa8      	it	ge
 8007a7e:	463b      	movge	r3, r7
 8007a80:	9a06      	ldr	r2, [sp, #24]
 8007a82:	1aff      	subs	r7, r7, r3
 8007a84:	1ad2      	subs	r2, r2, r3
 8007a86:	9206      	str	r2, [sp, #24]
 8007a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a90:	b1f3      	cbz	r3, 8007ad0 <_dtoa_r+0x7c0>
 8007a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80a9 	beq.w	8007bec <_dtoa_r+0x8dc>
 8007a9a:	2c00      	cmp	r4, #0
 8007a9c:	dd10      	ble.n	8007ac0 <_dtoa_r+0x7b0>
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4622      	mov	r2, r4
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f000 fe30 	bl	8008708 <__pow5mult>
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	4601      	mov	r1, r0
 8007aac:	4606      	mov	r6, r0
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f000 fd86 	bl	80085c0 <__multiply>
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	4651      	mov	r1, sl
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 fcb1 	bl	8008420 <_Bfree>
 8007abe:	46c2      	mov	sl, r8
 8007ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac2:	1b1a      	subs	r2, r3, r4
 8007ac4:	d004      	beq.n	8007ad0 <_dtoa_r+0x7c0>
 8007ac6:	4651      	mov	r1, sl
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f000 fe1d 	bl	8008708 <__pow5mult>
 8007ace:	4682      	mov	sl, r0
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 fd5e 	bl	8008594 <__i2b>
 8007ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ada:	4604      	mov	r4, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f340 8087 	ble.w	8007bf0 <_dtoa_r+0x8e0>
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 fe0e 	bl	8008708 <__pow5mult>
 8007aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aee:	4604      	mov	r4, r0
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	f340 8080 	ble.w	8007bf6 <_dtoa_r+0x8e6>
 8007af6:	f04f 0800 	mov.w	r8, #0
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b00:	6918      	ldr	r0, [r3, #16]
 8007b02:	f000 fcf9 	bl	80084f8 <__hi0bits>
 8007b06:	f1c0 0020 	rsb	r0, r0, #32
 8007b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0c:	4418      	add	r0, r3
 8007b0e:	f010 001f 	ands.w	r0, r0, #31
 8007b12:	f000 8092 	beq.w	8007c3a <_dtoa_r+0x92a>
 8007b16:	f1c0 0320 	rsb	r3, r0, #32
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	f340 808a 	ble.w	8007c34 <_dtoa_r+0x924>
 8007b20:	f1c0 001c 	rsb	r0, r0, #28
 8007b24:	9b06      	ldr	r3, [sp, #24]
 8007b26:	4407      	add	r7, r0
 8007b28:	4403      	add	r3, r0
 8007b2a:	9306      	str	r3, [sp, #24]
 8007b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b2e:	4403      	add	r3, r0
 8007b30:	9309      	str	r3, [sp, #36]	; 0x24
 8007b32:	9b06      	ldr	r3, [sp, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dd05      	ble.n	8007b44 <_dtoa_r+0x834>
 8007b38:	4651      	mov	r1, sl
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 fe3d 	bl	80087bc <__lshift>
 8007b42:	4682      	mov	sl, r0
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dd05      	ble.n	8007b56 <_dtoa_r+0x846>
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 fe34 	bl	80087bc <__lshift>
 8007b54:	4604      	mov	r4, r0
 8007b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d070      	beq.n	8007c3e <_dtoa_r+0x92e>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4650      	mov	r0, sl
 8007b60:	f000 fe98 	bl	8008894 <__mcmp>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	da6a      	bge.n	8007c3e <_dtoa_r+0x92e>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4651      	mov	r1, sl
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 fc78 	bl	8008464 <__multadd>
 8007b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b76:	4682      	mov	sl, r0
 8007b78:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8193 	beq.w	8007ea8 <_dtoa_r+0xb98>
 8007b82:	4631      	mov	r1, r6
 8007b84:	2300      	movs	r3, #0
 8007b86:	220a      	movs	r2, #10
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 fc6b 	bl	8008464 <__multadd>
 8007b8e:	f1bb 0f00 	cmp.w	fp, #0
 8007b92:	4606      	mov	r6, r0
 8007b94:	f300 8093 	bgt.w	8007cbe <_dtoa_r+0x9ae>
 8007b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	dc57      	bgt.n	8007c4e <_dtoa_r+0x93e>
 8007b9e:	e08e      	b.n	8007cbe <_dtoa_r+0x9ae>
 8007ba0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ba2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ba6:	e756      	b.n	8007a56 <_dtoa_r+0x746>
 8007ba8:	9b02      	ldr	r3, [sp, #8]
 8007baa:	1e5c      	subs	r4, r3, #1
 8007bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	bfb7      	itett	lt
 8007bb2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007bb4:	1b1c      	subge	r4, r3, r4
 8007bb6:	1ae2      	sublt	r2, r4, r3
 8007bb8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007bba:	bfbe      	ittt	lt
 8007bbc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007bbe:	189b      	addlt	r3, r3, r2
 8007bc0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	bfb8      	it	lt
 8007bc6:	2400      	movlt	r4, #0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	bfbb      	ittet	lt
 8007bcc:	9b06      	ldrlt	r3, [sp, #24]
 8007bce:	9a02      	ldrlt	r2, [sp, #8]
 8007bd0:	9f06      	ldrge	r7, [sp, #24]
 8007bd2:	1a9f      	sublt	r7, r3, r2
 8007bd4:	bfac      	ite	ge
 8007bd6:	9b02      	ldrge	r3, [sp, #8]
 8007bd8:	2300      	movlt	r3, #0
 8007bda:	e73e      	b.n	8007a5a <_dtoa_r+0x74a>
 8007bdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bde:	9f06      	ldr	r7, [sp, #24]
 8007be0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007be2:	e745      	b.n	8007a70 <_dtoa_r+0x760>
 8007be4:	3fe00000 	.word	0x3fe00000
 8007be8:	40240000 	.word	0x40240000
 8007bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bee:	e76a      	b.n	8007ac6 <_dtoa_r+0x7b6>
 8007bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	dc19      	bgt.n	8007c2a <_dtoa_r+0x91a>
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	b9bb      	cbnz	r3, 8007c2a <_dtoa_r+0x91a>
 8007bfa:	9b05      	ldr	r3, [sp, #20]
 8007bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c00:	b99b      	cbnz	r3, 8007c2a <_dtoa_r+0x91a>
 8007c02:	9b05      	ldr	r3, [sp, #20]
 8007c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c08:	0d1b      	lsrs	r3, r3, #20
 8007c0a:	051b      	lsls	r3, r3, #20
 8007c0c:	b183      	cbz	r3, 8007c30 <_dtoa_r+0x920>
 8007c0e:	f04f 0801 	mov.w	r8, #1
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	3301      	adds	r3, #1
 8007c16:	9306      	str	r3, [sp, #24]
 8007c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f47f af6a 	bne.w	8007afa <_dtoa_r+0x7ea>
 8007c26:	2001      	movs	r0, #1
 8007c28:	e76f      	b.n	8007b0a <_dtoa_r+0x7fa>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	e7f6      	b.n	8007c1e <_dtoa_r+0x90e>
 8007c30:	4698      	mov	r8, r3
 8007c32:	e7f4      	b.n	8007c1e <_dtoa_r+0x90e>
 8007c34:	f43f af7d 	beq.w	8007b32 <_dtoa_r+0x822>
 8007c38:	4618      	mov	r0, r3
 8007c3a:	301c      	adds	r0, #28
 8007c3c:	e772      	b.n	8007b24 <_dtoa_r+0x814>
 8007c3e:	9b02      	ldr	r3, [sp, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dc36      	bgt.n	8007cb2 <_dtoa_r+0x9a2>
 8007c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	dd33      	ble.n	8007cb2 <_dtoa_r+0x9a2>
 8007c4a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007c4e:	f1bb 0f00 	cmp.w	fp, #0
 8007c52:	d10d      	bne.n	8007c70 <_dtoa_r+0x960>
 8007c54:	4621      	mov	r1, r4
 8007c56:	465b      	mov	r3, fp
 8007c58:	2205      	movs	r2, #5
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 fc02 	bl	8008464 <__multadd>
 8007c60:	4601      	mov	r1, r0
 8007c62:	4604      	mov	r4, r0
 8007c64:	4650      	mov	r0, sl
 8007c66:	f000 fe15 	bl	8008894 <__mcmp>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f73f adb6 	bgt.w	80077dc <_dtoa_r+0x4cc>
 8007c70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c72:	9f08      	ldr	r7, [sp, #32]
 8007c74:	ea6f 0903 	mvn.w	r9, r3
 8007c78:	f04f 0800 	mov.w	r8, #0
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 fbce 	bl	8008420 <_Bfree>
 8007c84:	2e00      	cmp	r6, #0
 8007c86:	f43f aea4 	beq.w	80079d2 <_dtoa_r+0x6c2>
 8007c8a:	f1b8 0f00 	cmp.w	r8, #0
 8007c8e:	d005      	beq.n	8007c9c <_dtoa_r+0x98c>
 8007c90:	45b0      	cmp	r8, r6
 8007c92:	d003      	beq.n	8007c9c <_dtoa_r+0x98c>
 8007c94:	4641      	mov	r1, r8
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 fbc2 	bl	8008420 <_Bfree>
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f000 fbbe 	bl	8008420 <_Bfree>
 8007ca4:	e695      	b.n	80079d2 <_dtoa_r+0x6c2>
 8007ca6:	2400      	movs	r4, #0
 8007ca8:	4626      	mov	r6, r4
 8007caa:	e7e1      	b.n	8007c70 <_dtoa_r+0x960>
 8007cac:	46c1      	mov	r9, r8
 8007cae:	4626      	mov	r6, r4
 8007cb0:	e594      	b.n	80077dc <_dtoa_r+0x4cc>
 8007cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80fc 	beq.w	8007eb6 <_dtoa_r+0xba6>
 8007cbe:	2f00      	cmp	r7, #0
 8007cc0:	dd05      	ble.n	8007cce <_dtoa_r+0x9be>
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	463a      	mov	r2, r7
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 fd78 	bl	80087bc <__lshift>
 8007ccc:	4606      	mov	r6, r0
 8007cce:	f1b8 0f00 	cmp.w	r8, #0
 8007cd2:	d05c      	beq.n	8007d8e <_dtoa_r+0xa7e>
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	6871      	ldr	r1, [r6, #4]
 8007cd8:	f000 fb62 	bl	80083a0 <_Balloc>
 8007cdc:	4607      	mov	r7, r0
 8007cde:	b928      	cbnz	r0, 8007cec <_dtoa_r+0x9dc>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ce6:	4b7e      	ldr	r3, [pc, #504]	; (8007ee0 <_dtoa_r+0xbd0>)
 8007ce8:	f7ff bb26 	b.w	8007338 <_dtoa_r+0x28>
 8007cec:	6932      	ldr	r2, [r6, #16]
 8007cee:	f106 010c 	add.w	r1, r6, #12
 8007cf2:	3202      	adds	r2, #2
 8007cf4:	0092      	lsls	r2, r2, #2
 8007cf6:	300c      	adds	r0, #12
 8007cf8:	f000 fb44 	bl	8008384 <memcpy>
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4639      	mov	r1, r7
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 fd5b 	bl	80087bc <__lshift>
 8007d06:	46b0      	mov	r8, r6
 8007d08:	4606      	mov	r6, r0
 8007d0a:	9b08      	ldr	r3, [sp, #32]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	9302      	str	r3, [sp, #8]
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	445b      	add	r3, fp
 8007d14:	930a      	str	r3, [sp, #40]	; 0x28
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	4621      	mov	r1, r4
 8007d22:	4650      	mov	r0, sl
 8007d24:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d28:	f7ff fa64 	bl	80071f4 <quorem>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	4641      	mov	r1, r8
 8007d30:	3330      	adds	r3, #48	; 0x30
 8007d32:	9004      	str	r0, [sp, #16]
 8007d34:	4650      	mov	r0, sl
 8007d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d38:	f000 fdac 	bl	8008894 <__mcmp>
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	9006      	str	r0, [sp, #24]
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 fdc2 	bl	80088cc <__mdiff>
 8007d48:	68c2      	ldr	r2, [r0, #12]
 8007d4a:	4607      	mov	r7, r0
 8007d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4e:	bb02      	cbnz	r2, 8007d92 <_dtoa_r+0xa82>
 8007d50:	4601      	mov	r1, r0
 8007d52:	4650      	mov	r0, sl
 8007d54:	f000 fd9e 	bl	8008894 <__mcmp>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4628      	mov	r0, r5
 8007d60:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007d64:	f000 fb5c 	bl	8008420 <_Bfree>
 8007d68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d6c:	9f02      	ldr	r7, [sp, #8]
 8007d6e:	ea43 0102 	orr.w	r1, r3, r2
 8007d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d74:	430b      	orrs	r3, r1
 8007d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d78:	d10d      	bne.n	8007d96 <_dtoa_r+0xa86>
 8007d7a:	2b39      	cmp	r3, #57	; 0x39
 8007d7c:	d027      	beq.n	8007dce <_dtoa_r+0xabe>
 8007d7e:	9a06      	ldr	r2, [sp, #24]
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	dd01      	ble.n	8007d88 <_dtoa_r+0xa78>
 8007d84:	9b04      	ldr	r3, [sp, #16]
 8007d86:	3331      	adds	r3, #49	; 0x31
 8007d88:	f88b 3000 	strb.w	r3, [fp]
 8007d8c:	e776      	b.n	8007c7c <_dtoa_r+0x96c>
 8007d8e:	4630      	mov	r0, r6
 8007d90:	e7b9      	b.n	8007d06 <_dtoa_r+0x9f6>
 8007d92:	2201      	movs	r2, #1
 8007d94:	e7e2      	b.n	8007d5c <_dtoa_r+0xa4c>
 8007d96:	9906      	ldr	r1, [sp, #24]
 8007d98:	2900      	cmp	r1, #0
 8007d9a:	db04      	blt.n	8007da6 <_dtoa_r+0xa96>
 8007d9c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007d9e:	4301      	orrs	r1, r0
 8007da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007da2:	4301      	orrs	r1, r0
 8007da4:	d120      	bne.n	8007de8 <_dtoa_r+0xad8>
 8007da6:	2a00      	cmp	r2, #0
 8007da8:	ddee      	ble.n	8007d88 <_dtoa_r+0xa78>
 8007daa:	4651      	mov	r1, sl
 8007dac:	2201      	movs	r2, #1
 8007dae:	4628      	mov	r0, r5
 8007db0:	9302      	str	r3, [sp, #8]
 8007db2:	f000 fd03 	bl	80087bc <__lshift>
 8007db6:	4621      	mov	r1, r4
 8007db8:	4682      	mov	sl, r0
 8007dba:	f000 fd6b 	bl	8008894 <__mcmp>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	dc02      	bgt.n	8007dca <_dtoa_r+0xaba>
 8007dc4:	d1e0      	bne.n	8007d88 <_dtoa_r+0xa78>
 8007dc6:	07da      	lsls	r2, r3, #31
 8007dc8:	d5de      	bpl.n	8007d88 <_dtoa_r+0xa78>
 8007dca:	2b39      	cmp	r3, #57	; 0x39
 8007dcc:	d1da      	bne.n	8007d84 <_dtoa_r+0xa74>
 8007dce:	2339      	movs	r3, #57	; 0x39
 8007dd0:	f88b 3000 	strb.w	r3, [fp]
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	461f      	mov	r7, r3
 8007dd8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	2a39      	cmp	r2, #57	; 0x39
 8007de0:	d050      	beq.n	8007e84 <_dtoa_r+0xb74>
 8007de2:	3201      	adds	r2, #1
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e749      	b.n	8007c7c <_dtoa_r+0x96c>
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	dd03      	ble.n	8007df4 <_dtoa_r+0xae4>
 8007dec:	2b39      	cmp	r3, #57	; 0x39
 8007dee:	d0ee      	beq.n	8007dce <_dtoa_r+0xabe>
 8007df0:	3301      	adds	r3, #1
 8007df2:	e7c9      	b.n	8007d88 <_dtoa_r+0xa78>
 8007df4:	9a02      	ldr	r2, [sp, #8]
 8007df6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007df8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007dfc:	428a      	cmp	r2, r1
 8007dfe:	d02a      	beq.n	8007e56 <_dtoa_r+0xb46>
 8007e00:	4651      	mov	r1, sl
 8007e02:	2300      	movs	r3, #0
 8007e04:	220a      	movs	r2, #10
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 fb2c 	bl	8008464 <__multadd>
 8007e0c:	45b0      	cmp	r8, r6
 8007e0e:	4682      	mov	sl, r0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	f04f 020a 	mov.w	r2, #10
 8007e18:	4641      	mov	r1, r8
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	d107      	bne.n	8007e2e <_dtoa_r+0xb1e>
 8007e1e:	f000 fb21 	bl	8008464 <__multadd>
 8007e22:	4680      	mov	r8, r0
 8007e24:	4606      	mov	r6, r0
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	9302      	str	r3, [sp, #8]
 8007e2c:	e777      	b.n	8007d1e <_dtoa_r+0xa0e>
 8007e2e:	f000 fb19 	bl	8008464 <__multadd>
 8007e32:	4631      	mov	r1, r6
 8007e34:	4680      	mov	r8, r0
 8007e36:	2300      	movs	r3, #0
 8007e38:	220a      	movs	r2, #10
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 fb12 	bl	8008464 <__multadd>
 8007e40:	4606      	mov	r6, r0
 8007e42:	e7f0      	b.n	8007e26 <_dtoa_r+0xb16>
 8007e44:	f1bb 0f00 	cmp.w	fp, #0
 8007e48:	bfcc      	ite	gt
 8007e4a:	465f      	movgt	r7, fp
 8007e4c:	2701      	movle	r7, #1
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	9a08      	ldr	r2, [sp, #32]
 8007e54:	4417      	add	r7, r2
 8007e56:	4651      	mov	r1, sl
 8007e58:	2201      	movs	r2, #1
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	9302      	str	r3, [sp, #8]
 8007e5e:	f000 fcad 	bl	80087bc <__lshift>
 8007e62:	4621      	mov	r1, r4
 8007e64:	4682      	mov	sl, r0
 8007e66:	f000 fd15 	bl	8008894 <__mcmp>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	dcb2      	bgt.n	8007dd4 <_dtoa_r+0xac4>
 8007e6e:	d102      	bne.n	8007e76 <_dtoa_r+0xb66>
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	07db      	lsls	r3, r3, #31
 8007e74:	d4ae      	bmi.n	8007dd4 <_dtoa_r+0xac4>
 8007e76:	463b      	mov	r3, r7
 8007e78:	461f      	mov	r7, r3
 8007e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e7e:	2a30      	cmp	r2, #48	; 0x30
 8007e80:	d0fa      	beq.n	8007e78 <_dtoa_r+0xb68>
 8007e82:	e6fb      	b.n	8007c7c <_dtoa_r+0x96c>
 8007e84:	9a08      	ldr	r2, [sp, #32]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d1a5      	bne.n	8007dd6 <_dtoa_r+0xac6>
 8007e8a:	2331      	movs	r3, #49	; 0x31
 8007e8c:	f109 0901 	add.w	r9, r9, #1
 8007e90:	7013      	strb	r3, [r2, #0]
 8007e92:	e6f3      	b.n	8007c7c <_dtoa_r+0x96c>
 8007e94:	4b13      	ldr	r3, [pc, #76]	; (8007ee4 <_dtoa_r+0xbd4>)
 8007e96:	f7ff baa7 	b.w	80073e8 <_dtoa_r+0xd8>
 8007e9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f47f aa80 	bne.w	80073a2 <_dtoa_r+0x92>
 8007ea2:	4b11      	ldr	r3, [pc, #68]	; (8007ee8 <_dtoa_r+0xbd8>)
 8007ea4:	f7ff baa0 	b.w	80073e8 <_dtoa_r+0xd8>
 8007ea8:	f1bb 0f00 	cmp.w	fp, #0
 8007eac:	dc03      	bgt.n	8007eb6 <_dtoa_r+0xba6>
 8007eae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	f73f aecc 	bgt.w	8007c4e <_dtoa_r+0x93e>
 8007eb6:	9f08      	ldr	r7, [sp, #32]
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4650      	mov	r0, sl
 8007ebc:	f7ff f99a 	bl	80071f4 <quorem>
 8007ec0:	9a08      	ldr	r2, [sp, #32]
 8007ec2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007ec6:	f807 3b01 	strb.w	r3, [r7], #1
 8007eca:	1aba      	subs	r2, r7, r2
 8007ecc:	4593      	cmp	fp, r2
 8007ece:	ddb9      	ble.n	8007e44 <_dtoa_r+0xb34>
 8007ed0:	4651      	mov	r1, sl
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	220a      	movs	r2, #10
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fac4 	bl	8008464 <__multadd>
 8007edc:	4682      	mov	sl, r0
 8007ede:	e7eb      	b.n	8007eb8 <_dtoa_r+0xba8>
 8007ee0:	0800a75e 	.word	0x0800a75e
 8007ee4:	0800a941 	.word	0x0800a941
 8007ee8:	0800a6db 	.word	0x0800a6db

08007eec <__sflush_r>:
 8007eec:	898a      	ldrh	r2, [r1, #12]
 8007eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	0710      	lsls	r0, r2, #28
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	d458      	bmi.n	8007fac <__sflush_r+0xc0>
 8007efa:	684b      	ldr	r3, [r1, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dc05      	bgt.n	8007f0c <__sflush_r+0x20>
 8007f00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dc02      	bgt.n	8007f0c <__sflush_r+0x20>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	d0f9      	beq.n	8007f06 <__sflush_r+0x1a>
 8007f12:	2300      	movs	r3, #0
 8007f14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f18:	682f      	ldr	r7, [r5, #0]
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	d032      	beq.n	8007f84 <__sflush_r+0x98>
 8007f1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	075a      	lsls	r2, r3, #29
 8007f24:	d505      	bpl.n	8007f32 <__sflush_r+0x46>
 8007f26:	6863      	ldr	r3, [r4, #4]
 8007f28:	1ac0      	subs	r0, r0, r3
 8007f2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f2c:	b10b      	cbz	r3, 8007f32 <__sflush_r+0x46>
 8007f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f30:	1ac0      	subs	r0, r0, r3
 8007f32:	2300      	movs	r3, #0
 8007f34:	4602      	mov	r2, r0
 8007f36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f38:	4628      	mov	r0, r5
 8007f3a:	6a21      	ldr	r1, [r4, #32]
 8007f3c:	47b0      	blx	r6
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	d106      	bne.n	8007f52 <__sflush_r+0x66>
 8007f44:	6829      	ldr	r1, [r5, #0]
 8007f46:	291d      	cmp	r1, #29
 8007f48:	d82c      	bhi.n	8007fa4 <__sflush_r+0xb8>
 8007f4a:	4a2a      	ldr	r2, [pc, #168]	; (8007ff4 <__sflush_r+0x108>)
 8007f4c:	40ca      	lsrs	r2, r1
 8007f4e:	07d6      	lsls	r6, r2, #31
 8007f50:	d528      	bpl.n	8007fa4 <__sflush_r+0xb8>
 8007f52:	2200      	movs	r2, #0
 8007f54:	6062      	str	r2, [r4, #4]
 8007f56:	6922      	ldr	r2, [r4, #16]
 8007f58:	04d9      	lsls	r1, r3, #19
 8007f5a:	6022      	str	r2, [r4, #0]
 8007f5c:	d504      	bpl.n	8007f68 <__sflush_r+0x7c>
 8007f5e:	1c42      	adds	r2, r0, #1
 8007f60:	d101      	bne.n	8007f66 <__sflush_r+0x7a>
 8007f62:	682b      	ldr	r3, [r5, #0]
 8007f64:	b903      	cbnz	r3, 8007f68 <__sflush_r+0x7c>
 8007f66:	6560      	str	r0, [r4, #84]	; 0x54
 8007f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f6a:	602f      	str	r7, [r5, #0]
 8007f6c:	2900      	cmp	r1, #0
 8007f6e:	d0ca      	beq.n	8007f06 <__sflush_r+0x1a>
 8007f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f74:	4299      	cmp	r1, r3
 8007f76:	d002      	beq.n	8007f7e <__sflush_r+0x92>
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 fda1 	bl	8008ac0 <_free_r>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	6360      	str	r0, [r4, #52]	; 0x34
 8007f82:	e7c1      	b.n	8007f08 <__sflush_r+0x1c>
 8007f84:	6a21      	ldr	r1, [r4, #32]
 8007f86:	2301      	movs	r3, #1
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b0      	blx	r6
 8007f8c:	1c41      	adds	r1, r0, #1
 8007f8e:	d1c7      	bne.n	8007f20 <__sflush_r+0x34>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0c4      	beq.n	8007f20 <__sflush_r+0x34>
 8007f96:	2b1d      	cmp	r3, #29
 8007f98:	d001      	beq.n	8007f9e <__sflush_r+0xb2>
 8007f9a:	2b16      	cmp	r3, #22
 8007f9c:	d101      	bne.n	8007fa2 <__sflush_r+0xb6>
 8007f9e:	602f      	str	r7, [r5, #0]
 8007fa0:	e7b1      	b.n	8007f06 <__sflush_r+0x1a>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	e7ad      	b.n	8007f08 <__sflush_r+0x1c>
 8007fac:	690f      	ldr	r7, [r1, #16]
 8007fae:	2f00      	cmp	r7, #0
 8007fb0:	d0a9      	beq.n	8007f06 <__sflush_r+0x1a>
 8007fb2:	0793      	lsls	r3, r2, #30
 8007fb4:	bf18      	it	ne
 8007fb6:	2300      	movne	r3, #0
 8007fb8:	680e      	ldr	r6, [r1, #0]
 8007fba:	bf08      	it	eq
 8007fbc:	694b      	ldreq	r3, [r1, #20]
 8007fbe:	eba6 0807 	sub.w	r8, r6, r7
 8007fc2:	600f      	str	r7, [r1, #0]
 8007fc4:	608b      	str	r3, [r1, #8]
 8007fc6:	f1b8 0f00 	cmp.w	r8, #0
 8007fca:	dd9c      	ble.n	8007f06 <__sflush_r+0x1a>
 8007fcc:	4643      	mov	r3, r8
 8007fce:	463a      	mov	r2, r7
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	6a21      	ldr	r1, [r4, #32]
 8007fd4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fd6:	47b0      	blx	r6
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	dc06      	bgt.n	8007fea <__sflush_r+0xfe>
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	e78e      	b.n	8007f08 <__sflush_r+0x1c>
 8007fea:	4407      	add	r7, r0
 8007fec:	eba8 0800 	sub.w	r8, r8, r0
 8007ff0:	e7e9      	b.n	8007fc6 <__sflush_r+0xda>
 8007ff2:	bf00      	nop
 8007ff4:	20400001 	.word	0x20400001

08007ff8 <_fflush_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	690b      	ldr	r3, [r1, #16]
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	b913      	cbnz	r3, 8008008 <_fflush_r+0x10>
 8008002:	2500      	movs	r5, #0
 8008004:	4628      	mov	r0, r5
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	b118      	cbz	r0, 8008012 <_fflush_r+0x1a>
 800800a:	6983      	ldr	r3, [r0, #24]
 800800c:	b90b      	cbnz	r3, 8008012 <_fflush_r+0x1a>
 800800e:	f000 f887 	bl	8008120 <__sinit>
 8008012:	4b14      	ldr	r3, [pc, #80]	; (8008064 <_fflush_r+0x6c>)
 8008014:	429c      	cmp	r4, r3
 8008016:	d11b      	bne.n	8008050 <_fflush_r+0x58>
 8008018:	686c      	ldr	r4, [r5, #4]
 800801a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0ef      	beq.n	8008002 <_fflush_r+0xa>
 8008022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008024:	07d0      	lsls	r0, r2, #31
 8008026:	d404      	bmi.n	8008032 <_fflush_r+0x3a>
 8008028:	0599      	lsls	r1, r3, #22
 800802a:	d402      	bmi.n	8008032 <_fflush_r+0x3a>
 800802c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802e:	f000 f91a 	bl	8008266 <__retarget_lock_acquire_recursive>
 8008032:	4628      	mov	r0, r5
 8008034:	4621      	mov	r1, r4
 8008036:	f7ff ff59 	bl	8007eec <__sflush_r>
 800803a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800803c:	4605      	mov	r5, r0
 800803e:	07da      	lsls	r2, r3, #31
 8008040:	d4e0      	bmi.n	8008004 <_fflush_r+0xc>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	059b      	lsls	r3, r3, #22
 8008046:	d4dd      	bmi.n	8008004 <_fflush_r+0xc>
 8008048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800804a:	f000 f90d 	bl	8008268 <__retarget_lock_release_recursive>
 800804e:	e7d9      	b.n	8008004 <_fflush_r+0xc>
 8008050:	4b05      	ldr	r3, [pc, #20]	; (8008068 <_fflush_r+0x70>)
 8008052:	429c      	cmp	r4, r3
 8008054:	d101      	bne.n	800805a <_fflush_r+0x62>
 8008056:	68ac      	ldr	r4, [r5, #8]
 8008058:	e7df      	b.n	800801a <_fflush_r+0x22>
 800805a:	4b04      	ldr	r3, [pc, #16]	; (800806c <_fflush_r+0x74>)
 800805c:	429c      	cmp	r4, r3
 800805e:	bf08      	it	eq
 8008060:	68ec      	ldreq	r4, [r5, #12]
 8008062:	e7da      	b.n	800801a <_fflush_r+0x22>
 8008064:	0800a790 	.word	0x0800a790
 8008068:	0800a7b0 	.word	0x0800a7b0
 800806c:	0800a770 	.word	0x0800a770

08008070 <std>:
 8008070:	2300      	movs	r3, #0
 8008072:	b510      	push	{r4, lr}
 8008074:	4604      	mov	r4, r0
 8008076:	e9c0 3300 	strd	r3, r3, [r0]
 800807a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800807e:	6083      	str	r3, [r0, #8]
 8008080:	8181      	strh	r1, [r0, #12]
 8008082:	6643      	str	r3, [r0, #100]	; 0x64
 8008084:	81c2      	strh	r2, [r0, #14]
 8008086:	6183      	str	r3, [r0, #24]
 8008088:	4619      	mov	r1, r3
 800808a:	2208      	movs	r2, #8
 800808c:	305c      	adds	r0, #92	; 0x5c
 800808e:	f7fe f993 	bl	80063b8 <memset>
 8008092:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <std+0x38>)
 8008094:	6224      	str	r4, [r4, #32]
 8008096:	6263      	str	r3, [r4, #36]	; 0x24
 8008098:	4b04      	ldr	r3, [pc, #16]	; (80080ac <std+0x3c>)
 800809a:	62a3      	str	r3, [r4, #40]	; 0x28
 800809c:	4b04      	ldr	r3, [pc, #16]	; (80080b0 <std+0x40>)
 800809e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080a0:	4b04      	ldr	r3, [pc, #16]	; (80080b4 <std+0x44>)
 80080a2:	6323      	str	r3, [r4, #48]	; 0x30
 80080a4:	bd10      	pop	{r4, pc}
 80080a6:	bf00      	nop
 80080a8:	08006e39 	.word	0x08006e39
 80080ac:	08006e5f 	.word	0x08006e5f
 80080b0:	08006e97 	.word	0x08006e97
 80080b4:	08006ebb 	.word	0x08006ebb

080080b8 <_cleanup_r>:
 80080b8:	4901      	ldr	r1, [pc, #4]	; (80080c0 <_cleanup_r+0x8>)
 80080ba:	f000 b8af 	b.w	800821c <_fwalk_reent>
 80080be:	bf00      	nop
 80080c0:	08007ff9 	.word	0x08007ff9

080080c4 <__sfmoreglue>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	2568      	movs	r5, #104	; 0x68
 80080c8:	1e4a      	subs	r2, r1, #1
 80080ca:	4355      	muls	r5, r2
 80080cc:	460e      	mov	r6, r1
 80080ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080d2:	f000 fd41 	bl	8008b58 <_malloc_r>
 80080d6:	4604      	mov	r4, r0
 80080d8:	b140      	cbz	r0, 80080ec <__sfmoreglue+0x28>
 80080da:	2100      	movs	r1, #0
 80080dc:	e9c0 1600 	strd	r1, r6, [r0]
 80080e0:	300c      	adds	r0, #12
 80080e2:	60a0      	str	r0, [r4, #8]
 80080e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080e8:	f7fe f966 	bl	80063b8 <memset>
 80080ec:	4620      	mov	r0, r4
 80080ee:	bd70      	pop	{r4, r5, r6, pc}

080080f0 <__sfp_lock_acquire>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__sfp_lock_acquire+0x8>)
 80080f2:	f000 b8b8 	b.w	8008266 <__retarget_lock_acquire_recursive>
 80080f6:	bf00      	nop
 80080f8:	200006f0 	.word	0x200006f0

080080fc <__sfp_lock_release>:
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <__sfp_lock_release+0x8>)
 80080fe:	f000 b8b3 	b.w	8008268 <__retarget_lock_release_recursive>
 8008102:	bf00      	nop
 8008104:	200006f0 	.word	0x200006f0

08008108 <__sinit_lock_acquire>:
 8008108:	4801      	ldr	r0, [pc, #4]	; (8008110 <__sinit_lock_acquire+0x8>)
 800810a:	f000 b8ac 	b.w	8008266 <__retarget_lock_acquire_recursive>
 800810e:	bf00      	nop
 8008110:	200006eb 	.word	0x200006eb

08008114 <__sinit_lock_release>:
 8008114:	4801      	ldr	r0, [pc, #4]	; (800811c <__sinit_lock_release+0x8>)
 8008116:	f000 b8a7 	b.w	8008268 <__retarget_lock_release_recursive>
 800811a:	bf00      	nop
 800811c:	200006eb 	.word	0x200006eb

08008120 <__sinit>:
 8008120:	b510      	push	{r4, lr}
 8008122:	4604      	mov	r4, r0
 8008124:	f7ff fff0 	bl	8008108 <__sinit_lock_acquire>
 8008128:	69a3      	ldr	r3, [r4, #24]
 800812a:	b11b      	cbz	r3, 8008134 <__sinit+0x14>
 800812c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008130:	f7ff bff0 	b.w	8008114 <__sinit_lock_release>
 8008134:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008138:	6523      	str	r3, [r4, #80]	; 0x50
 800813a:	4b13      	ldr	r3, [pc, #76]	; (8008188 <__sinit+0x68>)
 800813c:	4a13      	ldr	r2, [pc, #76]	; (800818c <__sinit+0x6c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	62a2      	str	r2, [r4, #40]	; 0x28
 8008142:	42a3      	cmp	r3, r4
 8008144:	bf08      	it	eq
 8008146:	2301      	moveq	r3, #1
 8008148:	4620      	mov	r0, r4
 800814a:	bf08      	it	eq
 800814c:	61a3      	streq	r3, [r4, #24]
 800814e:	f000 f81f 	bl	8008190 <__sfp>
 8008152:	6060      	str	r0, [r4, #4]
 8008154:	4620      	mov	r0, r4
 8008156:	f000 f81b 	bl	8008190 <__sfp>
 800815a:	60a0      	str	r0, [r4, #8]
 800815c:	4620      	mov	r0, r4
 800815e:	f000 f817 	bl	8008190 <__sfp>
 8008162:	2200      	movs	r2, #0
 8008164:	2104      	movs	r1, #4
 8008166:	60e0      	str	r0, [r4, #12]
 8008168:	6860      	ldr	r0, [r4, #4]
 800816a:	f7ff ff81 	bl	8008070 <std>
 800816e:	2201      	movs	r2, #1
 8008170:	2109      	movs	r1, #9
 8008172:	68a0      	ldr	r0, [r4, #8]
 8008174:	f7ff ff7c 	bl	8008070 <std>
 8008178:	2202      	movs	r2, #2
 800817a:	2112      	movs	r1, #18
 800817c:	68e0      	ldr	r0, [r4, #12]
 800817e:	f7ff ff77 	bl	8008070 <std>
 8008182:	2301      	movs	r3, #1
 8008184:	61a3      	str	r3, [r4, #24]
 8008186:	e7d1      	b.n	800812c <__sinit+0xc>
 8008188:	0800a5a4 	.word	0x0800a5a4
 800818c:	080080b9 	.word	0x080080b9

08008190 <__sfp>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	4607      	mov	r7, r0
 8008194:	f7ff ffac 	bl	80080f0 <__sfp_lock_acquire>
 8008198:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <__sfp+0x84>)
 800819a:	681e      	ldr	r6, [r3, #0]
 800819c:	69b3      	ldr	r3, [r6, #24]
 800819e:	b913      	cbnz	r3, 80081a6 <__sfp+0x16>
 80081a0:	4630      	mov	r0, r6
 80081a2:	f7ff ffbd 	bl	8008120 <__sinit>
 80081a6:	3648      	adds	r6, #72	; 0x48
 80081a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	d503      	bpl.n	80081b8 <__sfp+0x28>
 80081b0:	6833      	ldr	r3, [r6, #0]
 80081b2:	b30b      	cbz	r3, 80081f8 <__sfp+0x68>
 80081b4:	6836      	ldr	r6, [r6, #0]
 80081b6:	e7f7      	b.n	80081a8 <__sfp+0x18>
 80081b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081bc:	b9d5      	cbnz	r5, 80081f4 <__sfp+0x64>
 80081be:	4b16      	ldr	r3, [pc, #88]	; (8008218 <__sfp+0x88>)
 80081c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081c4:	60e3      	str	r3, [r4, #12]
 80081c6:	6665      	str	r5, [r4, #100]	; 0x64
 80081c8:	f000 f84c 	bl	8008264 <__retarget_lock_init_recursive>
 80081cc:	f7ff ff96 	bl	80080fc <__sfp_lock_release>
 80081d0:	2208      	movs	r2, #8
 80081d2:	4629      	mov	r1, r5
 80081d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081dc:	6025      	str	r5, [r4, #0]
 80081de:	61a5      	str	r5, [r4, #24]
 80081e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081e4:	f7fe f8e8 	bl	80063b8 <memset>
 80081e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081f0:	4620      	mov	r0, r4
 80081f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081f4:	3468      	adds	r4, #104	; 0x68
 80081f6:	e7d9      	b.n	80081ac <__sfp+0x1c>
 80081f8:	2104      	movs	r1, #4
 80081fa:	4638      	mov	r0, r7
 80081fc:	f7ff ff62 	bl	80080c4 <__sfmoreglue>
 8008200:	4604      	mov	r4, r0
 8008202:	6030      	str	r0, [r6, #0]
 8008204:	2800      	cmp	r0, #0
 8008206:	d1d5      	bne.n	80081b4 <__sfp+0x24>
 8008208:	f7ff ff78 	bl	80080fc <__sfp_lock_release>
 800820c:	230c      	movs	r3, #12
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	e7ee      	b.n	80081f0 <__sfp+0x60>
 8008212:	bf00      	nop
 8008214:	0800a5a4 	.word	0x0800a5a4
 8008218:	ffff0001 	.word	0xffff0001

0800821c <_fwalk_reent>:
 800821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008220:	4606      	mov	r6, r0
 8008222:	4688      	mov	r8, r1
 8008224:	2700      	movs	r7, #0
 8008226:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800822a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800822e:	f1b9 0901 	subs.w	r9, r9, #1
 8008232:	d505      	bpl.n	8008240 <_fwalk_reent+0x24>
 8008234:	6824      	ldr	r4, [r4, #0]
 8008236:	2c00      	cmp	r4, #0
 8008238:	d1f7      	bne.n	800822a <_fwalk_reent+0xe>
 800823a:	4638      	mov	r0, r7
 800823c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008240:	89ab      	ldrh	r3, [r5, #12]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d907      	bls.n	8008256 <_fwalk_reent+0x3a>
 8008246:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800824a:	3301      	adds	r3, #1
 800824c:	d003      	beq.n	8008256 <_fwalk_reent+0x3a>
 800824e:	4629      	mov	r1, r5
 8008250:	4630      	mov	r0, r6
 8008252:	47c0      	blx	r8
 8008254:	4307      	orrs	r7, r0
 8008256:	3568      	adds	r5, #104	; 0x68
 8008258:	e7e9      	b.n	800822e <_fwalk_reent+0x12>
	...

0800825c <_localeconv_r>:
 800825c:	4800      	ldr	r0, [pc, #0]	; (8008260 <_localeconv_r+0x4>)
 800825e:	4770      	bx	lr
 8008260:	200001b0 	.word	0x200001b0

08008264 <__retarget_lock_init_recursive>:
 8008264:	4770      	bx	lr

08008266 <__retarget_lock_acquire_recursive>:
 8008266:	4770      	bx	lr

08008268 <__retarget_lock_release_recursive>:
 8008268:	4770      	bx	lr
	...

0800826c <_lseek_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	4611      	mov	r1, r2
 8008274:	2200      	movs	r2, #0
 8008276:	4d05      	ldr	r5, [pc, #20]	; (800828c <_lseek_r+0x20>)
 8008278:	602a      	str	r2, [r5, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	f7fb f860 	bl	8003340 <_lseek>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_lseek_r+0x1e>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_lseek_r+0x1e>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	200006f4 	.word	0x200006f4

08008290 <__swhatbuf_r>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	460e      	mov	r6, r1
 8008294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008298:	4614      	mov	r4, r2
 800829a:	2900      	cmp	r1, #0
 800829c:	461d      	mov	r5, r3
 800829e:	b096      	sub	sp, #88	; 0x58
 80082a0:	da07      	bge.n	80082b2 <__swhatbuf_r+0x22>
 80082a2:	2300      	movs	r3, #0
 80082a4:	602b      	str	r3, [r5, #0]
 80082a6:	89b3      	ldrh	r3, [r6, #12]
 80082a8:	061a      	lsls	r2, r3, #24
 80082aa:	d410      	bmi.n	80082ce <__swhatbuf_r+0x3e>
 80082ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082b0:	e00e      	b.n	80082d0 <__swhatbuf_r+0x40>
 80082b2:	466a      	mov	r2, sp
 80082b4:	f001 fbbe 	bl	8009a34 <_fstat_r>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	dbf2      	blt.n	80082a2 <__swhatbuf_r+0x12>
 80082bc:	9a01      	ldr	r2, [sp, #4]
 80082be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082c6:	425a      	negs	r2, r3
 80082c8:	415a      	adcs	r2, r3
 80082ca:	602a      	str	r2, [r5, #0]
 80082cc:	e7ee      	b.n	80082ac <__swhatbuf_r+0x1c>
 80082ce:	2340      	movs	r3, #64	; 0x40
 80082d0:	2000      	movs	r0, #0
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	b016      	add	sp, #88	; 0x58
 80082d6:	bd70      	pop	{r4, r5, r6, pc}

080082d8 <__smakebuf_r>:
 80082d8:	898b      	ldrh	r3, [r1, #12]
 80082da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082dc:	079d      	lsls	r5, r3, #30
 80082de:	4606      	mov	r6, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	d507      	bpl.n	80082f4 <__smakebuf_r+0x1c>
 80082e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	6123      	str	r3, [r4, #16]
 80082ec:	2301      	movs	r3, #1
 80082ee:	6163      	str	r3, [r4, #20]
 80082f0:	b002      	add	sp, #8
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	466a      	mov	r2, sp
 80082f6:	ab01      	add	r3, sp, #4
 80082f8:	f7ff ffca 	bl	8008290 <__swhatbuf_r>
 80082fc:	9900      	ldr	r1, [sp, #0]
 80082fe:	4605      	mov	r5, r0
 8008300:	4630      	mov	r0, r6
 8008302:	f000 fc29 	bl	8008b58 <_malloc_r>
 8008306:	b948      	cbnz	r0, 800831c <__smakebuf_r+0x44>
 8008308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830c:	059a      	lsls	r2, r3, #22
 800830e:	d4ef      	bmi.n	80082f0 <__smakebuf_r+0x18>
 8008310:	f023 0303 	bic.w	r3, r3, #3
 8008314:	f043 0302 	orr.w	r3, r3, #2
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	e7e3      	b.n	80082e4 <__smakebuf_r+0xc>
 800831c:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <__smakebuf_r+0x7c>)
 800831e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	6020      	str	r0, [r4, #0]
 8008324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008328:	81a3      	strh	r3, [r4, #12]
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	6120      	str	r0, [r4, #16]
 800832e:	6163      	str	r3, [r4, #20]
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	b15b      	cbz	r3, 800834c <__smakebuf_r+0x74>
 8008334:	4630      	mov	r0, r6
 8008336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800833a:	f001 fb8d 	bl	8009a58 <_isatty_r>
 800833e:	b128      	cbz	r0, 800834c <__smakebuf_r+0x74>
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	f023 0303 	bic.w	r3, r3, #3
 8008346:	f043 0301 	orr.w	r3, r3, #1
 800834a:	81a3      	strh	r3, [r4, #12]
 800834c:	89a0      	ldrh	r0, [r4, #12]
 800834e:	4305      	orrs	r5, r0
 8008350:	81a5      	strh	r5, [r4, #12]
 8008352:	e7cd      	b.n	80082f0 <__smakebuf_r+0x18>
 8008354:	080080b9 	.word	0x080080b9

08008358 <malloc>:
 8008358:	4b02      	ldr	r3, [pc, #8]	; (8008364 <malloc+0xc>)
 800835a:	4601      	mov	r1, r0
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	f000 bbfb 	b.w	8008b58 <_malloc_r>
 8008362:	bf00      	nop
 8008364:	2000005c 	.word	0x2000005c

08008368 <memchr>:
 8008368:	4603      	mov	r3, r0
 800836a:	b510      	push	{r4, lr}
 800836c:	b2c9      	uxtb	r1, r1
 800836e:	4402      	add	r2, r0
 8008370:	4293      	cmp	r3, r2
 8008372:	4618      	mov	r0, r3
 8008374:	d101      	bne.n	800837a <memchr+0x12>
 8008376:	2000      	movs	r0, #0
 8008378:	e003      	b.n	8008382 <memchr+0x1a>
 800837a:	7804      	ldrb	r4, [r0, #0]
 800837c:	3301      	adds	r3, #1
 800837e:	428c      	cmp	r4, r1
 8008380:	d1f6      	bne.n	8008370 <memchr+0x8>
 8008382:	bd10      	pop	{r4, pc}

08008384 <memcpy>:
 8008384:	440a      	add	r2, r1
 8008386:	4291      	cmp	r1, r2
 8008388:	f100 33ff 	add.w	r3, r0, #4294967295
 800838c:	d100      	bne.n	8008390 <memcpy+0xc>
 800838e:	4770      	bx	lr
 8008390:	b510      	push	{r4, lr}
 8008392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008396:	4291      	cmp	r1, r2
 8008398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800839c:	d1f9      	bne.n	8008392 <memcpy+0xe>
 800839e:	bd10      	pop	{r4, pc}

080083a0 <_Balloc>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083a4:	4604      	mov	r4, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	b976      	cbnz	r6, 80083c8 <_Balloc+0x28>
 80083aa:	2010      	movs	r0, #16
 80083ac:	f7ff ffd4 	bl	8008358 <malloc>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6260      	str	r0, [r4, #36]	; 0x24
 80083b4:	b920      	cbnz	r0, 80083c0 <_Balloc+0x20>
 80083b6:	2166      	movs	r1, #102	; 0x66
 80083b8:	4b17      	ldr	r3, [pc, #92]	; (8008418 <_Balloc+0x78>)
 80083ba:	4818      	ldr	r0, [pc, #96]	; (800841c <_Balloc+0x7c>)
 80083bc:	f001 fb0a 	bl	80099d4 <__assert_func>
 80083c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083c4:	6006      	str	r6, [r0, #0]
 80083c6:	60c6      	str	r6, [r0, #12]
 80083c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083ca:	68f3      	ldr	r3, [r6, #12]
 80083cc:	b183      	cbz	r3, 80083f0 <_Balloc+0x50>
 80083ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083d6:	b9b8      	cbnz	r0, 8008408 <_Balloc+0x68>
 80083d8:	2101      	movs	r1, #1
 80083da:	fa01 f605 	lsl.w	r6, r1, r5
 80083de:	1d72      	adds	r2, r6, #5
 80083e0:	4620      	mov	r0, r4
 80083e2:	0092      	lsls	r2, r2, #2
 80083e4:	f000 fb5e 	bl	8008aa4 <_calloc_r>
 80083e8:	b160      	cbz	r0, 8008404 <_Balloc+0x64>
 80083ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083ee:	e00e      	b.n	800840e <_Balloc+0x6e>
 80083f0:	2221      	movs	r2, #33	; 0x21
 80083f2:	2104      	movs	r1, #4
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 fb55 	bl	8008aa4 <_calloc_r>
 80083fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083fc:	60f0      	str	r0, [r6, #12]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e4      	bne.n	80083ce <_Balloc+0x2e>
 8008404:	2000      	movs	r0, #0
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	6802      	ldr	r2, [r0, #0]
 800840a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800840e:	2300      	movs	r3, #0
 8008410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008414:	e7f7      	b.n	8008406 <_Balloc+0x66>
 8008416:	bf00      	nop
 8008418:	0800a6e8 	.word	0x0800a6e8
 800841c:	0800a7d0 	.word	0x0800a7d0

08008420 <_Bfree>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008424:	4605      	mov	r5, r0
 8008426:	460c      	mov	r4, r1
 8008428:	b976      	cbnz	r6, 8008448 <_Bfree+0x28>
 800842a:	2010      	movs	r0, #16
 800842c:	f7ff ff94 	bl	8008358 <malloc>
 8008430:	4602      	mov	r2, r0
 8008432:	6268      	str	r0, [r5, #36]	; 0x24
 8008434:	b920      	cbnz	r0, 8008440 <_Bfree+0x20>
 8008436:	218a      	movs	r1, #138	; 0x8a
 8008438:	4b08      	ldr	r3, [pc, #32]	; (800845c <_Bfree+0x3c>)
 800843a:	4809      	ldr	r0, [pc, #36]	; (8008460 <_Bfree+0x40>)
 800843c:	f001 faca 	bl	80099d4 <__assert_func>
 8008440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008444:	6006      	str	r6, [r0, #0]
 8008446:	60c6      	str	r6, [r0, #12]
 8008448:	b13c      	cbz	r4, 800845a <_Bfree+0x3a>
 800844a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800844c:	6862      	ldr	r2, [r4, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008454:	6021      	str	r1, [r4, #0]
 8008456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	0800a6e8 	.word	0x0800a6e8
 8008460:	0800a7d0 	.word	0x0800a7d0

08008464 <__multadd>:
 8008464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008468:	4698      	mov	r8, r3
 800846a:	460c      	mov	r4, r1
 800846c:	2300      	movs	r3, #0
 800846e:	690e      	ldr	r6, [r1, #16]
 8008470:	4607      	mov	r7, r0
 8008472:	f101 0014 	add.w	r0, r1, #20
 8008476:	6805      	ldr	r5, [r0, #0]
 8008478:	3301      	adds	r3, #1
 800847a:	b2a9      	uxth	r1, r5
 800847c:	fb02 8101 	mla	r1, r2, r1, r8
 8008480:	0c2d      	lsrs	r5, r5, #16
 8008482:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008486:	fb02 c505 	mla	r5, r2, r5, ip
 800848a:	b289      	uxth	r1, r1
 800848c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008490:	429e      	cmp	r6, r3
 8008492:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008496:	f840 1b04 	str.w	r1, [r0], #4
 800849a:	dcec      	bgt.n	8008476 <__multadd+0x12>
 800849c:	f1b8 0f00 	cmp.w	r8, #0
 80084a0:	d022      	beq.n	80084e8 <__multadd+0x84>
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	42b3      	cmp	r3, r6
 80084a6:	dc19      	bgt.n	80084dc <__multadd+0x78>
 80084a8:	6861      	ldr	r1, [r4, #4]
 80084aa:	4638      	mov	r0, r7
 80084ac:	3101      	adds	r1, #1
 80084ae:	f7ff ff77 	bl	80083a0 <_Balloc>
 80084b2:	4605      	mov	r5, r0
 80084b4:	b928      	cbnz	r0, 80084c2 <__multadd+0x5e>
 80084b6:	4602      	mov	r2, r0
 80084b8:	21b5      	movs	r1, #181	; 0xb5
 80084ba:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <__multadd+0x8c>)
 80084bc:	480d      	ldr	r0, [pc, #52]	; (80084f4 <__multadd+0x90>)
 80084be:	f001 fa89 	bl	80099d4 <__assert_func>
 80084c2:	6922      	ldr	r2, [r4, #16]
 80084c4:	f104 010c 	add.w	r1, r4, #12
 80084c8:	3202      	adds	r2, #2
 80084ca:	0092      	lsls	r2, r2, #2
 80084cc:	300c      	adds	r0, #12
 80084ce:	f7ff ff59 	bl	8008384 <memcpy>
 80084d2:	4621      	mov	r1, r4
 80084d4:	4638      	mov	r0, r7
 80084d6:	f7ff ffa3 	bl	8008420 <_Bfree>
 80084da:	462c      	mov	r4, r5
 80084dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80084e0:	3601      	adds	r6, #1
 80084e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80084e6:	6126      	str	r6, [r4, #16]
 80084e8:	4620      	mov	r0, r4
 80084ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ee:	bf00      	nop
 80084f0:	0800a75e 	.word	0x0800a75e
 80084f4:	0800a7d0 	.word	0x0800a7d0

080084f8 <__hi0bits>:
 80084f8:	0c02      	lsrs	r2, r0, #16
 80084fa:	0412      	lsls	r2, r2, #16
 80084fc:	4603      	mov	r3, r0
 80084fe:	b9ca      	cbnz	r2, 8008534 <__hi0bits+0x3c>
 8008500:	0403      	lsls	r3, r0, #16
 8008502:	2010      	movs	r0, #16
 8008504:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008508:	bf04      	itt	eq
 800850a:	021b      	lsleq	r3, r3, #8
 800850c:	3008      	addeq	r0, #8
 800850e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008512:	bf04      	itt	eq
 8008514:	011b      	lsleq	r3, r3, #4
 8008516:	3004      	addeq	r0, #4
 8008518:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800851c:	bf04      	itt	eq
 800851e:	009b      	lsleq	r3, r3, #2
 8008520:	3002      	addeq	r0, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	db05      	blt.n	8008532 <__hi0bits+0x3a>
 8008526:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800852a:	f100 0001 	add.w	r0, r0, #1
 800852e:	bf08      	it	eq
 8008530:	2020      	moveq	r0, #32
 8008532:	4770      	bx	lr
 8008534:	2000      	movs	r0, #0
 8008536:	e7e5      	b.n	8008504 <__hi0bits+0xc>

08008538 <__lo0bits>:
 8008538:	6803      	ldr	r3, [r0, #0]
 800853a:	4602      	mov	r2, r0
 800853c:	f013 0007 	ands.w	r0, r3, #7
 8008540:	d00b      	beq.n	800855a <__lo0bits+0x22>
 8008542:	07d9      	lsls	r1, r3, #31
 8008544:	d422      	bmi.n	800858c <__lo0bits+0x54>
 8008546:	0798      	lsls	r0, r3, #30
 8008548:	bf49      	itett	mi
 800854a:	085b      	lsrmi	r3, r3, #1
 800854c:	089b      	lsrpl	r3, r3, #2
 800854e:	2001      	movmi	r0, #1
 8008550:	6013      	strmi	r3, [r2, #0]
 8008552:	bf5c      	itt	pl
 8008554:	2002      	movpl	r0, #2
 8008556:	6013      	strpl	r3, [r2, #0]
 8008558:	4770      	bx	lr
 800855a:	b299      	uxth	r1, r3
 800855c:	b909      	cbnz	r1, 8008562 <__lo0bits+0x2a>
 800855e:	2010      	movs	r0, #16
 8008560:	0c1b      	lsrs	r3, r3, #16
 8008562:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008566:	bf04      	itt	eq
 8008568:	0a1b      	lsreq	r3, r3, #8
 800856a:	3008      	addeq	r0, #8
 800856c:	0719      	lsls	r1, r3, #28
 800856e:	bf04      	itt	eq
 8008570:	091b      	lsreq	r3, r3, #4
 8008572:	3004      	addeq	r0, #4
 8008574:	0799      	lsls	r1, r3, #30
 8008576:	bf04      	itt	eq
 8008578:	089b      	lsreq	r3, r3, #2
 800857a:	3002      	addeq	r0, #2
 800857c:	07d9      	lsls	r1, r3, #31
 800857e:	d403      	bmi.n	8008588 <__lo0bits+0x50>
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	f100 0001 	add.w	r0, r0, #1
 8008586:	d003      	beq.n	8008590 <__lo0bits+0x58>
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	4770      	bx	lr
 800858c:	2000      	movs	r0, #0
 800858e:	4770      	bx	lr
 8008590:	2020      	movs	r0, #32
 8008592:	4770      	bx	lr

08008594 <__i2b>:
 8008594:	b510      	push	{r4, lr}
 8008596:	460c      	mov	r4, r1
 8008598:	2101      	movs	r1, #1
 800859a:	f7ff ff01 	bl	80083a0 <_Balloc>
 800859e:	4602      	mov	r2, r0
 80085a0:	b928      	cbnz	r0, 80085ae <__i2b+0x1a>
 80085a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80085a6:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <__i2b+0x24>)
 80085a8:	4804      	ldr	r0, [pc, #16]	; (80085bc <__i2b+0x28>)
 80085aa:	f001 fa13 	bl	80099d4 <__assert_func>
 80085ae:	2301      	movs	r3, #1
 80085b0:	6144      	str	r4, [r0, #20]
 80085b2:	6103      	str	r3, [r0, #16]
 80085b4:	bd10      	pop	{r4, pc}
 80085b6:	bf00      	nop
 80085b8:	0800a75e 	.word	0x0800a75e
 80085bc:	0800a7d0 	.word	0x0800a7d0

080085c0 <__multiply>:
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	4614      	mov	r4, r2
 80085c6:	690a      	ldr	r2, [r1, #16]
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	460d      	mov	r5, r1
 80085cc:	429a      	cmp	r2, r3
 80085ce:	bfbe      	ittt	lt
 80085d0:	460b      	movlt	r3, r1
 80085d2:	4625      	movlt	r5, r4
 80085d4:	461c      	movlt	r4, r3
 80085d6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80085da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80085de:	68ab      	ldr	r3, [r5, #8]
 80085e0:	6869      	ldr	r1, [r5, #4]
 80085e2:	eb0a 0709 	add.w	r7, sl, r9
 80085e6:	42bb      	cmp	r3, r7
 80085e8:	b085      	sub	sp, #20
 80085ea:	bfb8      	it	lt
 80085ec:	3101      	addlt	r1, #1
 80085ee:	f7ff fed7 	bl	80083a0 <_Balloc>
 80085f2:	b930      	cbnz	r0, 8008602 <__multiply+0x42>
 80085f4:	4602      	mov	r2, r0
 80085f6:	f240 115d 	movw	r1, #349	; 0x15d
 80085fa:	4b41      	ldr	r3, [pc, #260]	; (8008700 <__multiply+0x140>)
 80085fc:	4841      	ldr	r0, [pc, #260]	; (8008704 <__multiply+0x144>)
 80085fe:	f001 f9e9 	bl	80099d4 <__assert_func>
 8008602:	f100 0614 	add.w	r6, r0, #20
 8008606:	4633      	mov	r3, r6
 8008608:	2200      	movs	r2, #0
 800860a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800860e:	4543      	cmp	r3, r8
 8008610:	d31e      	bcc.n	8008650 <__multiply+0x90>
 8008612:	f105 0c14 	add.w	ip, r5, #20
 8008616:	f104 0314 	add.w	r3, r4, #20
 800861a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800861e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008622:	9202      	str	r2, [sp, #8]
 8008624:	ebac 0205 	sub.w	r2, ip, r5
 8008628:	3a15      	subs	r2, #21
 800862a:	f022 0203 	bic.w	r2, r2, #3
 800862e:	3204      	adds	r2, #4
 8008630:	f105 0115 	add.w	r1, r5, #21
 8008634:	458c      	cmp	ip, r1
 8008636:	bf38      	it	cc
 8008638:	2204      	movcc	r2, #4
 800863a:	9201      	str	r2, [sp, #4]
 800863c:	9a02      	ldr	r2, [sp, #8]
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	429a      	cmp	r2, r3
 8008642:	d808      	bhi.n	8008656 <__multiply+0x96>
 8008644:	2f00      	cmp	r7, #0
 8008646:	dc55      	bgt.n	80086f4 <__multiply+0x134>
 8008648:	6107      	str	r7, [r0, #16]
 800864a:	b005      	add	sp, #20
 800864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008650:	f843 2b04 	str.w	r2, [r3], #4
 8008654:	e7db      	b.n	800860e <__multiply+0x4e>
 8008656:	f8b3 a000 	ldrh.w	sl, [r3]
 800865a:	f1ba 0f00 	cmp.w	sl, #0
 800865e:	d020      	beq.n	80086a2 <__multiply+0xe2>
 8008660:	46b1      	mov	r9, r6
 8008662:	2200      	movs	r2, #0
 8008664:	f105 0e14 	add.w	lr, r5, #20
 8008668:	f85e 4b04 	ldr.w	r4, [lr], #4
 800866c:	f8d9 b000 	ldr.w	fp, [r9]
 8008670:	b2a1      	uxth	r1, r4
 8008672:	fa1f fb8b 	uxth.w	fp, fp
 8008676:	fb0a b101 	mla	r1, sl, r1, fp
 800867a:	4411      	add	r1, r2
 800867c:	f8d9 2000 	ldr.w	r2, [r9]
 8008680:	0c24      	lsrs	r4, r4, #16
 8008682:	0c12      	lsrs	r2, r2, #16
 8008684:	fb0a 2404 	mla	r4, sl, r4, r2
 8008688:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800868c:	b289      	uxth	r1, r1
 800868e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008692:	45f4      	cmp	ip, lr
 8008694:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008698:	f849 1b04 	str.w	r1, [r9], #4
 800869c:	d8e4      	bhi.n	8008668 <__multiply+0xa8>
 800869e:	9901      	ldr	r1, [sp, #4]
 80086a0:	5072      	str	r2, [r6, r1]
 80086a2:	9a03      	ldr	r2, [sp, #12]
 80086a4:	3304      	adds	r3, #4
 80086a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086aa:	f1b9 0f00 	cmp.w	r9, #0
 80086ae:	d01f      	beq.n	80086f0 <__multiply+0x130>
 80086b0:	46b6      	mov	lr, r6
 80086b2:	f04f 0a00 	mov.w	sl, #0
 80086b6:	6834      	ldr	r4, [r6, #0]
 80086b8:	f105 0114 	add.w	r1, r5, #20
 80086bc:	880a      	ldrh	r2, [r1, #0]
 80086be:	f8be b002 	ldrh.w	fp, [lr, #2]
 80086c2:	b2a4      	uxth	r4, r4
 80086c4:	fb09 b202 	mla	r2, r9, r2, fp
 80086c8:	4492      	add	sl, r2
 80086ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80086ce:	f84e 4b04 	str.w	r4, [lr], #4
 80086d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80086d6:	f8be 2000 	ldrh.w	r2, [lr]
 80086da:	0c24      	lsrs	r4, r4, #16
 80086dc:	fb09 2404 	mla	r4, r9, r4, r2
 80086e0:	458c      	cmp	ip, r1
 80086e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80086e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086ea:	d8e7      	bhi.n	80086bc <__multiply+0xfc>
 80086ec:	9a01      	ldr	r2, [sp, #4]
 80086ee:	50b4      	str	r4, [r6, r2]
 80086f0:	3604      	adds	r6, #4
 80086f2:	e7a3      	b.n	800863c <__multiply+0x7c>
 80086f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1a5      	bne.n	8008648 <__multiply+0x88>
 80086fc:	3f01      	subs	r7, #1
 80086fe:	e7a1      	b.n	8008644 <__multiply+0x84>
 8008700:	0800a75e 	.word	0x0800a75e
 8008704:	0800a7d0 	.word	0x0800a7d0

08008708 <__pow5mult>:
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	4615      	mov	r5, r2
 800870e:	f012 0203 	ands.w	r2, r2, #3
 8008712:	4606      	mov	r6, r0
 8008714:	460f      	mov	r7, r1
 8008716:	d007      	beq.n	8008728 <__pow5mult+0x20>
 8008718:	4c25      	ldr	r4, [pc, #148]	; (80087b0 <__pow5mult+0xa8>)
 800871a:	3a01      	subs	r2, #1
 800871c:	2300      	movs	r3, #0
 800871e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008722:	f7ff fe9f 	bl	8008464 <__multadd>
 8008726:	4607      	mov	r7, r0
 8008728:	10ad      	asrs	r5, r5, #2
 800872a:	d03d      	beq.n	80087a8 <__pow5mult+0xa0>
 800872c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800872e:	b97c      	cbnz	r4, 8008750 <__pow5mult+0x48>
 8008730:	2010      	movs	r0, #16
 8008732:	f7ff fe11 	bl	8008358 <malloc>
 8008736:	4602      	mov	r2, r0
 8008738:	6270      	str	r0, [r6, #36]	; 0x24
 800873a:	b928      	cbnz	r0, 8008748 <__pow5mult+0x40>
 800873c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008740:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <__pow5mult+0xac>)
 8008742:	481d      	ldr	r0, [pc, #116]	; (80087b8 <__pow5mult+0xb0>)
 8008744:	f001 f946 	bl	80099d4 <__assert_func>
 8008748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800874c:	6004      	str	r4, [r0, #0]
 800874e:	60c4      	str	r4, [r0, #12]
 8008750:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008758:	b94c      	cbnz	r4, 800876e <__pow5mult+0x66>
 800875a:	f240 2171 	movw	r1, #625	; 0x271
 800875e:	4630      	mov	r0, r6
 8008760:	f7ff ff18 	bl	8008594 <__i2b>
 8008764:	2300      	movs	r3, #0
 8008766:	4604      	mov	r4, r0
 8008768:	f8c8 0008 	str.w	r0, [r8, #8]
 800876c:	6003      	str	r3, [r0, #0]
 800876e:	f04f 0900 	mov.w	r9, #0
 8008772:	07eb      	lsls	r3, r5, #31
 8008774:	d50a      	bpl.n	800878c <__pow5mult+0x84>
 8008776:	4639      	mov	r1, r7
 8008778:	4622      	mov	r2, r4
 800877a:	4630      	mov	r0, r6
 800877c:	f7ff ff20 	bl	80085c0 <__multiply>
 8008780:	4680      	mov	r8, r0
 8008782:	4639      	mov	r1, r7
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff fe4b 	bl	8008420 <_Bfree>
 800878a:	4647      	mov	r7, r8
 800878c:	106d      	asrs	r5, r5, #1
 800878e:	d00b      	beq.n	80087a8 <__pow5mult+0xa0>
 8008790:	6820      	ldr	r0, [r4, #0]
 8008792:	b938      	cbnz	r0, 80087a4 <__pow5mult+0x9c>
 8008794:	4622      	mov	r2, r4
 8008796:	4621      	mov	r1, r4
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff ff11 	bl	80085c0 <__multiply>
 800879e:	6020      	str	r0, [r4, #0]
 80087a0:	f8c0 9000 	str.w	r9, [r0]
 80087a4:	4604      	mov	r4, r0
 80087a6:	e7e4      	b.n	8008772 <__pow5mult+0x6a>
 80087a8:	4638      	mov	r0, r7
 80087aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ae:	bf00      	nop
 80087b0:	0800a920 	.word	0x0800a920
 80087b4:	0800a6e8 	.word	0x0800a6e8
 80087b8:	0800a7d0 	.word	0x0800a7d0

080087bc <__lshift>:
 80087bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	4607      	mov	r7, r0
 80087c4:	4691      	mov	r9, r2
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	6849      	ldr	r1, [r1, #4]
 80087ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087ce:	68a3      	ldr	r3, [r4, #8]
 80087d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087d4:	f108 0601 	add.w	r6, r8, #1
 80087d8:	42b3      	cmp	r3, r6
 80087da:	db0b      	blt.n	80087f4 <__lshift+0x38>
 80087dc:	4638      	mov	r0, r7
 80087de:	f7ff fddf 	bl	80083a0 <_Balloc>
 80087e2:	4605      	mov	r5, r0
 80087e4:	b948      	cbnz	r0, 80087fa <__lshift+0x3e>
 80087e6:	4602      	mov	r2, r0
 80087e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087ec:	4b27      	ldr	r3, [pc, #156]	; (800888c <__lshift+0xd0>)
 80087ee:	4828      	ldr	r0, [pc, #160]	; (8008890 <__lshift+0xd4>)
 80087f0:	f001 f8f0 	bl	80099d4 <__assert_func>
 80087f4:	3101      	adds	r1, #1
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	e7ee      	b.n	80087d8 <__lshift+0x1c>
 80087fa:	2300      	movs	r3, #0
 80087fc:	f100 0114 	add.w	r1, r0, #20
 8008800:	f100 0210 	add.w	r2, r0, #16
 8008804:	4618      	mov	r0, r3
 8008806:	4553      	cmp	r3, sl
 8008808:	db33      	blt.n	8008872 <__lshift+0xb6>
 800880a:	6920      	ldr	r0, [r4, #16]
 800880c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008810:	f104 0314 	add.w	r3, r4, #20
 8008814:	f019 091f 	ands.w	r9, r9, #31
 8008818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800881c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008820:	d02b      	beq.n	800887a <__lshift+0xbe>
 8008822:	468a      	mov	sl, r1
 8008824:	2200      	movs	r2, #0
 8008826:	f1c9 0e20 	rsb	lr, r9, #32
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	fa00 f009 	lsl.w	r0, r0, r9
 8008830:	4302      	orrs	r2, r0
 8008832:	f84a 2b04 	str.w	r2, [sl], #4
 8008836:	f853 2b04 	ldr.w	r2, [r3], #4
 800883a:	459c      	cmp	ip, r3
 800883c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008840:	d8f3      	bhi.n	800882a <__lshift+0x6e>
 8008842:	ebac 0304 	sub.w	r3, ip, r4
 8008846:	3b15      	subs	r3, #21
 8008848:	f023 0303 	bic.w	r3, r3, #3
 800884c:	3304      	adds	r3, #4
 800884e:	f104 0015 	add.w	r0, r4, #21
 8008852:	4584      	cmp	ip, r0
 8008854:	bf38      	it	cc
 8008856:	2304      	movcc	r3, #4
 8008858:	50ca      	str	r2, [r1, r3]
 800885a:	b10a      	cbz	r2, 8008860 <__lshift+0xa4>
 800885c:	f108 0602 	add.w	r6, r8, #2
 8008860:	3e01      	subs	r6, #1
 8008862:	4638      	mov	r0, r7
 8008864:	4621      	mov	r1, r4
 8008866:	612e      	str	r6, [r5, #16]
 8008868:	f7ff fdda 	bl	8008420 <_Bfree>
 800886c:	4628      	mov	r0, r5
 800886e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008872:	f842 0f04 	str.w	r0, [r2, #4]!
 8008876:	3301      	adds	r3, #1
 8008878:	e7c5      	b.n	8008806 <__lshift+0x4a>
 800887a:	3904      	subs	r1, #4
 800887c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008880:	459c      	cmp	ip, r3
 8008882:	f841 2f04 	str.w	r2, [r1, #4]!
 8008886:	d8f9      	bhi.n	800887c <__lshift+0xc0>
 8008888:	e7ea      	b.n	8008860 <__lshift+0xa4>
 800888a:	bf00      	nop
 800888c:	0800a75e 	.word	0x0800a75e
 8008890:	0800a7d0 	.word	0x0800a7d0

08008894 <__mcmp>:
 8008894:	4603      	mov	r3, r0
 8008896:	690a      	ldr	r2, [r1, #16]
 8008898:	6900      	ldr	r0, [r0, #16]
 800889a:	b530      	push	{r4, r5, lr}
 800889c:	1a80      	subs	r0, r0, r2
 800889e:	d10d      	bne.n	80088bc <__mcmp+0x28>
 80088a0:	3314      	adds	r3, #20
 80088a2:	3114      	adds	r1, #20
 80088a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088b4:	4295      	cmp	r5, r2
 80088b6:	d002      	beq.n	80088be <__mcmp+0x2a>
 80088b8:	d304      	bcc.n	80088c4 <__mcmp+0x30>
 80088ba:	2001      	movs	r0, #1
 80088bc:	bd30      	pop	{r4, r5, pc}
 80088be:	42a3      	cmp	r3, r4
 80088c0:	d3f4      	bcc.n	80088ac <__mcmp+0x18>
 80088c2:	e7fb      	b.n	80088bc <__mcmp+0x28>
 80088c4:	f04f 30ff 	mov.w	r0, #4294967295
 80088c8:	e7f8      	b.n	80088bc <__mcmp+0x28>
	...

080088cc <__mdiff>:
 80088cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	460c      	mov	r4, r1
 80088d2:	4606      	mov	r6, r0
 80088d4:	4611      	mov	r1, r2
 80088d6:	4620      	mov	r0, r4
 80088d8:	4692      	mov	sl, r2
 80088da:	f7ff ffdb 	bl	8008894 <__mcmp>
 80088de:	1e05      	subs	r5, r0, #0
 80088e0:	d111      	bne.n	8008906 <__mdiff+0x3a>
 80088e2:	4629      	mov	r1, r5
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff fd5b 	bl	80083a0 <_Balloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	b928      	cbnz	r0, 80088fa <__mdiff+0x2e>
 80088ee:	f240 2132 	movw	r1, #562	; 0x232
 80088f2:	4b3c      	ldr	r3, [pc, #240]	; (80089e4 <__mdiff+0x118>)
 80088f4:	483c      	ldr	r0, [pc, #240]	; (80089e8 <__mdiff+0x11c>)
 80088f6:	f001 f86d 	bl	80099d4 <__assert_func>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008900:	4610      	mov	r0, r2
 8008902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	bfa4      	itt	ge
 8008908:	4653      	movge	r3, sl
 800890a:	46a2      	movge	sl, r4
 800890c:	4630      	mov	r0, r6
 800890e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008912:	bfa6      	itte	ge
 8008914:	461c      	movge	r4, r3
 8008916:	2500      	movge	r5, #0
 8008918:	2501      	movlt	r5, #1
 800891a:	f7ff fd41 	bl	80083a0 <_Balloc>
 800891e:	4602      	mov	r2, r0
 8008920:	b918      	cbnz	r0, 800892a <__mdiff+0x5e>
 8008922:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008926:	4b2f      	ldr	r3, [pc, #188]	; (80089e4 <__mdiff+0x118>)
 8008928:	e7e4      	b.n	80088f4 <__mdiff+0x28>
 800892a:	f100 0814 	add.w	r8, r0, #20
 800892e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008932:	60c5      	str	r5, [r0, #12]
 8008934:	f04f 0c00 	mov.w	ip, #0
 8008938:	f10a 0514 	add.w	r5, sl, #20
 800893c:	f10a 0010 	add.w	r0, sl, #16
 8008940:	46c2      	mov	sl, r8
 8008942:	6926      	ldr	r6, [r4, #16]
 8008944:	f104 0914 	add.w	r9, r4, #20
 8008948:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800894c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008950:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008954:	f859 3b04 	ldr.w	r3, [r9], #4
 8008958:	fa1f f18b 	uxth.w	r1, fp
 800895c:	4461      	add	r1, ip
 800895e:	fa1f fc83 	uxth.w	ip, r3
 8008962:	0c1b      	lsrs	r3, r3, #16
 8008964:	eba1 010c 	sub.w	r1, r1, ip
 8008968:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800896c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008970:	b289      	uxth	r1, r1
 8008972:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008976:	454e      	cmp	r6, r9
 8008978:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800897c:	f84a 3b04 	str.w	r3, [sl], #4
 8008980:	d8e6      	bhi.n	8008950 <__mdiff+0x84>
 8008982:	1b33      	subs	r3, r6, r4
 8008984:	3b15      	subs	r3, #21
 8008986:	f023 0303 	bic.w	r3, r3, #3
 800898a:	3415      	adds	r4, #21
 800898c:	3304      	adds	r3, #4
 800898e:	42a6      	cmp	r6, r4
 8008990:	bf38      	it	cc
 8008992:	2304      	movcc	r3, #4
 8008994:	441d      	add	r5, r3
 8008996:	4443      	add	r3, r8
 8008998:	461e      	mov	r6, r3
 800899a:	462c      	mov	r4, r5
 800899c:	4574      	cmp	r4, lr
 800899e:	d30e      	bcc.n	80089be <__mdiff+0xf2>
 80089a0:	f10e 0103 	add.w	r1, lr, #3
 80089a4:	1b49      	subs	r1, r1, r5
 80089a6:	f021 0103 	bic.w	r1, r1, #3
 80089aa:	3d03      	subs	r5, #3
 80089ac:	45ae      	cmp	lr, r5
 80089ae:	bf38      	it	cc
 80089b0:	2100      	movcc	r1, #0
 80089b2:	4419      	add	r1, r3
 80089b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80089b8:	b18b      	cbz	r3, 80089de <__mdiff+0x112>
 80089ba:	6117      	str	r7, [r2, #16]
 80089bc:	e7a0      	b.n	8008900 <__mdiff+0x34>
 80089be:	f854 8b04 	ldr.w	r8, [r4], #4
 80089c2:	fa1f f188 	uxth.w	r1, r8
 80089c6:	4461      	add	r1, ip
 80089c8:	1408      	asrs	r0, r1, #16
 80089ca:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80089ce:	b289      	uxth	r1, r1
 80089d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089d8:	f846 1b04 	str.w	r1, [r6], #4
 80089dc:	e7de      	b.n	800899c <__mdiff+0xd0>
 80089de:	3f01      	subs	r7, #1
 80089e0:	e7e8      	b.n	80089b4 <__mdiff+0xe8>
 80089e2:	bf00      	nop
 80089e4:	0800a75e 	.word	0x0800a75e
 80089e8:	0800a7d0 	.word	0x0800a7d0

080089ec <__d2b>:
 80089ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80089f0:	2101      	movs	r1, #1
 80089f2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80089f6:	4690      	mov	r8, r2
 80089f8:	461d      	mov	r5, r3
 80089fa:	f7ff fcd1 	bl	80083a0 <_Balloc>
 80089fe:	4604      	mov	r4, r0
 8008a00:	b930      	cbnz	r0, 8008a10 <__d2b+0x24>
 8008a02:	4602      	mov	r2, r0
 8008a04:	f240 310a 	movw	r1, #778	; 0x30a
 8008a08:	4b24      	ldr	r3, [pc, #144]	; (8008a9c <__d2b+0xb0>)
 8008a0a:	4825      	ldr	r0, [pc, #148]	; (8008aa0 <__d2b+0xb4>)
 8008a0c:	f000 ffe2 	bl	80099d4 <__assert_func>
 8008a10:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008a14:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008a18:	bb2d      	cbnz	r5, 8008a66 <__d2b+0x7a>
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	f1b8 0300 	subs.w	r3, r8, #0
 8008a20:	d026      	beq.n	8008a70 <__d2b+0x84>
 8008a22:	4668      	mov	r0, sp
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	f7ff fd87 	bl	8008538 <__lo0bits>
 8008a2a:	9900      	ldr	r1, [sp, #0]
 8008a2c:	b1f0      	cbz	r0, 8008a6c <__d2b+0x80>
 8008a2e:	9a01      	ldr	r2, [sp, #4]
 8008a30:	f1c0 0320 	rsb	r3, r0, #32
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	40c2      	lsrs	r2, r0
 8008a3c:	6163      	str	r3, [r4, #20]
 8008a3e:	9201      	str	r2, [sp, #4]
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bf14      	ite	ne
 8008a46:	2102      	movne	r1, #2
 8008a48:	2101      	moveq	r1, #1
 8008a4a:	61a3      	str	r3, [r4, #24]
 8008a4c:	6121      	str	r1, [r4, #16]
 8008a4e:	b1c5      	cbz	r5, 8008a82 <__d2b+0x96>
 8008a50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a54:	4405      	add	r5, r0
 8008a56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a5a:	603d      	str	r5, [r7, #0]
 8008a5c:	6030      	str	r0, [r6, #0]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	b002      	add	sp, #8
 8008a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a6a:	e7d6      	b.n	8008a1a <__d2b+0x2e>
 8008a6c:	6161      	str	r1, [r4, #20]
 8008a6e:	e7e7      	b.n	8008a40 <__d2b+0x54>
 8008a70:	a801      	add	r0, sp, #4
 8008a72:	f7ff fd61 	bl	8008538 <__lo0bits>
 8008a76:	2101      	movs	r1, #1
 8008a78:	9b01      	ldr	r3, [sp, #4]
 8008a7a:	6121      	str	r1, [r4, #16]
 8008a7c:	6163      	str	r3, [r4, #20]
 8008a7e:	3020      	adds	r0, #32
 8008a80:	e7e5      	b.n	8008a4e <__d2b+0x62>
 8008a82:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008a86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a8a:	6038      	str	r0, [r7, #0]
 8008a8c:	6918      	ldr	r0, [r3, #16]
 8008a8e:	f7ff fd33 	bl	80084f8 <__hi0bits>
 8008a92:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008a96:	6031      	str	r1, [r6, #0]
 8008a98:	e7e1      	b.n	8008a5e <__d2b+0x72>
 8008a9a:	bf00      	nop
 8008a9c:	0800a75e 	.word	0x0800a75e
 8008aa0:	0800a7d0 	.word	0x0800a7d0

08008aa4 <_calloc_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	fb02 f501 	mul.w	r5, r2, r1
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f000 f854 	bl	8008b58 <_malloc_r>
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	b118      	cbz	r0, 8008abc <_calloc_r+0x18>
 8008ab4:	462a      	mov	r2, r5
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	f7fd fc7e 	bl	80063b8 <memset>
 8008abc:	4620      	mov	r0, r4
 8008abe:	bd38      	pop	{r3, r4, r5, pc}

08008ac0 <_free_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	d043      	beq.n	8008b50 <_free_r+0x90>
 8008ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008acc:	1f0c      	subs	r4, r1, #4
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bfb8      	it	lt
 8008ad2:	18e4      	addlt	r4, r4, r3
 8008ad4:	f000 fffc 	bl	8009ad0 <__malloc_lock>
 8008ad8:	4a1e      	ldr	r2, [pc, #120]	; (8008b54 <_free_r+0x94>)
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	4610      	mov	r0, r2
 8008ade:	b933      	cbnz	r3, 8008aee <_free_r+0x2e>
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	6014      	str	r4, [r2, #0]
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aea:	f000 bff7 	b.w	8009adc <__malloc_unlock>
 8008aee:	42a3      	cmp	r3, r4
 8008af0:	d90a      	bls.n	8008b08 <_free_r+0x48>
 8008af2:	6821      	ldr	r1, [r4, #0]
 8008af4:	1862      	adds	r2, r4, r1
 8008af6:	4293      	cmp	r3, r2
 8008af8:	bf01      	itttt	eq
 8008afa:	681a      	ldreq	r2, [r3, #0]
 8008afc:	685b      	ldreq	r3, [r3, #4]
 8008afe:	1852      	addeq	r2, r2, r1
 8008b00:	6022      	streq	r2, [r4, #0]
 8008b02:	6063      	str	r3, [r4, #4]
 8008b04:	6004      	str	r4, [r0, #0]
 8008b06:	e7ed      	b.n	8008ae4 <_free_r+0x24>
 8008b08:	461a      	mov	r2, r3
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	b10b      	cbz	r3, 8008b12 <_free_r+0x52>
 8008b0e:	42a3      	cmp	r3, r4
 8008b10:	d9fa      	bls.n	8008b08 <_free_r+0x48>
 8008b12:	6811      	ldr	r1, [r2, #0]
 8008b14:	1850      	adds	r0, r2, r1
 8008b16:	42a0      	cmp	r0, r4
 8008b18:	d10b      	bne.n	8008b32 <_free_r+0x72>
 8008b1a:	6820      	ldr	r0, [r4, #0]
 8008b1c:	4401      	add	r1, r0
 8008b1e:	1850      	adds	r0, r2, r1
 8008b20:	4283      	cmp	r3, r0
 8008b22:	6011      	str	r1, [r2, #0]
 8008b24:	d1de      	bne.n	8008ae4 <_free_r+0x24>
 8008b26:	6818      	ldr	r0, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	4401      	add	r1, r0
 8008b2c:	6011      	str	r1, [r2, #0]
 8008b2e:	6053      	str	r3, [r2, #4]
 8008b30:	e7d8      	b.n	8008ae4 <_free_r+0x24>
 8008b32:	d902      	bls.n	8008b3a <_free_r+0x7a>
 8008b34:	230c      	movs	r3, #12
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	e7d4      	b.n	8008ae4 <_free_r+0x24>
 8008b3a:	6820      	ldr	r0, [r4, #0]
 8008b3c:	1821      	adds	r1, r4, r0
 8008b3e:	428b      	cmp	r3, r1
 8008b40:	bf01      	itttt	eq
 8008b42:	6819      	ldreq	r1, [r3, #0]
 8008b44:	685b      	ldreq	r3, [r3, #4]
 8008b46:	1809      	addeq	r1, r1, r0
 8008b48:	6021      	streq	r1, [r4, #0]
 8008b4a:	6063      	str	r3, [r4, #4]
 8008b4c:	6054      	str	r4, [r2, #4]
 8008b4e:	e7c9      	b.n	8008ae4 <_free_r+0x24>
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	bf00      	nop
 8008b54:	200002f8 	.word	0x200002f8

08008b58 <_malloc_r>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	1ccd      	adds	r5, r1, #3
 8008b5c:	f025 0503 	bic.w	r5, r5, #3
 8008b60:	3508      	adds	r5, #8
 8008b62:	2d0c      	cmp	r5, #12
 8008b64:	bf38      	it	cc
 8008b66:	250c      	movcc	r5, #12
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	db01      	blt.n	8008b72 <_malloc_r+0x1a>
 8008b6e:	42a9      	cmp	r1, r5
 8008b70:	d903      	bls.n	8008b7a <_malloc_r+0x22>
 8008b72:	230c      	movs	r3, #12
 8008b74:	6033      	str	r3, [r6, #0]
 8008b76:	2000      	movs	r0, #0
 8008b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7a:	f000 ffa9 	bl	8009ad0 <__malloc_lock>
 8008b7e:	4921      	ldr	r1, [pc, #132]	; (8008c04 <_malloc_r+0xac>)
 8008b80:	680a      	ldr	r2, [r1, #0]
 8008b82:	4614      	mov	r4, r2
 8008b84:	b99c      	cbnz	r4, 8008bae <_malloc_r+0x56>
 8008b86:	4f20      	ldr	r7, [pc, #128]	; (8008c08 <_malloc_r+0xb0>)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	b923      	cbnz	r3, 8008b96 <_malloc_r+0x3e>
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f000 fe20 	bl	80097d4 <_sbrk_r>
 8008b94:	6038      	str	r0, [r7, #0]
 8008b96:	4629      	mov	r1, r5
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f000 fe1b 	bl	80097d4 <_sbrk_r>
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	d123      	bne.n	8008bea <_malloc_r+0x92>
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	6033      	str	r3, [r6, #0]
 8008ba8:	f000 ff98 	bl	8009adc <__malloc_unlock>
 8008bac:	e7e3      	b.n	8008b76 <_malloc_r+0x1e>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	1b5b      	subs	r3, r3, r5
 8008bb2:	d417      	bmi.n	8008be4 <_malloc_r+0x8c>
 8008bb4:	2b0b      	cmp	r3, #11
 8008bb6:	d903      	bls.n	8008bc0 <_malloc_r+0x68>
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	441c      	add	r4, r3
 8008bbc:	6025      	str	r5, [r4, #0]
 8008bbe:	e004      	b.n	8008bca <_malloc_r+0x72>
 8008bc0:	6863      	ldr	r3, [r4, #4]
 8008bc2:	42a2      	cmp	r2, r4
 8008bc4:	bf0c      	ite	eq
 8008bc6:	600b      	streq	r3, [r1, #0]
 8008bc8:	6053      	strne	r3, [r2, #4]
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 ff86 	bl	8009adc <__malloc_unlock>
 8008bd0:	f104 000b 	add.w	r0, r4, #11
 8008bd4:	1d23      	adds	r3, r4, #4
 8008bd6:	f020 0007 	bic.w	r0, r0, #7
 8008bda:	1ac2      	subs	r2, r0, r3
 8008bdc:	d0cc      	beq.n	8008b78 <_malloc_r+0x20>
 8008bde:	1a1b      	subs	r3, r3, r0
 8008be0:	50a3      	str	r3, [r4, r2]
 8008be2:	e7c9      	b.n	8008b78 <_malloc_r+0x20>
 8008be4:	4622      	mov	r2, r4
 8008be6:	6864      	ldr	r4, [r4, #4]
 8008be8:	e7cc      	b.n	8008b84 <_malloc_r+0x2c>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d0e3      	beq.n	8008bbc <_malloc_r+0x64>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f000 fdec 	bl	80097d4 <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d1dd      	bne.n	8008bbc <_malloc_r+0x64>
 8008c00:	e7cf      	b.n	8008ba2 <_malloc_r+0x4a>
 8008c02:	bf00      	nop
 8008c04:	200002f8 	.word	0x200002f8
 8008c08:	200002fc 	.word	0x200002fc

08008c0c <__ssputs_r>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	688e      	ldr	r6, [r1, #8]
 8008c12:	4682      	mov	sl, r0
 8008c14:	429e      	cmp	r6, r3
 8008c16:	460c      	mov	r4, r1
 8008c18:	4690      	mov	r8, r2
 8008c1a:	461f      	mov	r7, r3
 8008c1c:	d838      	bhi.n	8008c90 <__ssputs_r+0x84>
 8008c1e:	898a      	ldrh	r2, [r1, #12]
 8008c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c24:	d032      	beq.n	8008c8c <__ssputs_r+0x80>
 8008c26:	6825      	ldr	r5, [r4, #0]
 8008c28:	6909      	ldr	r1, [r1, #16]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	eba5 0901 	sub.w	r9, r5, r1
 8008c30:	6965      	ldr	r5, [r4, #20]
 8008c32:	444b      	add	r3, r9
 8008c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c3c:	106d      	asrs	r5, r5, #1
 8008c3e:	429d      	cmp	r5, r3
 8008c40:	bf38      	it	cc
 8008c42:	461d      	movcc	r5, r3
 8008c44:	0553      	lsls	r3, r2, #21
 8008c46:	d531      	bpl.n	8008cac <__ssputs_r+0xa0>
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7ff ff85 	bl	8008b58 <_malloc_r>
 8008c4e:	4606      	mov	r6, r0
 8008c50:	b950      	cbnz	r0, 8008c68 <__ssputs_r+0x5c>
 8008c52:	230c      	movs	r3, #12
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295
 8008c58:	f8ca 3000 	str.w	r3, [sl]
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	464a      	mov	r2, r9
 8008c6a:	6921      	ldr	r1, [r4, #16]
 8008c6c:	f7ff fb8a 	bl	8008384 <memcpy>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	6126      	str	r6, [r4, #16]
 8008c7e:	444e      	add	r6, r9
 8008c80:	6026      	str	r6, [r4, #0]
 8008c82:	463e      	mov	r6, r7
 8008c84:	6165      	str	r5, [r4, #20]
 8008c86:	eba5 0509 	sub.w	r5, r5, r9
 8008c8a:	60a5      	str	r5, [r4, #8]
 8008c8c:	42be      	cmp	r6, r7
 8008c8e:	d900      	bls.n	8008c92 <__ssputs_r+0x86>
 8008c90:	463e      	mov	r6, r7
 8008c92:	4632      	mov	r2, r6
 8008c94:	4641      	mov	r1, r8
 8008c96:	6820      	ldr	r0, [r4, #0]
 8008c98:	f000 ff00 	bl	8009a9c <memmove>
 8008c9c:	68a3      	ldr	r3, [r4, #8]
 8008c9e:	6822      	ldr	r2, [r4, #0]
 8008ca0:	1b9b      	subs	r3, r3, r6
 8008ca2:	4432      	add	r2, r6
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	60a3      	str	r3, [r4, #8]
 8008ca8:	6022      	str	r2, [r4, #0]
 8008caa:	e7db      	b.n	8008c64 <__ssputs_r+0x58>
 8008cac:	462a      	mov	r2, r5
 8008cae:	f000 ff1b 	bl	8009ae8 <_realloc_r>
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d1e1      	bne.n	8008c7c <__ssputs_r+0x70>
 8008cb8:	4650      	mov	r0, sl
 8008cba:	6921      	ldr	r1, [r4, #16]
 8008cbc:	f7ff ff00 	bl	8008ac0 <_free_r>
 8008cc0:	e7c7      	b.n	8008c52 <__ssputs_r+0x46>
	...

08008cc4 <_svfiprintf_r>:
 8008cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	4698      	mov	r8, r3
 8008cca:	898b      	ldrh	r3, [r1, #12]
 8008ccc:	4607      	mov	r7, r0
 8008cce:	061b      	lsls	r3, r3, #24
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	4614      	mov	r4, r2
 8008cd4:	b09d      	sub	sp, #116	; 0x74
 8008cd6:	d50e      	bpl.n	8008cf6 <_svfiprintf_r+0x32>
 8008cd8:	690b      	ldr	r3, [r1, #16]
 8008cda:	b963      	cbnz	r3, 8008cf6 <_svfiprintf_r+0x32>
 8008cdc:	2140      	movs	r1, #64	; 0x40
 8008cde:	f7ff ff3b 	bl	8008b58 <_malloc_r>
 8008ce2:	6028      	str	r0, [r5, #0]
 8008ce4:	6128      	str	r0, [r5, #16]
 8008ce6:	b920      	cbnz	r0, 8008cf2 <_svfiprintf_r+0x2e>
 8008ce8:	230c      	movs	r3, #12
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	e0d1      	b.n	8008e96 <_svfiprintf_r+0x1d2>
 8008cf2:	2340      	movs	r3, #64	; 0x40
 8008cf4:	616b      	str	r3, [r5, #20]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfa:	2320      	movs	r3, #32
 8008cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d00:	2330      	movs	r3, #48	; 0x30
 8008d02:	f04f 0901 	mov.w	r9, #1
 8008d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008eb0 <_svfiprintf_r+0x1ec>
 8008d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d12:	4623      	mov	r3, r4
 8008d14:	469a      	mov	sl, r3
 8008d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d1a:	b10a      	cbz	r2, 8008d20 <_svfiprintf_r+0x5c>
 8008d1c:	2a25      	cmp	r2, #37	; 0x25
 8008d1e:	d1f9      	bne.n	8008d14 <_svfiprintf_r+0x50>
 8008d20:	ebba 0b04 	subs.w	fp, sl, r4
 8008d24:	d00b      	beq.n	8008d3e <_svfiprintf_r+0x7a>
 8008d26:	465b      	mov	r3, fp
 8008d28:	4622      	mov	r2, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f7ff ff6d 	bl	8008c0c <__ssputs_r>
 8008d32:	3001      	adds	r0, #1
 8008d34:	f000 80aa 	beq.w	8008e8c <_svfiprintf_r+0x1c8>
 8008d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d3a:	445a      	add	r2, fp
 8008d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 80a2 	beq.w	8008e8c <_svfiprintf_r+0x1c8>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d52:	f10a 0a01 	add.w	sl, sl, #1
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	9307      	str	r3, [sp, #28]
 8008d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d60:	4654      	mov	r4, sl
 8008d62:	2205      	movs	r2, #5
 8008d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d68:	4851      	ldr	r0, [pc, #324]	; (8008eb0 <_svfiprintf_r+0x1ec>)
 8008d6a:	f7ff fafd 	bl	8008368 <memchr>
 8008d6e:	9a04      	ldr	r2, [sp, #16]
 8008d70:	b9d8      	cbnz	r0, 8008daa <_svfiprintf_r+0xe6>
 8008d72:	06d0      	lsls	r0, r2, #27
 8008d74:	bf44      	itt	mi
 8008d76:	2320      	movmi	r3, #32
 8008d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d7c:	0711      	lsls	r1, r2, #28
 8008d7e:	bf44      	itt	mi
 8008d80:	232b      	movmi	r3, #43	; 0x2b
 8008d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d86:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d8c:	d015      	beq.n	8008dba <_svfiprintf_r+0xf6>
 8008d8e:	4654      	mov	r4, sl
 8008d90:	2000      	movs	r0, #0
 8008d92:	f04f 0c0a 	mov.w	ip, #10
 8008d96:	9a07      	ldr	r2, [sp, #28]
 8008d98:	4621      	mov	r1, r4
 8008d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d9e:	3b30      	subs	r3, #48	; 0x30
 8008da0:	2b09      	cmp	r3, #9
 8008da2:	d94e      	bls.n	8008e42 <_svfiprintf_r+0x17e>
 8008da4:	b1b0      	cbz	r0, 8008dd4 <_svfiprintf_r+0x110>
 8008da6:	9207      	str	r2, [sp, #28]
 8008da8:	e014      	b.n	8008dd4 <_svfiprintf_r+0x110>
 8008daa:	eba0 0308 	sub.w	r3, r0, r8
 8008dae:	fa09 f303 	lsl.w	r3, r9, r3
 8008db2:	4313      	orrs	r3, r2
 8008db4:	46a2      	mov	sl, r4
 8008db6:	9304      	str	r3, [sp, #16]
 8008db8:	e7d2      	b.n	8008d60 <_svfiprintf_r+0x9c>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	1d19      	adds	r1, r3, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	9103      	str	r1, [sp, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfbb      	ittet	lt
 8008dc6:	425b      	neglt	r3, r3
 8008dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dcc:	9307      	strge	r3, [sp, #28]
 8008dce:	9307      	strlt	r3, [sp, #28]
 8008dd0:	bfb8      	it	lt
 8008dd2:	9204      	strlt	r2, [sp, #16]
 8008dd4:	7823      	ldrb	r3, [r4, #0]
 8008dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8008dd8:	d10c      	bne.n	8008df4 <_svfiprintf_r+0x130>
 8008dda:	7863      	ldrb	r3, [r4, #1]
 8008ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dde:	d135      	bne.n	8008e4c <_svfiprintf_r+0x188>
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	3402      	adds	r4, #2
 8008de4:	1d1a      	adds	r2, r3, #4
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	9203      	str	r2, [sp, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	bfb8      	it	lt
 8008dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8008df2:	9305      	str	r3, [sp, #20]
 8008df4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ec0 <_svfiprintf_r+0x1fc>
 8008df8:	2203      	movs	r2, #3
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	7821      	ldrb	r1, [r4, #0]
 8008dfe:	f7ff fab3 	bl	8008368 <memchr>
 8008e02:	b140      	cbz	r0, 8008e16 <_svfiprintf_r+0x152>
 8008e04:	2340      	movs	r3, #64	; 0x40
 8008e06:	eba0 000a 	sub.w	r0, r0, sl
 8008e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e0e:	9b04      	ldr	r3, [sp, #16]
 8008e10:	3401      	adds	r4, #1
 8008e12:	4303      	orrs	r3, r0
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1a:	2206      	movs	r2, #6
 8008e1c:	4825      	ldr	r0, [pc, #148]	; (8008eb4 <_svfiprintf_r+0x1f0>)
 8008e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e22:	f7ff faa1 	bl	8008368 <memchr>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d038      	beq.n	8008e9c <_svfiprintf_r+0x1d8>
 8008e2a:	4b23      	ldr	r3, [pc, #140]	; (8008eb8 <_svfiprintf_r+0x1f4>)
 8008e2c:	bb1b      	cbnz	r3, 8008e76 <_svfiprintf_r+0x1b2>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	3307      	adds	r3, #7
 8008e32:	f023 0307 	bic.w	r3, r3, #7
 8008e36:	3308      	adds	r3, #8
 8008e38:	9303      	str	r3, [sp, #12]
 8008e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3c:	4433      	add	r3, r6
 8008e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e40:	e767      	b.n	8008d12 <_svfiprintf_r+0x4e>
 8008e42:	460c      	mov	r4, r1
 8008e44:	2001      	movs	r0, #1
 8008e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e4a:	e7a5      	b.n	8008d98 <_svfiprintf_r+0xd4>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f04f 0c0a 	mov.w	ip, #10
 8008e52:	4619      	mov	r1, r3
 8008e54:	3401      	adds	r4, #1
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e5e:	3a30      	subs	r2, #48	; 0x30
 8008e60:	2a09      	cmp	r2, #9
 8008e62:	d903      	bls.n	8008e6c <_svfiprintf_r+0x1a8>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0c5      	beq.n	8008df4 <_svfiprintf_r+0x130>
 8008e68:	9105      	str	r1, [sp, #20]
 8008e6a:	e7c3      	b.n	8008df4 <_svfiprintf_r+0x130>
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	2301      	movs	r3, #1
 8008e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e74:	e7f0      	b.n	8008e58 <_svfiprintf_r+0x194>
 8008e76:	ab03      	add	r3, sp, #12
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	462a      	mov	r2, r5
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <_svfiprintf_r+0x1f8>)
 8008e80:	a904      	add	r1, sp, #16
 8008e82:	f7fd fb3f 	bl	8006504 <_printf_float>
 8008e86:	1c42      	adds	r2, r0, #1
 8008e88:	4606      	mov	r6, r0
 8008e8a:	d1d6      	bne.n	8008e3a <_svfiprintf_r+0x176>
 8008e8c:	89ab      	ldrh	r3, [r5, #12]
 8008e8e:	065b      	lsls	r3, r3, #25
 8008e90:	f53f af2c 	bmi.w	8008cec <_svfiprintf_r+0x28>
 8008e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e96:	b01d      	add	sp, #116	; 0x74
 8008e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	ab03      	add	r3, sp, #12
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <_svfiprintf_r+0x1f8>)
 8008ea6:	a904      	add	r1, sp, #16
 8008ea8:	f7fd fdc8 	bl	8006a3c <_printf_i>
 8008eac:	e7eb      	b.n	8008e86 <_svfiprintf_r+0x1c2>
 8008eae:	bf00      	nop
 8008eb0:	0800a92c 	.word	0x0800a92c
 8008eb4:	0800a936 	.word	0x0800a936
 8008eb8:	08006505 	.word	0x08006505
 8008ebc:	08008c0d 	.word	0x08008c0d
 8008ec0:	0800a932 	.word	0x0800a932

08008ec4 <_sungetc_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	1c4b      	adds	r3, r1, #1
 8008ec8:	4614      	mov	r4, r2
 8008eca:	d103      	bne.n	8008ed4 <_sungetc_r+0x10>
 8008ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	8993      	ldrh	r3, [r2, #12]
 8008ed6:	b2cd      	uxtb	r5, r1
 8008ed8:	f023 0320 	bic.w	r3, r3, #32
 8008edc:	8193      	strh	r3, [r2, #12]
 8008ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ee0:	6852      	ldr	r2, [r2, #4]
 8008ee2:	b18b      	cbz	r3, 8008f08 <_sungetc_r+0x44>
 8008ee4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	dd08      	ble.n	8008efc <_sungetc_r+0x38>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	1e5a      	subs	r2, r3, #1
 8008eee:	6022      	str	r2, [r4, #0]
 8008ef0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008ef4:	6863      	ldr	r3, [r4, #4]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	e7e9      	b.n	8008ed0 <_sungetc_r+0xc>
 8008efc:	4621      	mov	r1, r4
 8008efe:	f000 fd31 	bl	8009964 <__submore>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d0f1      	beq.n	8008eea <_sungetc_r+0x26>
 8008f06:	e7e1      	b.n	8008ecc <_sungetc_r+0x8>
 8008f08:	6921      	ldr	r1, [r4, #16]
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	b151      	cbz	r1, 8008f24 <_sungetc_r+0x60>
 8008f0e:	4299      	cmp	r1, r3
 8008f10:	d208      	bcs.n	8008f24 <_sungetc_r+0x60>
 8008f12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008f16:	42a9      	cmp	r1, r5
 8008f18:	d104      	bne.n	8008f24 <_sungetc_r+0x60>
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	3201      	adds	r2, #1
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	6062      	str	r2, [r4, #4]
 8008f22:	e7d5      	b.n	8008ed0 <_sungetc_r+0xc>
 8008f24:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f2e:	2303      	movs	r3, #3
 8008f30:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f32:	4623      	mov	r3, r4
 8008f34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e7dc      	b.n	8008ef8 <_sungetc_r+0x34>

08008f3e <__ssrefill_r>:
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	460c      	mov	r4, r1
 8008f42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f44:	b169      	cbz	r1, 8008f62 <__ssrefill_r+0x24>
 8008f46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f4a:	4299      	cmp	r1, r3
 8008f4c:	d001      	beq.n	8008f52 <__ssrefill_r+0x14>
 8008f4e:	f7ff fdb7 	bl	8008ac0 <_free_r>
 8008f52:	2000      	movs	r0, #0
 8008f54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f56:	6360      	str	r0, [r4, #52]	; 0x34
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	b113      	cbz	r3, 8008f62 <__ssrefill_r+0x24>
 8008f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	bd10      	pop	{r4, pc}
 8008f62:	6923      	ldr	r3, [r4, #16]
 8008f64:	f04f 30ff 	mov.w	r0, #4294967295
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6063      	str	r3, [r4, #4]
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f043 0320 	orr.w	r3, r3, #32
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	e7f3      	b.n	8008f60 <__ssrefill_r+0x22>

08008f78 <__ssvfiscanf_r>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4606      	mov	r6, r0
 8008f82:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008f86:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008f8a:	49b3      	ldr	r1, [pc, #716]	; (8009258 <__ssvfiscanf_r+0x2e0>)
 8008f8c:	f10d 0804 	add.w	r8, sp, #4
 8008f90:	91a0      	str	r1, [sp, #640]	; 0x280
 8008f92:	49b2      	ldr	r1, [pc, #712]	; (800925c <__ssvfiscanf_r+0x2e4>)
 8008f94:	4fb2      	ldr	r7, [pc, #712]	; (8009260 <__ssvfiscanf_r+0x2e8>)
 8008f96:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8009264 <__ssvfiscanf_r+0x2ec>
 8008f9a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008f9e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	f892 a000 	ldrb.w	sl, [r2]
 8008fa6:	f1ba 0f00 	cmp.w	sl, #0
 8008faa:	f000 8153 	beq.w	8009254 <__ssvfiscanf_r+0x2dc>
 8008fae:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008fb2:	1c55      	adds	r5, r2, #1
 8008fb4:	f013 0308 	ands.w	r3, r3, #8
 8008fb8:	d019      	beq.n	8008fee <__ssvfiscanf_r+0x76>
 8008fba:	6863      	ldr	r3, [r4, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dd0f      	ble.n	8008fe0 <__ssvfiscanf_r+0x68>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	781a      	ldrb	r2, [r3, #0]
 8008fc4:	5cba      	ldrb	r2, [r7, r2]
 8008fc6:	0712      	lsls	r2, r2, #28
 8008fc8:	d401      	bmi.n	8008fce <__ssvfiscanf_r+0x56>
 8008fca:	462a      	mov	r2, r5
 8008fcc:	e7e9      	b.n	8008fa2 <__ssvfiscanf_r+0x2a>
 8008fce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	3201      	adds	r2, #1
 8008fd4:	9245      	str	r2, [sp, #276]	; 0x114
 8008fd6:	6862      	ldr	r2, [r4, #4]
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	3a01      	subs	r2, #1
 8008fdc:	6062      	str	r2, [r4, #4]
 8008fde:	e7ec      	b.n	8008fba <__ssvfiscanf_r+0x42>
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008fe6:	4798      	blx	r3
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d0e9      	beq.n	8008fc0 <__ssvfiscanf_r+0x48>
 8008fec:	e7ed      	b.n	8008fca <__ssvfiscanf_r+0x52>
 8008fee:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008ff2:	f040 8086 	bne.w	8009102 <__ssvfiscanf_r+0x18a>
 8008ff6:	9341      	str	r3, [sp, #260]	; 0x104
 8008ff8:	9343      	str	r3, [sp, #268]	; 0x10c
 8008ffa:	7853      	ldrb	r3, [r2, #1]
 8008ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ffe:	bf04      	itt	eq
 8009000:	2310      	moveq	r3, #16
 8009002:	1c95      	addeq	r5, r2, #2
 8009004:	f04f 020a 	mov.w	r2, #10
 8009008:	bf08      	it	eq
 800900a:	9341      	streq	r3, [sp, #260]	; 0x104
 800900c:	46ab      	mov	fp, r5
 800900e:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009012:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009016:	2b09      	cmp	r3, #9
 8009018:	d91d      	bls.n	8009056 <__ssvfiscanf_r+0xde>
 800901a:	2203      	movs	r2, #3
 800901c:	4891      	ldr	r0, [pc, #580]	; (8009264 <__ssvfiscanf_r+0x2ec>)
 800901e:	f7ff f9a3 	bl	8008368 <memchr>
 8009022:	b140      	cbz	r0, 8009036 <__ssvfiscanf_r+0xbe>
 8009024:	2301      	movs	r3, #1
 8009026:	465d      	mov	r5, fp
 8009028:	eba0 0009 	sub.w	r0, r0, r9
 800902c:	fa03 f000 	lsl.w	r0, r3, r0
 8009030:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009032:	4318      	orrs	r0, r3
 8009034:	9041      	str	r0, [sp, #260]	; 0x104
 8009036:	f815 3b01 	ldrb.w	r3, [r5], #1
 800903a:	2b78      	cmp	r3, #120	; 0x78
 800903c:	d806      	bhi.n	800904c <__ssvfiscanf_r+0xd4>
 800903e:	2b57      	cmp	r3, #87	; 0x57
 8009040:	d810      	bhi.n	8009064 <__ssvfiscanf_r+0xec>
 8009042:	2b25      	cmp	r3, #37	; 0x25
 8009044:	d05d      	beq.n	8009102 <__ssvfiscanf_r+0x18a>
 8009046:	d857      	bhi.n	80090f8 <__ssvfiscanf_r+0x180>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d075      	beq.n	8009138 <__ssvfiscanf_r+0x1c0>
 800904c:	2303      	movs	r3, #3
 800904e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009050:	230a      	movs	r3, #10
 8009052:	9342      	str	r3, [sp, #264]	; 0x108
 8009054:	e082      	b.n	800915c <__ssvfiscanf_r+0x1e4>
 8009056:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009058:	465d      	mov	r5, fp
 800905a:	fb02 1303 	mla	r3, r2, r3, r1
 800905e:	3b30      	subs	r3, #48	; 0x30
 8009060:	9343      	str	r3, [sp, #268]	; 0x10c
 8009062:	e7d3      	b.n	800900c <__ssvfiscanf_r+0x94>
 8009064:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009068:	2a20      	cmp	r2, #32
 800906a:	d8ef      	bhi.n	800904c <__ssvfiscanf_r+0xd4>
 800906c:	a101      	add	r1, pc, #4	; (adr r1, 8009074 <__ssvfiscanf_r+0xfc>)
 800906e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009072:	bf00      	nop
 8009074:	08009147 	.word	0x08009147
 8009078:	0800904d 	.word	0x0800904d
 800907c:	0800904d 	.word	0x0800904d
 8009080:	080091a5 	.word	0x080091a5
 8009084:	0800904d 	.word	0x0800904d
 8009088:	0800904d 	.word	0x0800904d
 800908c:	0800904d 	.word	0x0800904d
 8009090:	0800904d 	.word	0x0800904d
 8009094:	0800904d 	.word	0x0800904d
 8009098:	0800904d 	.word	0x0800904d
 800909c:	0800904d 	.word	0x0800904d
 80090a0:	080091bb 	.word	0x080091bb
 80090a4:	08009191 	.word	0x08009191
 80090a8:	080090ff 	.word	0x080090ff
 80090ac:	080090ff 	.word	0x080090ff
 80090b0:	080090ff 	.word	0x080090ff
 80090b4:	0800904d 	.word	0x0800904d
 80090b8:	08009195 	.word	0x08009195
 80090bc:	0800904d 	.word	0x0800904d
 80090c0:	0800904d 	.word	0x0800904d
 80090c4:	0800904d 	.word	0x0800904d
 80090c8:	0800904d 	.word	0x0800904d
 80090cc:	080091cb 	.word	0x080091cb
 80090d0:	0800919d 	.word	0x0800919d
 80090d4:	0800913f 	.word	0x0800913f
 80090d8:	0800904d 	.word	0x0800904d
 80090dc:	0800904d 	.word	0x0800904d
 80090e0:	080091c7 	.word	0x080091c7
 80090e4:	0800904d 	.word	0x0800904d
 80090e8:	08009191 	.word	0x08009191
 80090ec:	0800904d 	.word	0x0800904d
 80090f0:	0800904d 	.word	0x0800904d
 80090f4:	08009147 	.word	0x08009147
 80090f8:	3b45      	subs	r3, #69	; 0x45
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d8a6      	bhi.n	800904c <__ssvfiscanf_r+0xd4>
 80090fe:	2305      	movs	r3, #5
 8009100:	e02b      	b.n	800915a <__ssvfiscanf_r+0x1e2>
 8009102:	6863      	ldr	r3, [r4, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	dd0d      	ble.n	8009124 <__ssvfiscanf_r+0x1ac>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	4552      	cmp	r2, sl
 800910e:	f040 80a1 	bne.w	8009254 <__ssvfiscanf_r+0x2dc>
 8009112:	3301      	adds	r3, #1
 8009114:	6862      	ldr	r2, [r4, #4]
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800911a:	3a01      	subs	r2, #1
 800911c:	3301      	adds	r3, #1
 800911e:	6062      	str	r2, [r4, #4]
 8009120:	9345      	str	r3, [sp, #276]	; 0x114
 8009122:	e752      	b.n	8008fca <__ssvfiscanf_r+0x52>
 8009124:	4621      	mov	r1, r4
 8009126:	4630      	mov	r0, r6
 8009128:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800912a:	4798      	blx	r3
 800912c:	2800      	cmp	r0, #0
 800912e:	d0eb      	beq.n	8009108 <__ssvfiscanf_r+0x190>
 8009130:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009132:	2800      	cmp	r0, #0
 8009134:	f040 8084 	bne.w	8009240 <__ssvfiscanf_r+0x2c8>
 8009138:	f04f 30ff 	mov.w	r0, #4294967295
 800913c:	e086      	b.n	800924c <__ssvfiscanf_r+0x2d4>
 800913e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009140:	f042 0220 	orr.w	r2, r2, #32
 8009144:	9241      	str	r2, [sp, #260]	; 0x104
 8009146:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800914c:	9241      	str	r2, [sp, #260]	; 0x104
 800914e:	2210      	movs	r2, #16
 8009150:	2b6f      	cmp	r3, #111	; 0x6f
 8009152:	bf34      	ite	cc
 8009154:	2303      	movcc	r3, #3
 8009156:	2304      	movcs	r3, #4
 8009158:	9242      	str	r2, [sp, #264]	; 0x108
 800915a:	9347      	str	r3, [sp, #284]	; 0x11c
 800915c:	6863      	ldr	r3, [r4, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	dd41      	ble.n	80091e6 <__ssvfiscanf_r+0x26e>
 8009162:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009164:	0659      	lsls	r1, r3, #25
 8009166:	d404      	bmi.n	8009172 <__ssvfiscanf_r+0x1fa>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	781a      	ldrb	r2, [r3, #0]
 800916c:	5cba      	ldrb	r2, [r7, r2]
 800916e:	0712      	lsls	r2, r2, #28
 8009170:	d440      	bmi.n	80091f4 <__ssvfiscanf_r+0x27c>
 8009172:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009174:	2b02      	cmp	r3, #2
 8009176:	dc4f      	bgt.n	8009218 <__ssvfiscanf_r+0x2a0>
 8009178:	466b      	mov	r3, sp
 800917a:	4622      	mov	r2, r4
 800917c:	4630      	mov	r0, r6
 800917e:	a941      	add	r1, sp, #260	; 0x104
 8009180:	f000 f9cc 	bl	800951c <_scanf_chars>
 8009184:	2801      	cmp	r0, #1
 8009186:	d065      	beq.n	8009254 <__ssvfiscanf_r+0x2dc>
 8009188:	2802      	cmp	r0, #2
 800918a:	f47f af1e 	bne.w	8008fca <__ssvfiscanf_r+0x52>
 800918e:	e7cf      	b.n	8009130 <__ssvfiscanf_r+0x1b8>
 8009190:	220a      	movs	r2, #10
 8009192:	e7dd      	b.n	8009150 <__ssvfiscanf_r+0x1d8>
 8009194:	2300      	movs	r3, #0
 8009196:	9342      	str	r3, [sp, #264]	; 0x108
 8009198:	2303      	movs	r3, #3
 800919a:	e7de      	b.n	800915a <__ssvfiscanf_r+0x1e2>
 800919c:	2308      	movs	r3, #8
 800919e:	9342      	str	r3, [sp, #264]	; 0x108
 80091a0:	2304      	movs	r3, #4
 80091a2:	e7da      	b.n	800915a <__ssvfiscanf_r+0x1e2>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4640      	mov	r0, r8
 80091a8:	f000 fb24 	bl	80097f4 <__sccl>
 80091ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091ae:	4605      	mov	r5, r0
 80091b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b4:	9341      	str	r3, [sp, #260]	; 0x104
 80091b6:	2301      	movs	r3, #1
 80091b8:	e7cf      	b.n	800915a <__ssvfiscanf_r+0x1e2>
 80091ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c0:	9341      	str	r3, [sp, #260]	; 0x104
 80091c2:	2300      	movs	r3, #0
 80091c4:	e7c9      	b.n	800915a <__ssvfiscanf_r+0x1e2>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e7c7      	b.n	800915a <__ssvfiscanf_r+0x1e2>
 80091ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80091cc:	06c3      	lsls	r3, r0, #27
 80091ce:	f53f aefc 	bmi.w	8008fca <__ssvfiscanf_r+0x52>
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80091d6:	1d19      	adds	r1, r3, #4
 80091d8:	9100      	str	r1, [sp, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	07c0      	lsls	r0, r0, #31
 80091de:	bf4c      	ite	mi
 80091e0:	801a      	strhmi	r2, [r3, #0]
 80091e2:	601a      	strpl	r2, [r3, #0]
 80091e4:	e6f1      	b.n	8008fca <__ssvfiscanf_r+0x52>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4630      	mov	r0, r6
 80091ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80091ec:	4798      	blx	r3
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0b7      	beq.n	8009162 <__ssvfiscanf_r+0x1ea>
 80091f2:	e79d      	b.n	8009130 <__ssvfiscanf_r+0x1b8>
 80091f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80091f6:	3201      	adds	r2, #1
 80091f8:	9245      	str	r2, [sp, #276]	; 0x114
 80091fa:	6862      	ldr	r2, [r4, #4]
 80091fc:	3a01      	subs	r2, #1
 80091fe:	2a00      	cmp	r2, #0
 8009200:	6062      	str	r2, [r4, #4]
 8009202:	dd02      	ble.n	800920a <__ssvfiscanf_r+0x292>
 8009204:	3301      	adds	r3, #1
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	e7ae      	b.n	8009168 <__ssvfiscanf_r+0x1f0>
 800920a:	4621      	mov	r1, r4
 800920c:	4630      	mov	r0, r6
 800920e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009210:	4798      	blx	r3
 8009212:	2800      	cmp	r0, #0
 8009214:	d0a8      	beq.n	8009168 <__ssvfiscanf_r+0x1f0>
 8009216:	e78b      	b.n	8009130 <__ssvfiscanf_r+0x1b8>
 8009218:	2b04      	cmp	r3, #4
 800921a:	dc06      	bgt.n	800922a <__ssvfiscanf_r+0x2b2>
 800921c:	466b      	mov	r3, sp
 800921e:	4622      	mov	r2, r4
 8009220:	4630      	mov	r0, r6
 8009222:	a941      	add	r1, sp, #260	; 0x104
 8009224:	f000 f9d2 	bl	80095cc <_scanf_i>
 8009228:	e7ac      	b.n	8009184 <__ssvfiscanf_r+0x20c>
 800922a:	4b0f      	ldr	r3, [pc, #60]	; (8009268 <__ssvfiscanf_r+0x2f0>)
 800922c:	2b00      	cmp	r3, #0
 800922e:	f43f aecc 	beq.w	8008fca <__ssvfiscanf_r+0x52>
 8009232:	466b      	mov	r3, sp
 8009234:	4622      	mov	r2, r4
 8009236:	4630      	mov	r0, r6
 8009238:	a941      	add	r1, sp, #260	; 0x104
 800923a:	f3af 8000 	nop.w
 800923e:	e7a1      	b.n	8009184 <__ssvfiscanf_r+0x20c>
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009246:	bf18      	it	ne
 8009248:	f04f 30ff 	movne.w	r0, #4294967295
 800924c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009254:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009256:	e7f9      	b.n	800924c <__ssvfiscanf_r+0x2d4>
 8009258:	08008ec5 	.word	0x08008ec5
 800925c:	08008f3f 	.word	0x08008f3f
 8009260:	0800a5db 	.word	0x0800a5db
 8009264:	0800a932 	.word	0x0800a932
 8009268:	00000000 	.word	0x00000000

0800926c <__sfputc_r>:
 800926c:	6893      	ldr	r3, [r2, #8]
 800926e:	b410      	push	{r4}
 8009270:	3b01      	subs	r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	6093      	str	r3, [r2, #8]
 8009276:	da07      	bge.n	8009288 <__sfputc_r+0x1c>
 8009278:	6994      	ldr	r4, [r2, #24]
 800927a:	42a3      	cmp	r3, r4
 800927c:	db01      	blt.n	8009282 <__sfputc_r+0x16>
 800927e:	290a      	cmp	r1, #10
 8009280:	d102      	bne.n	8009288 <__sfputc_r+0x1c>
 8009282:	bc10      	pop	{r4}
 8009284:	f7fd bed4 	b.w	8007030 <__swbuf_r>
 8009288:	6813      	ldr	r3, [r2, #0]
 800928a:	1c58      	adds	r0, r3, #1
 800928c:	6010      	str	r0, [r2, #0]
 800928e:	7019      	strb	r1, [r3, #0]
 8009290:	4608      	mov	r0, r1
 8009292:	bc10      	pop	{r4}
 8009294:	4770      	bx	lr

08009296 <__sfputs_r>:
 8009296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009298:	4606      	mov	r6, r0
 800929a:	460f      	mov	r7, r1
 800929c:	4614      	mov	r4, r2
 800929e:	18d5      	adds	r5, r2, r3
 80092a0:	42ac      	cmp	r4, r5
 80092a2:	d101      	bne.n	80092a8 <__sfputs_r+0x12>
 80092a4:	2000      	movs	r0, #0
 80092a6:	e007      	b.n	80092b8 <__sfputs_r+0x22>
 80092a8:	463a      	mov	r2, r7
 80092aa:	4630      	mov	r0, r6
 80092ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b0:	f7ff ffdc 	bl	800926c <__sfputc_r>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d1f3      	bne.n	80092a0 <__sfputs_r+0xa>
 80092b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092bc <_vfiprintf_r>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	460d      	mov	r5, r1
 80092c2:	4614      	mov	r4, r2
 80092c4:	4698      	mov	r8, r3
 80092c6:	4606      	mov	r6, r0
 80092c8:	b09d      	sub	sp, #116	; 0x74
 80092ca:	b118      	cbz	r0, 80092d4 <_vfiprintf_r+0x18>
 80092cc:	6983      	ldr	r3, [r0, #24]
 80092ce:	b90b      	cbnz	r3, 80092d4 <_vfiprintf_r+0x18>
 80092d0:	f7fe ff26 	bl	8008120 <__sinit>
 80092d4:	4b89      	ldr	r3, [pc, #548]	; (80094fc <_vfiprintf_r+0x240>)
 80092d6:	429d      	cmp	r5, r3
 80092d8:	d11b      	bne.n	8009312 <_vfiprintf_r+0x56>
 80092da:	6875      	ldr	r5, [r6, #4]
 80092dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092de:	07d9      	lsls	r1, r3, #31
 80092e0:	d405      	bmi.n	80092ee <_vfiprintf_r+0x32>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	059a      	lsls	r2, r3, #22
 80092e6:	d402      	bmi.n	80092ee <_vfiprintf_r+0x32>
 80092e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ea:	f7fe ffbc 	bl	8008266 <__retarget_lock_acquire_recursive>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	071b      	lsls	r3, r3, #28
 80092f2:	d501      	bpl.n	80092f8 <_vfiprintf_r+0x3c>
 80092f4:	692b      	ldr	r3, [r5, #16]
 80092f6:	b9eb      	cbnz	r3, 8009334 <_vfiprintf_r+0x78>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7fd fefc 	bl	80070f8 <__swsetup_r>
 8009300:	b1c0      	cbz	r0, 8009334 <_vfiprintf_r+0x78>
 8009302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009304:	07dc      	lsls	r4, r3, #31
 8009306:	d50e      	bpl.n	8009326 <_vfiprintf_r+0x6a>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	b01d      	add	sp, #116	; 0x74
 800930e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009312:	4b7b      	ldr	r3, [pc, #492]	; (8009500 <_vfiprintf_r+0x244>)
 8009314:	429d      	cmp	r5, r3
 8009316:	d101      	bne.n	800931c <_vfiprintf_r+0x60>
 8009318:	68b5      	ldr	r5, [r6, #8]
 800931a:	e7df      	b.n	80092dc <_vfiprintf_r+0x20>
 800931c:	4b79      	ldr	r3, [pc, #484]	; (8009504 <_vfiprintf_r+0x248>)
 800931e:	429d      	cmp	r5, r3
 8009320:	bf08      	it	eq
 8009322:	68f5      	ldreq	r5, [r6, #12]
 8009324:	e7da      	b.n	80092dc <_vfiprintf_r+0x20>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	0598      	lsls	r0, r3, #22
 800932a:	d4ed      	bmi.n	8009308 <_vfiprintf_r+0x4c>
 800932c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800932e:	f7fe ff9b 	bl	8008268 <__retarget_lock_release_recursive>
 8009332:	e7e9      	b.n	8009308 <_vfiprintf_r+0x4c>
 8009334:	2300      	movs	r3, #0
 8009336:	9309      	str	r3, [sp, #36]	; 0x24
 8009338:	2320      	movs	r3, #32
 800933a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800933e:	2330      	movs	r3, #48	; 0x30
 8009340:	f04f 0901 	mov.w	r9, #1
 8009344:	f8cd 800c 	str.w	r8, [sp, #12]
 8009348:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009508 <_vfiprintf_r+0x24c>
 800934c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009350:	4623      	mov	r3, r4
 8009352:	469a      	mov	sl, r3
 8009354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009358:	b10a      	cbz	r2, 800935e <_vfiprintf_r+0xa2>
 800935a:	2a25      	cmp	r2, #37	; 0x25
 800935c:	d1f9      	bne.n	8009352 <_vfiprintf_r+0x96>
 800935e:	ebba 0b04 	subs.w	fp, sl, r4
 8009362:	d00b      	beq.n	800937c <_vfiprintf_r+0xc0>
 8009364:	465b      	mov	r3, fp
 8009366:	4622      	mov	r2, r4
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ff93 	bl	8009296 <__sfputs_r>
 8009370:	3001      	adds	r0, #1
 8009372:	f000 80aa 	beq.w	80094ca <_vfiprintf_r+0x20e>
 8009376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009378:	445a      	add	r2, fp
 800937a:	9209      	str	r2, [sp, #36]	; 0x24
 800937c:	f89a 3000 	ldrb.w	r3, [sl]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80a2 	beq.w	80094ca <_vfiprintf_r+0x20e>
 8009386:	2300      	movs	r3, #0
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009390:	f10a 0a01 	add.w	sl, sl, #1
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800939c:	931a      	str	r3, [sp, #104]	; 0x68
 800939e:	4654      	mov	r4, sl
 80093a0:	2205      	movs	r2, #5
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	4858      	ldr	r0, [pc, #352]	; (8009508 <_vfiprintf_r+0x24c>)
 80093a8:	f7fe ffde 	bl	8008368 <memchr>
 80093ac:	9a04      	ldr	r2, [sp, #16]
 80093ae:	b9d8      	cbnz	r0, 80093e8 <_vfiprintf_r+0x12c>
 80093b0:	06d1      	lsls	r1, r2, #27
 80093b2:	bf44      	itt	mi
 80093b4:	2320      	movmi	r3, #32
 80093b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ba:	0713      	lsls	r3, r2, #28
 80093bc:	bf44      	itt	mi
 80093be:	232b      	movmi	r3, #43	; 0x2b
 80093c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c4:	f89a 3000 	ldrb.w	r3, [sl]
 80093c8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ca:	d015      	beq.n	80093f8 <_vfiprintf_r+0x13c>
 80093cc:	4654      	mov	r4, sl
 80093ce:	2000      	movs	r0, #0
 80093d0:	f04f 0c0a 	mov.w	ip, #10
 80093d4:	9a07      	ldr	r2, [sp, #28]
 80093d6:	4621      	mov	r1, r4
 80093d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093dc:	3b30      	subs	r3, #48	; 0x30
 80093de:	2b09      	cmp	r3, #9
 80093e0:	d94e      	bls.n	8009480 <_vfiprintf_r+0x1c4>
 80093e2:	b1b0      	cbz	r0, 8009412 <_vfiprintf_r+0x156>
 80093e4:	9207      	str	r2, [sp, #28]
 80093e6:	e014      	b.n	8009412 <_vfiprintf_r+0x156>
 80093e8:	eba0 0308 	sub.w	r3, r0, r8
 80093ec:	fa09 f303 	lsl.w	r3, r9, r3
 80093f0:	4313      	orrs	r3, r2
 80093f2:	46a2      	mov	sl, r4
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	e7d2      	b.n	800939e <_vfiprintf_r+0xe2>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	1d19      	adds	r1, r3, #4
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	9103      	str	r1, [sp, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bfbb      	ittet	lt
 8009404:	425b      	neglt	r3, r3
 8009406:	f042 0202 	orrlt.w	r2, r2, #2
 800940a:	9307      	strge	r3, [sp, #28]
 800940c:	9307      	strlt	r3, [sp, #28]
 800940e:	bfb8      	it	lt
 8009410:	9204      	strlt	r2, [sp, #16]
 8009412:	7823      	ldrb	r3, [r4, #0]
 8009414:	2b2e      	cmp	r3, #46	; 0x2e
 8009416:	d10c      	bne.n	8009432 <_vfiprintf_r+0x176>
 8009418:	7863      	ldrb	r3, [r4, #1]
 800941a:	2b2a      	cmp	r3, #42	; 0x2a
 800941c:	d135      	bne.n	800948a <_vfiprintf_r+0x1ce>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	3402      	adds	r4, #2
 8009422:	1d1a      	adds	r2, r3, #4
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	9203      	str	r2, [sp, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	bfb8      	it	lt
 800942c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009518 <_vfiprintf_r+0x25c>
 8009436:	2203      	movs	r2, #3
 8009438:	4650      	mov	r0, sl
 800943a:	7821      	ldrb	r1, [r4, #0]
 800943c:	f7fe ff94 	bl	8008368 <memchr>
 8009440:	b140      	cbz	r0, 8009454 <_vfiprintf_r+0x198>
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	eba0 000a 	sub.w	r0, r0, sl
 8009448:	fa03 f000 	lsl.w	r0, r3, r0
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	3401      	adds	r4, #1
 8009450:	4303      	orrs	r3, r0
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009458:	2206      	movs	r2, #6
 800945a:	482c      	ldr	r0, [pc, #176]	; (800950c <_vfiprintf_r+0x250>)
 800945c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009460:	f7fe ff82 	bl	8008368 <memchr>
 8009464:	2800      	cmp	r0, #0
 8009466:	d03f      	beq.n	80094e8 <_vfiprintf_r+0x22c>
 8009468:	4b29      	ldr	r3, [pc, #164]	; (8009510 <_vfiprintf_r+0x254>)
 800946a:	bb1b      	cbnz	r3, 80094b4 <_vfiprintf_r+0x1f8>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	3307      	adds	r3, #7
 8009470:	f023 0307 	bic.w	r3, r3, #7
 8009474:	3308      	adds	r3, #8
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947a:	443b      	add	r3, r7
 800947c:	9309      	str	r3, [sp, #36]	; 0x24
 800947e:	e767      	b.n	8009350 <_vfiprintf_r+0x94>
 8009480:	460c      	mov	r4, r1
 8009482:	2001      	movs	r0, #1
 8009484:	fb0c 3202 	mla	r2, ip, r2, r3
 8009488:	e7a5      	b.n	80093d6 <_vfiprintf_r+0x11a>
 800948a:	2300      	movs	r3, #0
 800948c:	f04f 0c0a 	mov.w	ip, #10
 8009490:	4619      	mov	r1, r3
 8009492:	3401      	adds	r4, #1
 8009494:	9305      	str	r3, [sp, #20]
 8009496:	4620      	mov	r0, r4
 8009498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800949c:	3a30      	subs	r2, #48	; 0x30
 800949e:	2a09      	cmp	r2, #9
 80094a0:	d903      	bls.n	80094aa <_vfiprintf_r+0x1ee>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0c5      	beq.n	8009432 <_vfiprintf_r+0x176>
 80094a6:	9105      	str	r1, [sp, #20]
 80094a8:	e7c3      	b.n	8009432 <_vfiprintf_r+0x176>
 80094aa:	4604      	mov	r4, r0
 80094ac:	2301      	movs	r3, #1
 80094ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80094b2:	e7f0      	b.n	8009496 <_vfiprintf_r+0x1da>
 80094b4:	ab03      	add	r3, sp, #12
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	462a      	mov	r2, r5
 80094ba:	4630      	mov	r0, r6
 80094bc:	4b15      	ldr	r3, [pc, #84]	; (8009514 <_vfiprintf_r+0x258>)
 80094be:	a904      	add	r1, sp, #16
 80094c0:	f7fd f820 	bl	8006504 <_printf_float>
 80094c4:	4607      	mov	r7, r0
 80094c6:	1c78      	adds	r0, r7, #1
 80094c8:	d1d6      	bne.n	8009478 <_vfiprintf_r+0x1bc>
 80094ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094cc:	07d9      	lsls	r1, r3, #31
 80094ce:	d405      	bmi.n	80094dc <_vfiprintf_r+0x220>
 80094d0:	89ab      	ldrh	r3, [r5, #12]
 80094d2:	059a      	lsls	r2, r3, #22
 80094d4:	d402      	bmi.n	80094dc <_vfiprintf_r+0x220>
 80094d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d8:	f7fe fec6 	bl	8008268 <__retarget_lock_release_recursive>
 80094dc:	89ab      	ldrh	r3, [r5, #12]
 80094de:	065b      	lsls	r3, r3, #25
 80094e0:	f53f af12 	bmi.w	8009308 <_vfiprintf_r+0x4c>
 80094e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094e6:	e711      	b.n	800930c <_vfiprintf_r+0x50>
 80094e8:	ab03      	add	r3, sp, #12
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	462a      	mov	r2, r5
 80094ee:	4630      	mov	r0, r6
 80094f0:	4b08      	ldr	r3, [pc, #32]	; (8009514 <_vfiprintf_r+0x258>)
 80094f2:	a904      	add	r1, sp, #16
 80094f4:	f7fd faa2 	bl	8006a3c <_printf_i>
 80094f8:	e7e4      	b.n	80094c4 <_vfiprintf_r+0x208>
 80094fa:	bf00      	nop
 80094fc:	0800a790 	.word	0x0800a790
 8009500:	0800a7b0 	.word	0x0800a7b0
 8009504:	0800a770 	.word	0x0800a770
 8009508:	0800a92c 	.word	0x0800a92c
 800950c:	0800a936 	.word	0x0800a936
 8009510:	08006505 	.word	0x08006505
 8009514:	08009297 	.word	0x08009297
 8009518:	0800a932 	.word	0x0800a932

0800951c <_scanf_chars>:
 800951c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009520:	4615      	mov	r5, r2
 8009522:	688a      	ldr	r2, [r1, #8]
 8009524:	4680      	mov	r8, r0
 8009526:	460c      	mov	r4, r1
 8009528:	b932      	cbnz	r2, 8009538 <_scanf_chars+0x1c>
 800952a:	698a      	ldr	r2, [r1, #24]
 800952c:	2a00      	cmp	r2, #0
 800952e:	bf0c      	ite	eq
 8009530:	2201      	moveq	r2, #1
 8009532:	f04f 32ff 	movne.w	r2, #4294967295
 8009536:	608a      	str	r2, [r1, #8]
 8009538:	2700      	movs	r7, #0
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80095c8 <_scanf_chars+0xac>
 8009540:	06d1      	lsls	r1, r2, #27
 8009542:	bf5f      	itttt	pl
 8009544:	681a      	ldrpl	r2, [r3, #0]
 8009546:	1d11      	addpl	r1, r2, #4
 8009548:	6019      	strpl	r1, [r3, #0]
 800954a:	6816      	ldrpl	r6, [r2, #0]
 800954c:	69a0      	ldr	r0, [r4, #24]
 800954e:	b188      	cbz	r0, 8009574 <_scanf_chars+0x58>
 8009550:	2801      	cmp	r0, #1
 8009552:	d107      	bne.n	8009564 <_scanf_chars+0x48>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	6963      	ldr	r3, [r4, #20]
 800955a:	5c9b      	ldrb	r3, [r3, r2]
 800955c:	b953      	cbnz	r3, 8009574 <_scanf_chars+0x58>
 800955e:	bb27      	cbnz	r7, 80095aa <_scanf_chars+0x8e>
 8009560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009564:	2802      	cmp	r0, #2
 8009566:	d120      	bne.n	80095aa <_scanf_chars+0x8e>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009570:	071b      	lsls	r3, r3, #28
 8009572:	d41a      	bmi.n	80095aa <_scanf_chars+0x8e>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	3701      	adds	r7, #1
 8009578:	06da      	lsls	r2, r3, #27
 800957a:	bf5e      	ittt	pl
 800957c:	682b      	ldrpl	r3, [r5, #0]
 800957e:	781b      	ldrbpl	r3, [r3, #0]
 8009580:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009584:	682a      	ldr	r2, [r5, #0]
 8009586:	686b      	ldr	r3, [r5, #4]
 8009588:	3201      	adds	r2, #1
 800958a:	602a      	str	r2, [r5, #0]
 800958c:	68a2      	ldr	r2, [r4, #8]
 800958e:	3b01      	subs	r3, #1
 8009590:	3a01      	subs	r2, #1
 8009592:	606b      	str	r3, [r5, #4]
 8009594:	60a2      	str	r2, [r4, #8]
 8009596:	b142      	cbz	r2, 80095aa <_scanf_chars+0x8e>
 8009598:	2b00      	cmp	r3, #0
 800959a:	dcd7      	bgt.n	800954c <_scanf_chars+0x30>
 800959c:	4629      	mov	r1, r5
 800959e:	4640      	mov	r0, r8
 80095a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80095a4:	4798      	blx	r3
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0d0      	beq.n	800954c <_scanf_chars+0x30>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	f013 0310 	ands.w	r3, r3, #16
 80095b0:	d105      	bne.n	80095be <_scanf_chars+0xa2>
 80095b2:	68e2      	ldr	r2, [r4, #12]
 80095b4:	3201      	adds	r2, #1
 80095b6:	60e2      	str	r2, [r4, #12]
 80095b8:	69a2      	ldr	r2, [r4, #24]
 80095ba:	b102      	cbz	r2, 80095be <_scanf_chars+0xa2>
 80095bc:	7033      	strb	r3, [r6, #0]
 80095be:	6923      	ldr	r3, [r4, #16]
 80095c0:	2000      	movs	r0, #0
 80095c2:	441f      	add	r7, r3
 80095c4:	6127      	str	r7, [r4, #16]
 80095c6:	e7cb      	b.n	8009560 <_scanf_chars+0x44>
 80095c8:	0800a5db 	.word	0x0800a5db

080095cc <_scanf_i>:
 80095cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	460c      	mov	r4, r1
 80095d2:	4698      	mov	r8, r3
 80095d4:	4b72      	ldr	r3, [pc, #456]	; (80097a0 <_scanf_i+0x1d4>)
 80095d6:	b087      	sub	sp, #28
 80095d8:	4682      	mov	sl, r0
 80095da:	4616      	mov	r6, r2
 80095dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095e0:	ab03      	add	r3, sp, #12
 80095e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80095e6:	4b6f      	ldr	r3, [pc, #444]	; (80097a4 <_scanf_i+0x1d8>)
 80095e8:	69a1      	ldr	r1, [r4, #24]
 80095ea:	4a6f      	ldr	r2, [pc, #444]	; (80097a8 <_scanf_i+0x1dc>)
 80095ec:	4627      	mov	r7, r4
 80095ee:	2903      	cmp	r1, #3
 80095f0:	bf18      	it	ne
 80095f2:	461a      	movne	r2, r3
 80095f4:	68a3      	ldr	r3, [r4, #8]
 80095f6:	9201      	str	r2, [sp, #4]
 80095f8:	1e5a      	subs	r2, r3, #1
 80095fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095fe:	bf81      	itttt	hi
 8009600:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009604:	eb03 0905 	addhi.w	r9, r3, r5
 8009608:	f240 135d 	movwhi	r3, #349	; 0x15d
 800960c:	60a3      	strhi	r3, [r4, #8]
 800960e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009612:	bf98      	it	ls
 8009614:	f04f 0900 	movls.w	r9, #0
 8009618:	463d      	mov	r5, r7
 800961a:	f04f 0b00 	mov.w	fp, #0
 800961e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009622:	6023      	str	r3, [r4, #0]
 8009624:	6831      	ldr	r1, [r6, #0]
 8009626:	ab03      	add	r3, sp, #12
 8009628:	2202      	movs	r2, #2
 800962a:	7809      	ldrb	r1, [r1, #0]
 800962c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009630:	f7fe fe9a 	bl	8008368 <memchr>
 8009634:	b328      	cbz	r0, 8009682 <_scanf_i+0xb6>
 8009636:	f1bb 0f01 	cmp.w	fp, #1
 800963a:	d159      	bne.n	80096f0 <_scanf_i+0x124>
 800963c:	6862      	ldr	r2, [r4, #4]
 800963e:	b92a      	cbnz	r2, 800964c <_scanf_i+0x80>
 8009640:	2308      	movs	r3, #8
 8009642:	6822      	ldr	r2, [r4, #0]
 8009644:	6063      	str	r3, [r4, #4]
 8009646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800964a:	6022      	str	r2, [r4, #0]
 800964c:	6822      	ldr	r2, [r4, #0]
 800964e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009652:	6022      	str	r2, [r4, #0]
 8009654:	68a2      	ldr	r2, [r4, #8]
 8009656:	1e51      	subs	r1, r2, #1
 8009658:	60a1      	str	r1, [r4, #8]
 800965a:	b192      	cbz	r2, 8009682 <_scanf_i+0xb6>
 800965c:	6832      	ldr	r2, [r6, #0]
 800965e:	1c51      	adds	r1, r2, #1
 8009660:	6031      	str	r1, [r6, #0]
 8009662:	7812      	ldrb	r2, [r2, #0]
 8009664:	f805 2b01 	strb.w	r2, [r5], #1
 8009668:	6872      	ldr	r2, [r6, #4]
 800966a:	3a01      	subs	r2, #1
 800966c:	2a00      	cmp	r2, #0
 800966e:	6072      	str	r2, [r6, #4]
 8009670:	dc07      	bgt.n	8009682 <_scanf_i+0xb6>
 8009672:	4631      	mov	r1, r6
 8009674:	4650      	mov	r0, sl
 8009676:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800967a:	4790      	blx	r2
 800967c:	2800      	cmp	r0, #0
 800967e:	f040 8085 	bne.w	800978c <_scanf_i+0x1c0>
 8009682:	f10b 0b01 	add.w	fp, fp, #1
 8009686:	f1bb 0f03 	cmp.w	fp, #3
 800968a:	d1cb      	bne.n	8009624 <_scanf_i+0x58>
 800968c:	6863      	ldr	r3, [r4, #4]
 800968e:	b90b      	cbnz	r3, 8009694 <_scanf_i+0xc8>
 8009690:	230a      	movs	r3, #10
 8009692:	6063      	str	r3, [r4, #4]
 8009694:	6863      	ldr	r3, [r4, #4]
 8009696:	4945      	ldr	r1, [pc, #276]	; (80097ac <_scanf_i+0x1e0>)
 8009698:	6960      	ldr	r0, [r4, #20]
 800969a:	1ac9      	subs	r1, r1, r3
 800969c:	f000 f8aa 	bl	80097f4 <__sccl>
 80096a0:	f04f 0b00 	mov.w	fp, #0
 80096a4:	68a3      	ldr	r3, [r4, #8]
 80096a6:	6822      	ldr	r2, [r4, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d03d      	beq.n	8009728 <_scanf_i+0x15c>
 80096ac:	6831      	ldr	r1, [r6, #0]
 80096ae:	6960      	ldr	r0, [r4, #20]
 80096b0:	f891 c000 	ldrb.w	ip, [r1]
 80096b4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d035      	beq.n	8009728 <_scanf_i+0x15c>
 80096bc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80096c0:	d124      	bne.n	800970c <_scanf_i+0x140>
 80096c2:	0510      	lsls	r0, r2, #20
 80096c4:	d522      	bpl.n	800970c <_scanf_i+0x140>
 80096c6:	f10b 0b01 	add.w	fp, fp, #1
 80096ca:	f1b9 0f00 	cmp.w	r9, #0
 80096ce:	d003      	beq.n	80096d8 <_scanf_i+0x10c>
 80096d0:	3301      	adds	r3, #1
 80096d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80096d6:	60a3      	str	r3, [r4, #8]
 80096d8:	6873      	ldr	r3, [r6, #4]
 80096da:	3b01      	subs	r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	6073      	str	r3, [r6, #4]
 80096e0:	dd1b      	ble.n	800971a <_scanf_i+0x14e>
 80096e2:	6833      	ldr	r3, [r6, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	6033      	str	r3, [r6, #0]
 80096e8:	68a3      	ldr	r3, [r4, #8]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	60a3      	str	r3, [r4, #8]
 80096ee:	e7d9      	b.n	80096a4 <_scanf_i+0xd8>
 80096f0:	f1bb 0f02 	cmp.w	fp, #2
 80096f4:	d1ae      	bne.n	8009654 <_scanf_i+0x88>
 80096f6:	6822      	ldr	r2, [r4, #0]
 80096f8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80096fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009700:	d1bf      	bne.n	8009682 <_scanf_i+0xb6>
 8009702:	2310      	movs	r3, #16
 8009704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009708:	6063      	str	r3, [r4, #4]
 800970a:	e7a2      	b.n	8009652 <_scanf_i+0x86>
 800970c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009710:	6022      	str	r2, [r4, #0]
 8009712:	780b      	ldrb	r3, [r1, #0]
 8009714:	f805 3b01 	strb.w	r3, [r5], #1
 8009718:	e7de      	b.n	80096d8 <_scanf_i+0x10c>
 800971a:	4631      	mov	r1, r6
 800971c:	4650      	mov	r0, sl
 800971e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009722:	4798      	blx	r3
 8009724:	2800      	cmp	r0, #0
 8009726:	d0df      	beq.n	80096e8 <_scanf_i+0x11c>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	05d9      	lsls	r1, r3, #23
 800972c:	d50d      	bpl.n	800974a <_scanf_i+0x17e>
 800972e:	42bd      	cmp	r5, r7
 8009730:	d909      	bls.n	8009746 <_scanf_i+0x17a>
 8009732:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009736:	4632      	mov	r2, r6
 8009738:	4650      	mov	r0, sl
 800973a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800973e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009742:	4798      	blx	r3
 8009744:	464d      	mov	r5, r9
 8009746:	42bd      	cmp	r5, r7
 8009748:	d028      	beq.n	800979c <_scanf_i+0x1d0>
 800974a:	6822      	ldr	r2, [r4, #0]
 800974c:	f012 0210 	ands.w	r2, r2, #16
 8009750:	d113      	bne.n	800977a <_scanf_i+0x1ae>
 8009752:	702a      	strb	r2, [r5, #0]
 8009754:	4639      	mov	r1, r7
 8009756:	6863      	ldr	r3, [r4, #4]
 8009758:	4650      	mov	r0, sl
 800975a:	9e01      	ldr	r6, [sp, #4]
 800975c:	47b0      	blx	r6
 800975e:	f8d8 3000 	ldr.w	r3, [r8]
 8009762:	6821      	ldr	r1, [r4, #0]
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	f8c8 2000 	str.w	r2, [r8]
 800976a:	f011 0f20 	tst.w	r1, #32
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	d00f      	beq.n	8009792 <_scanf_i+0x1c6>
 8009772:	6018      	str	r0, [r3, #0]
 8009774:	68e3      	ldr	r3, [r4, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	60e3      	str	r3, [r4, #12]
 800977a:	2000      	movs	r0, #0
 800977c:	1bed      	subs	r5, r5, r7
 800977e:	44ab      	add	fp, r5
 8009780:	6925      	ldr	r5, [r4, #16]
 8009782:	445d      	add	r5, fp
 8009784:	6125      	str	r5, [r4, #16]
 8009786:	b007      	add	sp, #28
 8009788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978c:	f04f 0b00 	mov.w	fp, #0
 8009790:	e7ca      	b.n	8009728 <_scanf_i+0x15c>
 8009792:	07ca      	lsls	r2, r1, #31
 8009794:	bf4c      	ite	mi
 8009796:	8018      	strhmi	r0, [r3, #0]
 8009798:	6018      	strpl	r0, [r3, #0]
 800979a:	e7eb      	b.n	8009774 <_scanf_i+0x1a8>
 800979c:	2001      	movs	r0, #1
 800979e:	e7f2      	b.n	8009786 <_scanf_i+0x1ba>
 80097a0:	08009da0 	.word	0x08009da0
 80097a4:	08009961 	.word	0x08009961
 80097a8:	08007019 	.word	0x08007019
 80097ac:	0800a956 	.word	0x0800a956

080097b0 <_read_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	4611      	mov	r1, r2
 80097b8:	2200      	movs	r2, #0
 80097ba:	4d05      	ldr	r5, [pc, #20]	; (80097d0 <_read_r+0x20>)
 80097bc:	602a      	str	r2, [r5, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f7f9 fda4 	bl	800330c <_read>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d102      	bne.n	80097ce <_read_r+0x1e>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b103      	cbz	r3, 80097ce <_read_r+0x1e>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	200006f4 	.word	0x200006f4

080097d4 <_sbrk_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	2300      	movs	r3, #0
 80097d8:	4d05      	ldr	r5, [pc, #20]	; (80097f0 <_sbrk_r+0x1c>)
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	602b      	str	r3, [r5, #0]
 80097e0:	f7f9 fdb0 	bl	8003344 <_sbrk>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_sbrk_r+0x1a>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_sbrk_r+0x1a>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	200006f4 	.word	0x200006f4

080097f4 <__sccl>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	780b      	ldrb	r3, [r1, #0]
 80097f8:	4604      	mov	r4, r0
 80097fa:	2b5e      	cmp	r3, #94	; 0x5e
 80097fc:	bf13      	iteet	ne
 80097fe:	2200      	movne	r2, #0
 8009800:	2201      	moveq	r2, #1
 8009802:	784b      	ldrbeq	r3, [r1, #1]
 8009804:	1c48      	addne	r0, r1, #1
 8009806:	bf08      	it	eq
 8009808:	1c88      	addeq	r0, r1, #2
 800980a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800980e:	1e61      	subs	r1, r4, #1
 8009810:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009814:	42a9      	cmp	r1, r5
 8009816:	d1fb      	bne.n	8009810 <__sccl+0x1c>
 8009818:	b90b      	cbnz	r3, 800981e <__sccl+0x2a>
 800981a:	3801      	subs	r0, #1
 800981c:	bd70      	pop	{r4, r5, r6, pc}
 800981e:	f082 0101 	eor.w	r1, r2, #1
 8009822:	54e1      	strb	r1, [r4, r3]
 8009824:	1c42      	adds	r2, r0, #1
 8009826:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800982a:	4610      	mov	r0, r2
 800982c:	2d2d      	cmp	r5, #45	; 0x2d
 800982e:	f102 36ff 	add.w	r6, r2, #4294967295
 8009832:	d006      	beq.n	8009842 <__sccl+0x4e>
 8009834:	2d5d      	cmp	r5, #93	; 0x5d
 8009836:	d0f1      	beq.n	800981c <__sccl+0x28>
 8009838:	b90d      	cbnz	r5, 800983e <__sccl+0x4a>
 800983a:	4630      	mov	r0, r6
 800983c:	e7ee      	b.n	800981c <__sccl+0x28>
 800983e:	462b      	mov	r3, r5
 8009840:	e7ef      	b.n	8009822 <__sccl+0x2e>
 8009842:	7816      	ldrb	r6, [r2, #0]
 8009844:	2e5d      	cmp	r6, #93	; 0x5d
 8009846:	d0fa      	beq.n	800983e <__sccl+0x4a>
 8009848:	42b3      	cmp	r3, r6
 800984a:	dcf8      	bgt.n	800983e <__sccl+0x4a>
 800984c:	4618      	mov	r0, r3
 800984e:	3001      	adds	r0, #1
 8009850:	4286      	cmp	r6, r0
 8009852:	5421      	strb	r1, [r4, r0]
 8009854:	dcfb      	bgt.n	800984e <__sccl+0x5a>
 8009856:	43d8      	mvns	r0, r3
 8009858:	4430      	add	r0, r6
 800985a:	42b3      	cmp	r3, r6
 800985c:	bfa8      	it	ge
 800985e:	2000      	movge	r0, #0
 8009860:	1c5d      	adds	r5, r3, #1
 8009862:	182b      	adds	r3, r5, r0
 8009864:	3202      	adds	r2, #2
 8009866:	e7de      	b.n	8009826 <__sccl+0x32>

08009868 <_strtoul_l.isra.0>:
 8009868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800986c:	468c      	mov	ip, r1
 800986e:	4686      	mov	lr, r0
 8009870:	4e3a      	ldr	r6, [pc, #232]	; (800995c <_strtoul_l.isra.0+0xf4>)
 8009872:	4660      	mov	r0, ip
 8009874:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009878:	5da5      	ldrb	r5, [r4, r6]
 800987a:	f015 0508 	ands.w	r5, r5, #8
 800987e:	d1f8      	bne.n	8009872 <_strtoul_l.isra.0+0xa>
 8009880:	2c2d      	cmp	r4, #45	; 0x2d
 8009882:	d134      	bne.n	80098ee <_strtoul_l.isra.0+0x86>
 8009884:	f04f 0801 	mov.w	r8, #1
 8009888:	f89c 4000 	ldrb.w	r4, [ip]
 800988c:	f100 0c02 	add.w	ip, r0, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d05e      	beq.n	8009952 <_strtoul_l.isra.0+0xea>
 8009894:	2b10      	cmp	r3, #16
 8009896:	d10c      	bne.n	80098b2 <_strtoul_l.isra.0+0x4a>
 8009898:	2c30      	cmp	r4, #48	; 0x30
 800989a:	d10a      	bne.n	80098b2 <_strtoul_l.isra.0+0x4a>
 800989c:	f89c 0000 	ldrb.w	r0, [ip]
 80098a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098a4:	2858      	cmp	r0, #88	; 0x58
 80098a6:	d14f      	bne.n	8009948 <_strtoul_l.isra.0+0xe0>
 80098a8:	2310      	movs	r3, #16
 80098aa:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80098ae:	f10c 0c02 	add.w	ip, ip, #2
 80098b2:	f04f 37ff 	mov.w	r7, #4294967295
 80098b6:	fbb7 f7f3 	udiv	r7, r7, r3
 80098ba:	2500      	movs	r5, #0
 80098bc:	fb03 f907 	mul.w	r9, r3, r7
 80098c0:	4628      	mov	r0, r5
 80098c2:	ea6f 0909 	mvn.w	r9, r9
 80098c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80098ca:	2e09      	cmp	r6, #9
 80098cc:	d818      	bhi.n	8009900 <_strtoul_l.isra.0+0x98>
 80098ce:	4634      	mov	r4, r6
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	dd24      	ble.n	800991e <_strtoul_l.isra.0+0xb6>
 80098d4:	2d00      	cmp	r5, #0
 80098d6:	db1f      	blt.n	8009918 <_strtoul_l.isra.0+0xb0>
 80098d8:	4287      	cmp	r7, r0
 80098da:	d31d      	bcc.n	8009918 <_strtoul_l.isra.0+0xb0>
 80098dc:	d101      	bne.n	80098e2 <_strtoul_l.isra.0+0x7a>
 80098de:	45a1      	cmp	r9, r4
 80098e0:	db1a      	blt.n	8009918 <_strtoul_l.isra.0+0xb0>
 80098e2:	2501      	movs	r5, #1
 80098e4:	fb00 4003 	mla	r0, r0, r3, r4
 80098e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80098ec:	e7eb      	b.n	80098c6 <_strtoul_l.isra.0+0x5e>
 80098ee:	2c2b      	cmp	r4, #43	; 0x2b
 80098f0:	bf08      	it	eq
 80098f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80098f6:	46a8      	mov	r8, r5
 80098f8:	bf08      	it	eq
 80098fa:	f100 0c02 	addeq.w	ip, r0, #2
 80098fe:	e7c7      	b.n	8009890 <_strtoul_l.isra.0+0x28>
 8009900:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009904:	2e19      	cmp	r6, #25
 8009906:	d801      	bhi.n	800990c <_strtoul_l.isra.0+0xa4>
 8009908:	3c37      	subs	r4, #55	; 0x37
 800990a:	e7e1      	b.n	80098d0 <_strtoul_l.isra.0+0x68>
 800990c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009910:	2e19      	cmp	r6, #25
 8009912:	d804      	bhi.n	800991e <_strtoul_l.isra.0+0xb6>
 8009914:	3c57      	subs	r4, #87	; 0x57
 8009916:	e7db      	b.n	80098d0 <_strtoul_l.isra.0+0x68>
 8009918:	f04f 35ff 	mov.w	r5, #4294967295
 800991c:	e7e4      	b.n	80098e8 <_strtoul_l.isra.0+0x80>
 800991e:	2d00      	cmp	r5, #0
 8009920:	da07      	bge.n	8009932 <_strtoul_l.isra.0+0xca>
 8009922:	2322      	movs	r3, #34	; 0x22
 8009924:	f04f 30ff 	mov.w	r0, #4294967295
 8009928:	f8ce 3000 	str.w	r3, [lr]
 800992c:	b942      	cbnz	r2, 8009940 <_strtoul_l.isra.0+0xd8>
 800992e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009932:	f1b8 0f00 	cmp.w	r8, #0
 8009936:	d000      	beq.n	800993a <_strtoul_l.isra.0+0xd2>
 8009938:	4240      	negs	r0, r0
 800993a:	2a00      	cmp	r2, #0
 800993c:	d0f7      	beq.n	800992e <_strtoul_l.isra.0+0xc6>
 800993e:	b10d      	cbz	r5, 8009944 <_strtoul_l.isra.0+0xdc>
 8009940:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009944:	6011      	str	r1, [r2, #0]
 8009946:	e7f2      	b.n	800992e <_strtoul_l.isra.0+0xc6>
 8009948:	2430      	movs	r4, #48	; 0x30
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1b1      	bne.n	80098b2 <_strtoul_l.isra.0+0x4a>
 800994e:	2308      	movs	r3, #8
 8009950:	e7af      	b.n	80098b2 <_strtoul_l.isra.0+0x4a>
 8009952:	2c30      	cmp	r4, #48	; 0x30
 8009954:	d0a2      	beq.n	800989c <_strtoul_l.isra.0+0x34>
 8009956:	230a      	movs	r3, #10
 8009958:	e7ab      	b.n	80098b2 <_strtoul_l.isra.0+0x4a>
 800995a:	bf00      	nop
 800995c:	0800a5db 	.word	0x0800a5db

08009960 <_strtoul_r>:
 8009960:	f7ff bf82 	b.w	8009868 <_strtoul_l.isra.0>

08009964 <__submore>:
 8009964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009968:	460c      	mov	r4, r1
 800996a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800996c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009970:	4299      	cmp	r1, r3
 8009972:	d11b      	bne.n	80099ac <__submore+0x48>
 8009974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009978:	f7ff f8ee 	bl	8008b58 <_malloc_r>
 800997c:	b918      	cbnz	r0, 8009986 <__submore+0x22>
 800997e:	f04f 30ff 	mov.w	r0, #4294967295
 8009982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800998a:	63a3      	str	r3, [r4, #56]	; 0x38
 800998c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009990:	6360      	str	r0, [r4, #52]	; 0x34
 8009992:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009996:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800999a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800999e:	7043      	strb	r3, [r0, #1]
 80099a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80099a4:	7003      	strb	r3, [r0, #0]
 80099a6:	6020      	str	r0, [r4, #0]
 80099a8:	2000      	movs	r0, #0
 80099aa:	e7ea      	b.n	8009982 <__submore+0x1e>
 80099ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80099ae:	0077      	lsls	r7, r6, #1
 80099b0:	463a      	mov	r2, r7
 80099b2:	f000 f899 	bl	8009ae8 <_realloc_r>
 80099b6:	4605      	mov	r5, r0
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d0e0      	beq.n	800997e <__submore+0x1a>
 80099bc:	eb00 0806 	add.w	r8, r0, r6
 80099c0:	4601      	mov	r1, r0
 80099c2:	4632      	mov	r2, r6
 80099c4:	4640      	mov	r0, r8
 80099c6:	f7fe fcdd 	bl	8008384 <memcpy>
 80099ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80099ce:	f8c4 8000 	str.w	r8, [r4]
 80099d2:	e7e9      	b.n	80099a8 <__submore+0x44>

080099d4 <__assert_func>:
 80099d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099d6:	4614      	mov	r4, r2
 80099d8:	461a      	mov	r2, r3
 80099da:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <__assert_func+0x2c>)
 80099dc:	4605      	mov	r5, r0
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68d8      	ldr	r0, [r3, #12]
 80099e2:	b14c      	cbz	r4, 80099f8 <__assert_func+0x24>
 80099e4:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <__assert_func+0x30>)
 80099e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099ea:	9100      	str	r1, [sp, #0]
 80099ec:	462b      	mov	r3, r5
 80099ee:	4906      	ldr	r1, [pc, #24]	; (8009a08 <__assert_func+0x34>)
 80099f0:	f000 f80e 	bl	8009a10 <fiprintf>
 80099f4:	f000 f8ab 	bl	8009b4e <abort>
 80099f8:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <__assert_func+0x38>)
 80099fa:	461c      	mov	r4, r3
 80099fc:	e7f3      	b.n	80099e6 <__assert_func+0x12>
 80099fe:	bf00      	nop
 8009a00:	2000005c 	.word	0x2000005c
 8009a04:	0800a958 	.word	0x0800a958
 8009a08:	0800a965 	.word	0x0800a965
 8009a0c:	0800a993 	.word	0x0800a993

08009a10 <fiprintf>:
 8009a10:	b40e      	push	{r1, r2, r3}
 8009a12:	b503      	push	{r0, r1, lr}
 8009a14:	4601      	mov	r1, r0
 8009a16:	ab03      	add	r3, sp, #12
 8009a18:	4805      	ldr	r0, [pc, #20]	; (8009a30 <fiprintf+0x20>)
 8009a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1e:	6800      	ldr	r0, [r0, #0]
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	f7ff fc4b 	bl	80092bc <_vfiprintf_r>
 8009a26:	b002      	add	sp, #8
 8009a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a2c:	b003      	add	sp, #12
 8009a2e:	4770      	bx	lr
 8009a30:	2000005c 	.word	0x2000005c

08009a34 <_fstat_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	2300      	movs	r3, #0
 8009a38:	4d06      	ldr	r5, [pc, #24]	; (8009a54 <_fstat_r+0x20>)
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f7f9 fc76 	bl	8003332 <_fstat>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d102      	bne.n	8009a50 <_fstat_r+0x1c>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	b103      	cbz	r3, 8009a50 <_fstat_r+0x1c>
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	bf00      	nop
 8009a54:	200006f4 	.word	0x200006f4

08009a58 <_isatty_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4d05      	ldr	r5, [pc, #20]	; (8009a74 <_isatty_r+0x1c>)
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f9 fc6a 	bl	800333c <_isatty>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_isatty_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_isatty_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	200006f4 	.word	0x200006f4

08009a78 <__ascii_mbtowc>:
 8009a78:	b082      	sub	sp, #8
 8009a7a:	b901      	cbnz	r1, 8009a7e <__ascii_mbtowc+0x6>
 8009a7c:	a901      	add	r1, sp, #4
 8009a7e:	b142      	cbz	r2, 8009a92 <__ascii_mbtowc+0x1a>
 8009a80:	b14b      	cbz	r3, 8009a96 <__ascii_mbtowc+0x1e>
 8009a82:	7813      	ldrb	r3, [r2, #0]
 8009a84:	600b      	str	r3, [r1, #0]
 8009a86:	7812      	ldrb	r2, [r2, #0]
 8009a88:	1e10      	subs	r0, r2, #0
 8009a8a:	bf18      	it	ne
 8009a8c:	2001      	movne	r0, #1
 8009a8e:	b002      	add	sp, #8
 8009a90:	4770      	bx	lr
 8009a92:	4610      	mov	r0, r2
 8009a94:	e7fb      	b.n	8009a8e <__ascii_mbtowc+0x16>
 8009a96:	f06f 0001 	mvn.w	r0, #1
 8009a9a:	e7f8      	b.n	8009a8e <__ascii_mbtowc+0x16>

08009a9c <memmove>:
 8009a9c:	4288      	cmp	r0, r1
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	eb01 0402 	add.w	r4, r1, r2
 8009aa4:	d902      	bls.n	8009aac <memmove+0x10>
 8009aa6:	4284      	cmp	r4, r0
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	d807      	bhi.n	8009abc <memmove+0x20>
 8009aac:	1e43      	subs	r3, r0, #1
 8009aae:	42a1      	cmp	r1, r4
 8009ab0:	d008      	beq.n	8009ac4 <memmove+0x28>
 8009ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aba:	e7f8      	b.n	8009aae <memmove+0x12>
 8009abc:	4601      	mov	r1, r0
 8009abe:	4402      	add	r2, r0
 8009ac0:	428a      	cmp	r2, r1
 8009ac2:	d100      	bne.n	8009ac6 <memmove+0x2a>
 8009ac4:	bd10      	pop	{r4, pc}
 8009ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ace:	e7f7      	b.n	8009ac0 <memmove+0x24>

08009ad0 <__malloc_lock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__malloc_lock+0x8>)
 8009ad2:	f7fe bbc8 	b.w	8008266 <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	200006ec 	.word	0x200006ec

08009adc <__malloc_unlock>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__malloc_unlock+0x8>)
 8009ade:	f7fe bbc3 	b.w	8008268 <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	200006ec 	.word	0x200006ec

08009ae8 <_realloc_r>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	4607      	mov	r7, r0
 8009aec:	4614      	mov	r4, r2
 8009aee:	460e      	mov	r6, r1
 8009af0:	b921      	cbnz	r1, 8009afc <_realloc_r+0x14>
 8009af2:	4611      	mov	r1, r2
 8009af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009af8:	f7ff b82e 	b.w	8008b58 <_malloc_r>
 8009afc:	b922      	cbnz	r2, 8009b08 <_realloc_r+0x20>
 8009afe:	f7fe ffdf 	bl	8008ac0 <_free_r>
 8009b02:	4625      	mov	r5, r4
 8009b04:	4628      	mov	r0, r5
 8009b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b08:	f000 f828 	bl	8009b5c <_malloc_usable_size_r>
 8009b0c:	42a0      	cmp	r0, r4
 8009b0e:	d20f      	bcs.n	8009b30 <_realloc_r+0x48>
 8009b10:	4621      	mov	r1, r4
 8009b12:	4638      	mov	r0, r7
 8009b14:	f7ff f820 	bl	8008b58 <_malloc_r>
 8009b18:	4605      	mov	r5, r0
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d0f2      	beq.n	8009b04 <_realloc_r+0x1c>
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4622      	mov	r2, r4
 8009b22:	f7fe fc2f 	bl	8008384 <memcpy>
 8009b26:	4631      	mov	r1, r6
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f7fe ffc9 	bl	8008ac0 <_free_r>
 8009b2e:	e7e9      	b.n	8009b04 <_realloc_r+0x1c>
 8009b30:	4635      	mov	r5, r6
 8009b32:	e7e7      	b.n	8009b04 <_realloc_r+0x1c>

08009b34 <__ascii_wctomb>:
 8009b34:	4603      	mov	r3, r0
 8009b36:	4608      	mov	r0, r1
 8009b38:	b141      	cbz	r1, 8009b4c <__ascii_wctomb+0x18>
 8009b3a:	2aff      	cmp	r2, #255	; 0xff
 8009b3c:	d904      	bls.n	8009b48 <__ascii_wctomb+0x14>
 8009b3e:	228a      	movs	r2, #138	; 0x8a
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	4770      	bx	lr
 8009b48:	2001      	movs	r0, #1
 8009b4a:	700a      	strb	r2, [r1, #0]
 8009b4c:	4770      	bx	lr

08009b4e <abort>:
 8009b4e:	2006      	movs	r0, #6
 8009b50:	b508      	push	{r3, lr}
 8009b52:	f000 f833 	bl	8009bbc <raise>
 8009b56:	2001      	movs	r0, #1
 8009b58:	f7f9 fbd2 	bl	8003300 <_exit>

08009b5c <_malloc_usable_size_r>:
 8009b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b60:	1f18      	subs	r0, r3, #4
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	bfbc      	itt	lt
 8009b66:	580b      	ldrlt	r3, [r1, r0]
 8009b68:	18c0      	addlt	r0, r0, r3
 8009b6a:	4770      	bx	lr

08009b6c <_raise_r>:
 8009b6c:	291f      	cmp	r1, #31
 8009b6e:	b538      	push	{r3, r4, r5, lr}
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	d904      	bls.n	8009b80 <_raise_r+0x14>
 8009b76:	2316      	movs	r3, #22
 8009b78:	6003      	str	r3, [r0, #0]
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b82:	b112      	cbz	r2, 8009b8a <_raise_r+0x1e>
 8009b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b88:	b94b      	cbnz	r3, 8009b9e <_raise_r+0x32>
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f830 	bl	8009bf0 <_getpid_r>
 8009b90:	462a      	mov	r2, r5
 8009b92:	4601      	mov	r1, r0
 8009b94:	4620      	mov	r0, r4
 8009b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b9a:	f000 b817 	b.w	8009bcc <_kill_r>
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d00a      	beq.n	8009bb8 <_raise_r+0x4c>
 8009ba2:	1c59      	adds	r1, r3, #1
 8009ba4:	d103      	bne.n	8009bae <_raise_r+0x42>
 8009ba6:	2316      	movs	r3, #22
 8009ba8:	6003      	str	r3, [r0, #0]
 8009baa:	2001      	movs	r0, #1
 8009bac:	e7e7      	b.n	8009b7e <_raise_r+0x12>
 8009bae:	2400      	movs	r4, #0
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bb6:	4798      	blx	r3
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e7e0      	b.n	8009b7e <_raise_r+0x12>

08009bbc <raise>:
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <raise+0xc>)
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f7ff bfd3 	b.w	8009b6c <_raise_r>
 8009bc6:	bf00      	nop
 8009bc8:	2000005c 	.word	0x2000005c

08009bcc <_kill_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	2300      	movs	r3, #0
 8009bd0:	4d06      	ldr	r5, [pc, #24]	; (8009bec <_kill_r+0x20>)
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	602b      	str	r3, [r5, #0]
 8009bda:	f7f9 fb89 	bl	80032f0 <_kill>
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	d102      	bne.n	8009be8 <_kill_r+0x1c>
 8009be2:	682b      	ldr	r3, [r5, #0]
 8009be4:	b103      	cbz	r3, 8009be8 <_kill_r+0x1c>
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	bd38      	pop	{r3, r4, r5, pc}
 8009bea:	bf00      	nop
 8009bec:	200006f4 	.word	0x200006f4

08009bf0 <_getpid_r>:
 8009bf0:	f7f9 bb7c 	b.w	80032ec <_getpid>

08009bf4 <round>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009bfa:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8009bfe:	2c13      	cmp	r4, #19
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4606      	mov	r6, r0
 8009c06:	460d      	mov	r5, r1
 8009c08:	dc19      	bgt.n	8009c3e <round+0x4a>
 8009c0a:	2c00      	cmp	r4, #0
 8009c0c:	da09      	bge.n	8009c22 <round+0x2e>
 8009c0e:	3401      	adds	r4, #1
 8009c10:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009c14:	d103      	bne.n	8009c1e <round+0x2a>
 8009c16:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009c1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c1e:	2200      	movs	r2, #0
 8009c20:	e02a      	b.n	8009c78 <round+0x84>
 8009c22:	4917      	ldr	r1, [pc, #92]	; (8009c80 <round+0x8c>)
 8009c24:	4121      	asrs	r1, r4
 8009c26:	ea03 0001 	and.w	r0, r3, r1
 8009c2a:	4302      	orrs	r2, r0
 8009c2c:	d010      	beq.n	8009c50 <round+0x5c>
 8009c2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c32:	fa42 f404 	asr.w	r4, r2, r4
 8009c36:	4423      	add	r3, r4
 8009c38:	ea23 0301 	bic.w	r3, r3, r1
 8009c3c:	e7ef      	b.n	8009c1e <round+0x2a>
 8009c3e:	2c33      	cmp	r4, #51	; 0x33
 8009c40:	dd09      	ble.n	8009c56 <round+0x62>
 8009c42:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009c46:	d103      	bne.n	8009c50 <round+0x5c>
 8009c48:	f7f6 fa9a 	bl	8000180 <__adddf3>
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	460d      	mov	r5, r1
 8009c50:	4630      	mov	r0, r6
 8009c52:	4629      	mov	r1, r5
 8009c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c56:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009c5e:	40f8      	lsrs	r0, r7
 8009c60:	4202      	tst	r2, r0
 8009c62:	d0f5      	beq.n	8009c50 <round+0x5c>
 8009c64:	2101      	movs	r1, #1
 8009c66:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009c6a:	fa01 f404 	lsl.w	r4, r1, r4
 8009c6e:	1912      	adds	r2, r2, r4
 8009c70:	bf28      	it	cs
 8009c72:	185b      	addcs	r3, r3, r1
 8009c74:	ea22 0200 	bic.w	r2, r2, r0
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	e7e6      	b.n	8009c4c <round+0x58>
 8009c7e:	bf00      	nop
 8009c80:	000fffff 	.word	0x000fffff

08009c84 <sqrtf>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4605      	mov	r5, r0
 8009c88:	f000 f81e 	bl	8009cc8 <__ieee754_sqrtf>
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <sqrtf+0x40>)
 8009c8e:	4604      	mov	r4, r0
 8009c90:	f993 3000 	ldrsb.w	r3, [r3]
 8009c94:	3301      	adds	r3, #1
 8009c96:	d012      	beq.n	8009cbe <sqrtf+0x3a>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7f7 fa42 	bl	8001124 <__aeabi_fcmpun>
 8009ca0:	b968      	cbnz	r0, 8009cbe <sqrtf+0x3a>
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f7f7 fa15 	bl	80010d4 <__aeabi_fcmplt>
 8009caa:	b140      	cbz	r0, 8009cbe <sqrtf+0x3a>
 8009cac:	f7fc fb4c 	bl	8006348 <__errno>
 8009cb0:	2321      	movs	r3, #33	; 0x21
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	6003      	str	r3, [r0, #0]
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	f7f7 f922 	bl	8000f00 <__aeabi_fdiv>
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	bd38      	pop	{r3, r4, r5, pc}
 8009cc2:	bf00      	nop
 8009cc4:	2000022c 	.word	0x2000022c

08009cc8 <__ieee754_sqrtf>:
 8009cc8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009ccc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009cd0:	b570      	push	{r4, r5, r6, lr}
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	d309      	bcc.n	8009cec <__ieee754_sqrtf+0x24>
 8009cd8:	4601      	mov	r1, r0
 8009cda:	f7f7 f85d 	bl	8000d98 <__aeabi_fmul>
 8009cde:	4601      	mov	r1, r0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7f6 ff51 	bl	8000b88 <__addsf3>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4620      	mov	r0, r4
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	d0fb      	beq.n	8009ce8 <__ieee754_sqrtf+0x20>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	da06      	bge.n	8009d02 <__ieee754_sqrtf+0x3a>
 8009cf4:	4601      	mov	r1, r0
 8009cf6:	f7f6 ff45 	bl	8000b84 <__aeabi_fsub>
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	f7f7 f900 	bl	8000f00 <__aeabi_fdiv>
 8009d00:	e7f1      	b.n	8009ce6 <__ieee754_sqrtf+0x1e>
 8009d02:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8009d06:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8009d0a:	d029      	beq.n	8009d60 <__ieee754_sqrtf+0x98>
 8009d0c:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8009d10:	07cb      	lsls	r3, r1, #31
 8009d12:	f04f 0300 	mov.w	r3, #0
 8009d16:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8009d1a:	f04f 0419 	mov.w	r4, #25
 8009d1e:	461e      	mov	r6, r3
 8009d20:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009d24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009d28:	bf58      	it	pl
 8009d2a:	0052      	lslpl	r2, r2, #1
 8009d2c:	1040      	asrs	r0, r0, #1
 8009d2e:	0052      	lsls	r2, r2, #1
 8009d30:	1875      	adds	r5, r6, r1
 8009d32:	4295      	cmp	r5, r2
 8009d34:	bfde      	ittt	le
 8009d36:	186e      	addle	r6, r5, r1
 8009d38:	1b52      	suble	r2, r2, r5
 8009d3a:	185b      	addle	r3, r3, r1
 8009d3c:	3c01      	subs	r4, #1
 8009d3e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009d42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009d46:	d1f3      	bne.n	8009d30 <__ieee754_sqrtf+0x68>
 8009d48:	b112      	cbz	r2, 8009d50 <__ieee754_sqrtf+0x88>
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	f023 0301 	bic.w	r3, r3, #1
 8009d50:	105c      	asrs	r4, r3, #1
 8009d52:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8009d56:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8009d5a:	e7c5      	b.n	8009ce8 <__ieee754_sqrtf+0x20>
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	3201      	adds	r2, #1
 8009d60:	0218      	lsls	r0, r3, #8
 8009d62:	d5fb      	bpl.n	8009d5c <__ieee754_sqrtf+0x94>
 8009d64:	3a01      	subs	r2, #1
 8009d66:	1a89      	subs	r1, r1, r2
 8009d68:	e7d0      	b.n	8009d0c <__ieee754_sqrtf+0x44>
	...

08009d6c <_init>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	bf00      	nop
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr

08009d78 <_fini>:
 8009d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7a:	bf00      	nop
 8009d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7e:	bc08      	pop	{r3}
 8009d80:	469e      	mov	lr, r3
 8009d82:	4770      	bx	lr
